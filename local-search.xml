<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker 常用环境搭建</title>
    <link href="/posts/14402/"/>
    <url>/posts/14402/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Docker-部署常用的开发环境"><a href="#使用-Docker-部署常用的开发环境" class="headerlink" title="使用 Docker 部署常用的开发环境"></a>使用 Docker 部署常用的开发环境</h1><p>2022-12-09 03:32:16 ，月黑风高的夜晚，当前写这篇 md 的状态，真的是 md 了！！！</p><p>上一秒我还在快乐的给毕设加缓存，忽然之间好好的一个 redis 说没就没，呜呜呜，我毅然决然决定 run 去 Docker。</p><p>目前的很多开发环境都可以使用 Docker 去直接部署，欸，非常舒服<del>（并不是我懒）</del>。</p><p>然后为了避免以后找不到文档，记录下常用开发环境的部署。</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ol><li><p>首先拉取镜像</p><p><code>docker pull redis:版本号</code></p><p>其中版本号为：<strong>latest</strong> 时，为自动选择最后更新的版本，<strong>此时版本号可省略</strong>，<code>docker run</code> 时同理。</p></li><li><p>在 Linux 服务器里创建配置文件目录以及持久化目录</p><p><code>mkdir -p /home/redis/[port]/data</code></p><ul><li><code>/home/redis</code> ：配置文件的容器卷目录</li><li><code>/home/redis/[port]/data</code> ：持久化文件目录，加入 <code>[port]</code> 主要是为了区分该持久化文件属于哪一个 redis 服务</li></ul></li><li><p>导入配置文件</p><p>主要注意以下配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf">bind 127.0.0.1 # 这行要注释掉，解除本地连接限制<br>protected-mode no # 默认yes，如果设置为yes，则只允许在本机的回环连接，其他机器无法连接。<br>daemonize no # 默认no 为不守护进程模式，docker部署不需要改为yes，docker run -d本身就是后台启动，不然会冲突<br>requirepass 密码 # 设置密码<br>appendonly yes # 持久化<br></code></pre></td></tr></tbody></table></figure></li><li><p>启动 Reids 容器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --restart=always \<br>--log-opt max-size=100m --log-opt max-file=2 \<br>-p 端口号:6379 \<br>--name redis端口号 \<br>-v /home/redis/redis.conf:/etc/redis/redis.conf \<br>-v /home/redis/端口号/data:/data \<br>-d redis:版本号 redis-server /etc/redis/redis.conf --appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></tbody></table></figure><ul><li><code>--restart=always</code> 表示总是自动重启</li><li><code>--log-opt max-size=100m --log-opt max-file=2</code> 表示限定 log 文件的参数</li><li><code>-p 端口号:6379</code> 表示把服务器的端口映射到 Redis 容器的 6379 端口</li><li><code>--name</code> 自定义容器名字</li><li><code>-v</code> 挂载容器卷</li><li><code>-d</code> 表示后台启动</li><li><code>--appendonly yes</code>  代表<strong>开启 redis 持久化</strong></li></ul></li><li><p>使用 <code>docker ps -a</code> 查看运行状态</p></li></ol><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ol><li><p>拉取镜像</p><p><code>docker pull nginx:版本号</code></p><p>参考 <a href="https://www.inencoding.com/posts/14402/#Redis">Redis 的说明</a></p></li><li><p>创建容器卷目录</p><p><code>mkdir -p /home/nginx/ {conf,html,logs}</code></p></li><li><p>在文件夹 <code>/home/nginx/conf</code> 下新建 <code>nginx.conf</code> 文件</p></li><li><p>运行容器并把 nginx 容器的配置文件挂载到主机</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 运行容器并挂载命令<br>docker run --name nginx \<br>-d \ <br>-p 80:80 \<br>--restart=always <br>--privileged=<span class="hljs-literal">true</span> \<br>-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \<br>-v /home/nginx/html:/etc/nginx/html \<br>-v /home/nginx/log:/var/log/nginx \<br>nginx:版本号 <br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 爬虫</title>
    <link href="/posts/62461/"/>
    <url>/posts/62461/</url>
    
    <content type="html"><![CDATA[<h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><h2 id="什么是网络爬虫"><a href="#什么是网络爬虫" class="headerlink" title="什么是网络爬虫"></a>什么是网络爬虫</h2><p><strong>网络爬虫</strong>（又被称为网页蜘蛛、网络机器人），是一种按照一定的规则，自动地抓取互联网信息的程序或者脚本。</p><p><strong>其本质是，由一个入口网页进行深入，不停的进行其他的 URL 的爬取，然后再把抓取到的网页进行分析处理得出想要的数据。</strong></p><p>随着大数据时代的来临，网络爬虫在互联网中的地位将越来越重要。互联网中的数据是海量的，如何自动高效地获取互联网中我们感兴趣的信息并为我们所用是一个重要的问题，而爬虫技术就是为了解决这些问题而生的。</p><h2 id="爬虫的核心"><a href="#爬虫的核心" class="headerlink" title="爬虫的核心"></a>爬虫的核心</h2><ol><li><p>爬取网页：爬取整个网页，包含了网页中所有得内容。</p></li><li><p>解析数据：将网页中你得到的数据，进行解析。</p></li><li><p>难点：爬虫和反爬虫之间的博弈。</p></li></ol><h2 id="网络爬虫的用途"><a href="#网络爬虫的用途" class="headerlink" title="网络爬虫的用途"></a>网络爬虫的用途</h2><ul><li>数据分析 / 人工数据集</li><li>社交软件冷启动</li><li>舆情监控</li><li>竞争对手监控</li><li>。。。</li></ul><h2 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h2><ul><li><strong>通用爬虫</strong><ul><li><strong>实例</strong>：Google、百度、搜狗等搜索引擎</li><li><strong>功能</strong>：访问网页‐&gt; 抓取数据‐&gt; 数据存储‐&gt; 数据处理‐&gt; 提供检索服务</li><li><strong> Robots 协议</strong>：是网站跟爬虫间的协议，用简单直接的 txt 格式文本方式告诉对应的爬虫被允许的权限。</li><li><strong>网站排名</strong>（SEO）：根据 pagerank 算法值进行排名（参考个网站流量、点击率等指标）</li></ul></li><li><strong>聚焦爬虫</strong><ul><li><strong>功能</strong>：根据需求，实现爬虫程序，抓取需要的数据</li><li><strong>设计思路</strong>：<ol><li>确定要爬取的 url</li><li> 模拟浏览器通过 http 协议访问 url，获取服务器返回的 html 代码</li><li>解析 html 字符串（根据一定规则提取需要的数据）</li></ol></li></ul></li></ul><h2 id="反反爬手段"><a href="#反反爬手段" class="headerlink" title="反反爬手段"></a>反反爬手段</h2><ul><li><strong>User‐Agent</strong>：用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</li><li><strong>使用代理 IP</strong>：<ul><li><a href="https://free.kuaidaili.com/free/">快代理</a></li><li><a href="https://proxy.ip3366.net/free/">齐云代理</a></li><li><a href="https://github.com/jhao104/proxy_pool">Proxy_Pool 爬虫代理 IP 池①</a></li><li><a href="https://github.com/Python3WebSpider/ProxyPool">Proxy_Pool 爬虫代理 IP 池②</a></li><li>什么是高匿名、匿名和透明代理？它们有什么区别？<ul><li>使用透明代理，对方服务器可以知道你使用了代理，并且也知道你的真实 IP。</li><li>使用匿名代理，对方服务器可以知道你使用了代理，但不知道你的真实 IP。</li><li>使用高匿名代理，对方服务器不知道你使用了代理，更不知道你的真实 IP。</li></ul></li></ul></li><li><strong>验证码</strong>：<ul><li>打码平台</li><li>云打码平台</li><li>超级鹰</li></ul></li><li><strong>分析动态加载网页</strong>：网站返回的是 js 数据 并不是网页的真实数据<ul><li> selenium 驱动真实的浏览器发送请求</li></ul></li><li><strong>数据解密</strong>：<ul><li>分析 js 代码</li></ul></li></ul><h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><h2 id="urllib-库简介"><a href="#urllib-库简介" class="headerlink" title="urllib 库简介"></a>urllib 库简介</h2><p>urllib 是 Python 标准库中最常用的 Python 网页访问的模块，它可以让用户像访问本地文本文件一样读取网页的内容。 Python2 系列使用的是 urllib2, <strong>Python3 以后将其全部整合为 urllib; 在 Python3.x 中，用户可以使用 urllib 这个库抓取网页</strong>。<br><strong>urllib 库提供了一个网页访问的简单易懂的 API 接口，还包括一些函数方法，用于进行参数编码、下载网页等</strong>操作。这个模块的使用门槛非常低，初学者也可以尝试去抓取和读取或者保存网页。 urllib 是ー个 URL 处理包，在这个包中集合了一些处理 URL 的模块。</p><ol><li><code>urllib.request</code> 模块：用来打开和读取 URL</li><li><code>urllib.error</code> 模块：包含一些由 <code>urllib.request</code> 产生的错误，可以使用 try 进行捕捉处理</li><li><code>urllib.parse</code> 模块：包含一些解析 URL 的方法</li><li><code>urllib.robotparser</code> 模块：用来解析 robots.txt 文本文件。它提供了一个单独的 <code>RobotFileparser</code> 类，通过该类提供的 <code>can_fetch()</code> 方法测试爬虫是否可以下载一个页面</li></ol><h2 id="urllib-库的使用"><a href="#urllib-库的使用" class="headerlink" title="urllib 库的使用"></a>urllib 库的使用</h2><ul><li><code>urllib.request.urlopen ()</code> 模拟浏览器向服务器发送请求</li><li> response 服务器返回的数据：<strong>一个类型，六个方法</strong><ul><li> response 的数据类型是 HttpResponse</li><li> 字节‐‐&gt; 字符串 解码 decode</li><li> 字符串‐‐&gt; 字节 编码 encode</li><li><code>read ()</code> 字节形式读取二进制 扩展：<strong>rede (n) 返回前 n 个字节</strong></li><li><code>readline ()</code> 只能 <strong>读取一行</strong></li><li><code>readlines ()</code> 一行一行读取 <strong>直至结束</strong></li><li><code>getcode ()</code> 获取状态码 （判断书写逻辑是否正确，返回 200 表示正常）</li><li><code>geturl ()</code> 获取 url 地址</li><li><code>getheaders ()</code> 获取 headers</li></ul></li></ul><h3 id="案例：爬取百度首页的HTML代码"><a href="#案例：爬取百度首页的HTML代码" class="headerlink" title="案例：爬取百度首页的HTML代码"></a>案例：爬取百度首页的 HTML 代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-comment"># 使用urllib来获取百度首页源码</span><br><span class="hljs-comment"># 1.定义一个url 你要访问的地址</span><br><br>url = <span class="hljs-string">'http://www.baidu.com'</span><br><br><span class="hljs-comment"># 2.模拟浏览器向服务器发送请求</span><br>response = urllib.request.urlopen(url)<br><br><span class="hljs-comment"># 3.获取响应中的页面源码</span><br><span class="hljs-comment"># read方法 返回的是字节形式的二进制数据</span><br><span class="hljs-comment"># 将二进制的数据转换成字符串</span><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-comment"># 4.打印数据</span><br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220814232957.png" alt="image-20220814232957184"></p><h2 id="urllib下载"><a href="#urllib下载" class="headerlink" title="urllib下载"></a>urllib 下载</h2><p><code>urlretrieve (url,filename)</code> 获取资源，下载到本地</p><h3 id="案例：下载图片视频"><a href="#案例：下载图片视频" class="headerlink" title="案例：下载图片视频"></a>案例：下载图片视频</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os.path<br><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-comment"># 下载网页</span><br>url_page = <span class="hljs-string">"http://www.baidu.com"</span><br><br><span class="hljs-comment"># 下载图片</span><br>url_img = <span class="hljs-string">'https://ts1.cn.mm.bing.net/th/id/R-C.9d2f94190cd332dcc58a406b86a9632d?rik=%2fwzDTXG%2byszt3Q&amp;riu=http%3a%2f%2fimg.zcool.cn%2fcommunity%2f01801d5619d59d32f8755701932582.jpg&amp;ehk=OiCsHvxm9qzPhgwWLmNL2luZVvW3SUvUDNLG5dz%2ffb4%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0'</span><br><br><span class="hljs-comment"># 下载视频</span><br>url_video = <span class="hljs-string">'https://apd-988280ccc495f807042d5d01af540fad.v.smtcdns.com/om.tc.qq.com/AGmstw0bclgHrcC2s4HMMERnVqmqkuznWSNJCFiSudxo/uwMROfz2r57CIaQXGdGnC2ddDmYEwcIXuKj5NQsSsUwCcArN/svp_50001/shg_56839604_50001_195d9bd530d4329e9b6003d890ffaa7b.f622.mp4?sdtfrom=v1010&amp;guid=fda519cd84f8daf0&amp;vkey=1BA564CCBA63DB71E2C8545EB3C58C2E8ABD0DBDB1268D8444A930E0DA3A6DA861E6F962A857D88D3ADD33F7611FC08215B1E6BB0DC307F90B5F415B546127D308ACA21428F933BD7262113B77E8770D58B3257D9A28CCFC2F50E5C07ED354558E41A126C0B8757A8984E2286733EA33758AE41B3F7B54F5FBCFF806C7B69F0C'</span><br><br><span class="hljs-comment"># 创建资源文件夹</span><br>filepath = <span class="hljs-string">'./download'</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>    os.makedirs(filepath)<br><br><span class="hljs-comment"># 下载到资源文件夹</span><br>urllib.request.urlretrieve(url_page, <span class="hljs-string">"./download/百度.html"</span>)<br>urllib.request.urlretrieve(url_img, <span class="hljs-string">"./download/陈奕迅.jpg"</span>)<br>urllib.request.urlretrieve(url_video, <span class="hljs-string">"./download/最佳损友.mp4"</span>)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815122142.png" alt="image-20220815122142584"></p><h2 id="请求对象的定制应对UA反爬"><a href="#请求对象的定制应对UA反爬" class="headerlink" title="请求对象的定制应对UA反爬"></a>请求对象的定制应对 UA 反爬</h2><p><strong>UA 介绍</strong>：User Agent 中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统 及版本、CPU 类型、浏览器及版本。浏览器内核、浏览器渲染引擎、浏览器语言、浏览器插件等</p><p><strong>语法：</strong><code>request = urllib.request.Request ()</code></p><h3 id="url-的组成"><a href="#url-的组成" class="headerlink" title="url 的组成"></a>url 的组成</h3><p><code>https://www.baidu.com/s?wd=周杰伦</code></p><ul><li><code>http / https</code>：协议</li><li><code>www.baidu.com</code>：主机</li><li><code>80 / 443</code>：端口</li><li><code>wd = 周杰伦</code>：参数</li><li><code>s</code> ：路径</li><li><code>#</code>：锚点</li></ul><h3 id="案例：UA定制应对反爬"><a href="#案例：UA定制应对反爬" class="headerlink" title="案例：UA定制应对反爬"></a>案例：UA 定制应对反爬</h3><p>当爬取 <code>https</code> 协议的网页时，有可能会遭遇 UA 反爬，所以需要定制 UA，欺骗服务器。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><br>url = <span class="hljs-string">'https://www.baidu.com'</span><br><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br><span class="hljs-comment"># 因为urlopen方法中不能存储字典 所以headers不能传递进去</span><br><span class="hljs-comment"># 请求对象的定制</span><br><span class="hljs-comment"># 之所以写url=url,headers=headers,而不直接写url,headers是因为源码def __init__(self, url, data=None, headers={},origin_req_host=None, unverifiable=False,method=None)的第三参数才是headers,如果直接写，那么会把headers当作第二个参数</span><br>request = urllib.request.Request(url=url, headers=headers)<br><br>response = urllib.request.urlopen(request)<br><br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">'utf8'</span>))<br></code></pre></td></tr></tbody></table></figure><p>未定制 UA 运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815163541.png" alt="image-20220815163541008"></p><p>定制 UA 运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815163450.png" alt="image-20220815163450758"></p><h2 id="编码集"><a href="#编码集" class="headerlink" title="编码集"></a>编码集</h2><p>由于计算机是美国人发明的，因此，最早只有 127 个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号， 这个编码表被称为 ASCII 编码，比如大写字母 A 的编码是 65，小写字母 z 的编码是 122。 <strong>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和 ASCII 编码冲突， 所以，中国制定了 GB2312 编码，用来把中文编进去。 你可以想得到的是，全世界有上百种语言，日本把日文编到 Shift_JIS 里，韩国把韩文编到 Euc‐kr 里</strong>，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。 因此，Unicode 应运而生。Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码问题了。 Unicode 标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要 4 个字节）。 现代操作系统和大多数编程语言都直接支持 Unicode。</p><p><code>urllib.parse.urlencode ()</code><strong>就是将中文变成 Unicode 编码，这样才不会报错</strong></p><h3 id="get-请求方式：quote方法"><a href="#get-请求方式：quote方法" class="headerlink" title="get 请求方式：quote方法"></a>get 请求方式：quote 方法</h3><p>quote（）方法能够将汉字转换成 unicode 编码的格式，适用于<strong>单个参数</strong></p><h4 id="案例：搜索单参数"><a href="#案例：搜索单参数" class="headerlink" title="案例：搜索单参数"></a>案例：搜索单参数</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> urllib.request<br><br>url = <span class="hljs-string">'https://www.baidu.com/s?wd='</span><br><br><span class="hljs-comment"># 请求对象的定制为了解决反爬的第一种手段</span><br>headers = {<br>    <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'xxx'</span>,<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br><span class="hljs-comment"># 将周杰伦三个字变成unicode编码的格式</span><br><span class="hljs-comment"># 我们需要依赖于urllib.parse</span><br>name = urllib.parse.quote(<span class="hljs-string">'周杰伦'</span>)<br><br>url = url + name<br><br><span class="hljs-comment"># 请求对象的定制</span><br>request = urllib.request.Request(url=url, headers=headers)<br><br><span class="hljs-comment"># 模拟浏览器向服务器发送请求</span><br>response = urllib.request.urlopen(request)<br><br><span class="hljs-comment"># 获取响应的内容</span><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-comment"># 打印数据</span><br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815194608.png" alt="image-20220815194608826"></p><h3 id="get-请求方式：urlencode方法"><a href="#get-请求方式：urlencode方法" class="headerlink" title="get 请求方式：urlencode方法"></a>get 请求方式：urlencode 方法</h3><p><code>urlencode()</code> 方法也可以将汉字转换成 unicode 编码，适用于<strong>多个参数</strong></p><h4 id="案例：搜索多参数"><a href="#案例：搜索多参数" class="headerlink" title="案例：搜索多参数"></a>案例：搜索多参数</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urlencode应用场景：多个参数的时候</span><br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> urllib.request<br><br>base_url = <span class="hljs-string">'https://www.baidu.com/s?'</span><br><br>data = {<br>    <span class="hljs-string">'wd'</span>: <span class="hljs-string">'周杰伦'</span>,<br>    <span class="hljs-string">'sex'</span>: <span class="hljs-string">'男'</span>,<br>    <span class="hljs-string">'location'</span>: <span class="hljs-string">'中国台湾省'</span><br>}<br><br>new_data = urllib.parse.urlencode(data)<br><br><span class="hljs-comment"># 请求资源路径</span><br>url = base_url + new_data<br><br><span class="hljs-comment"># 请求对象的定制为了解决反爬的第一种手段</span><br>headers = {<br>    <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'xxx'</span>,<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br><span class="hljs-comment"># 请求对象的定制</span><br>request = urllib.request.Request(url=url, headers=headers)<br><br><span class="hljs-comment"># 模拟浏览器向服务器发送请求</span><br>response = urllib.request.urlopen(request)<br><br><span class="hljs-comment"># 获取网页源码的数据</span><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-comment"># 打印数据</span><br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815194951.png" alt="image-20220815194951387"></p><h3 id="post-请求方式"><a href="#post-请求方式" class="headerlink" title="post 请求方式"></a>post 请求方式</h3><p>post 请求方式与 get 请求方式异同：</p><ul><li>相同点<ul><li> get 请求方式和 post 请求方式的<strong>参数都需要必须编码</strong></li></ul></li><li>不同点<ul><li> get 请求方式的<strong>参数是拼接到 url 后面</strong>，编码之后<strong>不需要调用</strong> <code>encode</code> 方法</li><li> post 请求方式的<strong>参数是放在请求对象定制的方法中</strong>，编码之后<strong>需要调用</strong> <code>encode</code> 方法</li></ul></li></ul><h4 id="案例：百度翻译"><a href="#案例：百度翻译" class="headerlink" title="案例：百度翻译"></a>案例：百度翻译</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># post请求</span><br><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> urllib.request<br><br>url = <span class="hljs-string">'https://fanyi.baidu.com/sug'</span><br><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br>data = {<br>    <span class="hljs-string">'kw'</span>: <span class="hljs-string">'reptile'</span><br>}<br><br><span class="hljs-comment"># post请求的参数 必须要进行编码</span><br>data = urllib.parse.urlencode(data).encode(<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-comment"># post的请求的参数 是不会拼接在url的后面的  而是需要放在请求对象定制的参数中</span><br><span class="hljs-comment"># post请求的参数 必须要进行编码</span><br>request = urllib.request.Request(url=url, data=data, headers=headers)<br><br><span class="hljs-comment"># 模拟浏览器向服务器发送请求</span><br>response = urllib.request.urlopen(request)<br><br><span class="hljs-comment"># 获取响应的数据</span><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-comment"># 字符串--》json对象</span><br>obj = json.loads(content)<br><span class="hljs-built_in">print</span>(obj)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815200515.png" alt="image-20220815200515615"></p><h2 id="爬取ajax请求"><a href="#爬取ajax请求" class="headerlink" title="爬取ajax请求"></a>爬取 ajax 请求</h2><h3 id="ajax的get请求"><a href="#ajax的get请求" class="headerlink" title="ajax的get请求"></a>ajax 的 get 请求</h3><h4 id="案例：爬取一页豆瓣电影"><a href="#案例：爬取一页豆瓣电影" class="headerlink" title="案例：爬取一页豆瓣电影"></a>案例：爬取一页豆瓣电影</h4><p>爬取<a href="https://movie.douban.com/typerank?type_name=%E6%82%AC%E7%96%91&amp;type=10&amp;interval_id=100:90&amp;action=">豆瓣电影排行榜中悬疑类电影</a>的第一页</p><p>首先找到 url 请求地址</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815203500.png" alt="image-20220815203500325"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib.request<br><br>url = <span class="hljs-string">'https://movie.douban.com/j/chart/top_list?type=10&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20'</span><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br><span class="hljs-comment"># (1) 请求对象的定制</span><br>request = urllib.request.Request(url=url, headers=headers)<br><br><span class="hljs-comment"># （2）获取响应的数据</span><br>response = urllib.request.urlopen(request)<br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><span class="hljs-built_in">print</span>(content)<br><br><span class="hljs-comment"># (3) 数据下载到本地</span><br><span class="hljs-comment"># open方法默认情况下使用的是gbk的编码  如果我们要想保存汉字 那么需要在open方法中指定编码格式为utf-8</span><br>filepath = <span class="hljs-string">'./download/'</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>    os.makedirs(filepath)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'豆瓣.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(content)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815205456.png" alt="image-20220815205456222"></p><h4 id="案例：爬取任意页数豆瓣电影"><a href="#案例：爬取任意页数豆瓣电影" class="headerlink" title="案例：爬取任意页数豆瓣电影"></a>案例：爬取任意页数豆瓣电影</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> urllib.request<br><br><br><span class="hljs-comment"># 创建request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat_request</span>(<span class="hljs-params">page</span>):<br>    base_url = <span class="hljs-string">'https://movie.douban.com/j/chart/top_list?type=10&amp;interval_id=100%3A90&amp;action=&amp;'</span><br>    data = {<br>        <span class="hljs-string">'start'</span>: (page - <span class="hljs-number">1</span>) * <span class="hljs-number">20</span>,<br>        <span class="hljs-string">'limit'</span>: <span class="hljs-number">20</span><br>    }<br>    headers = {<br>        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>    }<br>    url = base_url + urllib.parse.urlencode(data)<br>    <span class="hljs-keyword">return</span> urllib.request.Request(url=url, headers=headers)<br><br><br><span class="hljs-comment"># 获取返回值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_content</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> urllib.request.urlopen(request).read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><br><span class="hljs-comment"># 下载到本地</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">download_page, content</span>):<br>    filepath = <span class="hljs-string">'./download/'</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>        os.makedirs(filepath)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'豆瓣_'</span> + <span class="hljs-built_in">str</span>(download_page) + <span class="hljs-string">'.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:<br>        fp.write(content)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    start_page = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入起始的页码:'</span>))<br>    end_page = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入结束的页面:'</span>))<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_page, end_page + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># (1) 请求对象的定制</span><br>        request = creat_request(page)<br>        <span class="hljs-comment"># （2）获取响应的数据</span><br>        contend = get_content(request)<br>        <span class="hljs-comment"># (3) 数据下载到本地</span><br>        download(page, contend)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815211806.png" alt="image-20220815211806707"></p><p>资源目录：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815211824.png" alt="image-20220815211824118"></p><h3 id="ajax的post请求"><a href="#ajax的post请求" class="headerlink" title="ajax的post请求"></a>ajax 的 post 请求</h3><h4 id="案例：爬取肯德基餐厅信息"><a href="#案例：爬取肯德基餐厅信息" class="headerlink" title="案例：爬取肯德基餐厅信息"></a>案例：爬取肯德基餐厅信息</h4><p>首先在<a href="http://www.kfc.com.cn/kfccda/storelist/index.aspx">肯德基餐厅信息页面</a>找到请求地址</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815214613.png" alt="image-20220815214613816"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> urllib.request<br><br><br><span class="hljs-comment"># 创建request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat_request</span>(<span class="hljs-params">city, pageindex</span>):<br>    url = <span class="hljs-string">'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname'</span><br>    data = {<br>        <span class="hljs-string">'cname'</span>: city,<br>        <span class="hljs-string">'pageindex'</span>: pageindex,<br>        <span class="hljs-string">'pagesize'</span>: <span class="hljs-number">10</span><br>    }<br>    headers = {<br>        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>    }<br>    data = urllib.parse.urlencode(data).encode(<span class="hljs-string">'utf-8'</span>)<br>    <span class="hljs-keyword">return</span> urllib.request.Request(url=url, data=data, headers=headers)<br><br><br><span class="hljs-comment"># 获取返回值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_content</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> urllib.request.urlopen(request).read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><br><span class="hljs-comment"># 下载到本地</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">city, pageindex, content</span>):<br>    filepath = <span class="hljs-string">'./download/'</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>        os.makedirs(filepath)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'KFC_'</span> + city + <span class="hljs-string">'_'</span> + <span class="hljs-built_in">str</span>(pageindex) + <span class="hljs-string">'.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:<br>        fp.write(content)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    city = <span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入需要查询的城市:'</span>)<br>    start_page = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入起始的页码:'</span>))<br>    end_page = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入结束的页面:'</span>))<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_page, end_page + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># (1) 请求对象的定制</span><br>        request = creat_request(city, page)<br>        <span class="hljs-comment"># （2）获取响应的数据</span><br>        contend = get_content(request)<br>        <span class="hljs-comment"># (3) 数据下载到本地</span><br>        download(city, page, contend)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815214652.png" alt="image-20220815214652509"></p><p>资源目录：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815214714.png" alt="image-20220815214714316"></p><h2 id="urllib异常"><a href="#urllib异常" class="headerlink" title="urllib异常"></a>urllib 异常</h2><p>在我们的代码中，为了使其健壮性更好，我们可以使用异常捕获 <code>try-except</code> 语句来捕获异常</p><p>urllib 发送请求的过程中，有可能出现两种异常，分别为：</p><ul><li>URLError</li><li>HTTPError</li></ul><h2 id="cookie登录"><a href="#cookie登录" class="headerlink" title="cookie登录"></a>cookie 登录</h2><p>cookie 中携带者个人登录信息，如果有登录之后的 cookie，那么我们可以携带者 cookie 进入到任何页面</p><p>适用的场景：数据采集的时候 需要绕过登陆 然后进入到某个页面</p><p><strong>什么情况下访问不成功？</strong></p><p>因为请求头的信息不够  所以访问不成功</p><h3 id="案例：利用cookie登录微博，并下载详细信息页面"><a href="#案例：利用cookie登录微博，并下载详细信息页面" class="headerlink" title="案例：利用cookie登录微博，并下载详细信息页面"></a>案例：利用 cookie 登录微博，并下载详细信息页面</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><br>url = <span class="hljs-string">'https://weibo.cn/7752848280/info'</span><br><br>headers = {<br>    <span class="hljs-string">'authority'</span>: <span class="hljs-string">'weibo.cn'</span>,<br>    <span class="hljs-string">'method'</span>: <span class="hljs-string">'GET'</span>,<br>    <span class="hljs-string">'path'</span>: <span class="hljs-string">'/6451491586/info'</span>,<br>    <span class="hljs-string">'scheme'</span>: <span class="hljs-string">'https'</span>,<br>    <span class="hljs-string">'accept'</span>: <span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,<br>    <span class="hljs-comment"># 'accept-encoding': 'gzip, deflate, br',</span><br>    <span class="hljs-string">'accept-language'</span>: <span class="hljs-string">'zh-CN,zh;q=0.9'</span>,<br>    <span class="hljs-string">'cache-control'</span>: <span class="hljs-string">'max-age=0'</span>,<br>    <span class="hljs-comment"># cookie中携带着你的登陆信息   如果有登陆之后的cookie  那么我们就可以携带着cookie进入到任何页面</span><br>    <span class="hljs-string">'cookie'</span>: <span class="hljs-string">'xxx'</span>,<br>    <span class="hljs-comment"># referer  判断当前路径是不是由上一个路径进来的    一般情况下 是做图片防盗链</span><br>    <span class="hljs-string">'referer'</span>: <span class="hljs-string">'https://weibo.cn/'</span>,<br>    <span class="hljs-string">'sec-ch-ua'</span>: <span class="hljs-string">'"Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"'</span>,<br>    <span class="hljs-string">'sec-ch-ua-mobile'</span>: <span class="hljs-string">'?0'</span>,<br>    <span class="hljs-string">'sec-fetch-dest'</span>: <span class="hljs-string">'document'</span>,<br>    <span class="hljs-string">'sec-fetch-mode'</span>: <span class="hljs-string">'navigate'</span>,<br>    <span class="hljs-string">'sec-fetch-site'</span>: <span class="hljs-string">'same-origin'</span>,<br>    <span class="hljs-string">'sec-fetch-user'</span>: <span class="hljs-string">'?1'</span>,<br>    <span class="hljs-string">'upgrade-insecure-requests'</span>: <span class="hljs-string">'1'</span>,<br>    <span class="hljs-string">'user-agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span>,<br>}<br><span class="hljs-comment"># 请求对象的定制</span><br>request = urllib.request.Request(url=url, headers=headers)<br><span class="hljs-comment"># 模拟浏览器向服务器发送请求</span><br>response = urllib.request.urlopen(request)<br><span class="hljs-comment"># 获取响应的数据</span><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-comment"># 将数据保存到本地</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'weibo.html'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(content)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220815231641.png" alt="image-20220815231641103"></p><h2 id="handler-处理器"><a href="#handler-处理器" class="headerlink" title="handler 处理器"></a>handler 处理器</h2><ul><li>目的是用来定制更高级的请求头，随着业务逻辑的复杂，请求对象的定制已经满足不了我们的需求（例如：动态 cookie 和代理不能使用请求对象定制）</li><li>对比：<ul><li><code>urllib.request.urlopen (url)</code> 不能定制请求头；</li><li><code>urllib.request.Request ()</code> 可以定制请求头</li></ul></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 需求 使用handler来访问百度  获取网页源码</span><br><br><span class="hljs-keyword">import</span> urllib.request<br><br>url = <span class="hljs-string">'http://www.baidu.com'</span><br><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br>request = urllib.request.Request(url=url, headers=headers)<br><br><span class="hljs-comment"># handler   build_opener  open</span><br><br><span class="hljs-comment"># （1）获取hanlder对象</span><br>handler = urllib.request.HTTPHandler()<br><br><span class="hljs-comment"># （2）获取opener对象</span><br>opener = urllib.request.build_opener(handler)<br><br><span class="hljs-comment"># (3) 调用open方法</span><br>response = opener.<span class="hljs-built_in">open</span>(request)<br><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></tbody></table></figure><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><ul><li>代理服务器的常用功能：<ul><li>突破自身 ip 访问限制，访问国外节点</li><li>访问一些单位和集体的内部资源</li><li>提高访问速度</li><li>隐藏真实 ip</li></ul></li><li> 代码配置代理<ul><li>创建 <code>request</code> 对象</li><li>创建 <code>proxyHandler</code> 对象</li><li>用 <code>handler</code> 对象创建 opener 对象</li><li>使用 <code>opener.open</code> 函数发送请求</li></ul></li></ul><h4 id="案例：使用代理服务器查看ip"><a href="#案例：使用代理服务器查看ip" class="headerlink" title="案例：使用代理服务器查看ip"></a>案例：使用代理服务器查看 ip</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib.request<br><br>url = <span class="hljs-string">'http://www.baidu.com/s?wd=ip'</span><br><br>headers = {<br>    <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'xxx'</span>,<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br><span class="hljs-comment"># 请求对象的定制</span><br>request = urllib.request.Request(url=url, headers=headers)<br><br><span class="hljs-comment"># 模拟浏览器访问服务器</span><br><span class="hljs-comment"># response = urllib.request.urlopen(request)</span><br><br>proxies = {<br>    <span class="hljs-string">'http'</span>: <span class="hljs-string">'139.9.64.238:443'</span><br>}<br><span class="hljs-comment"># handler  build_opener  open</span><br>handler = urllib.request.ProxyHandler(proxies=proxies)<br><br>opener = urllib.request.build_opener(handler)<br><br>response = opener.<span class="hljs-built_in">open</span>(request)<br><br><span class="hljs-comment"># 获取响应的信息</span><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-comment"># 保存</span><br>filepath = <span class="hljs-string">'./download/'</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>    os.makedirs(filepath)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'proxy.html'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(content)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220816002145.png" alt="image-20220816002144984"></p><p>打开页面：发现 ip 已经改变</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220816002207.png" alt="image-20220816002207220"></p><h3 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h3><p>当我们的代理 IP 高频次访问某一网站时，有可能使代理 IP 被封杀，所以我们需要使用代理池随机 IP 来避免 IP 被封杀。</p><h4 id="案例：模拟使用代理池"><a href="#案例：模拟使用代理池" class="headerlink" title="案例：模拟使用代理池"></a>案例：模拟使用代理池</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> urllib.request<br><br>proxies_pool = [<br>    {<span class="hljs-string">'http'</span>: <span class="hljs-string">'183.239.62.251:9091'</span>},<br>    {<span class="hljs-string">'http'</span>: <span class="hljs-string">'221.5.80.66:3128'</span>}<br>]<br><br>proxies = random.choice(proxies_pool)<br><br>url = <span class="hljs-string">'http://www.baidu.com/s?wd=ip'</span><br><br>headers = {<br>    <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'xxx'</span>,<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br>request = urllib.request.Request(url=url, headers=headers)<br><br>handler = urllib.request.ProxyHandler(proxies=proxies)<br><br>opener = urllib.request.build_opener(handler)<br><br>response = opener.<span class="hljs-built_in">open</span>(request)<br><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br>filepath = <span class="hljs-string">'./download/'</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>    os.makedirs(filepath)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'proxy.html'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(content)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p>第一个 IP：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220816002939.png" alt="image-20220816002939719"></p><p>第二个 IP：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220816003107.png" alt="image-20220816003107554"></p><h1 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h1><h2 id="XPath解析"><a href="#XPath解析" class="headerlink" title="XPath解析"></a>XPath 解析</h2><ol><li><p>首先在 chrmoe 浏览器上安装 <a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl/related?utm_source=chrome-ntp-icon">XPath 插件</a>（需要魔法）</p></li><li><p>安装 lxml 库</p><p><code>pip install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p></li><li><p>导入 <code>lxml.etree</code></p><p><code>from lxml import etree</code></p></li><li><p><code>etree.parse()</code>  解析本地文件</p><p><code>html_tree = etree.parse('XX.html')</code></p></li><li><p><code>etree.HTML()</code> 解析服务器响应文件</p><p><code>html_tree = etree.HTML(response.read().decode('utf‐8')</code></p></li><li><p>解析数据</p><p><code>html_tree.xpath (xpath 路径)</code></p></li></ol><h3 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath 语法</h3><ul><li><p>路径查询</p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"> nodename</td><td align="left"> 选取此节点的所有子节点。</td></tr><tr><td align="left">/</td><td align="left"> 从根节点选取（取子节点）。</td></tr><tr><td align="left">//</td><td align="left"> 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）。</td></tr><tr><td align="left">.</td><td align="left"> 选取当前节点。</td></tr><tr><td align="left">..</td><td align="left"> 选取当前节点的父节点。</td></tr><tr><td align="left">@</td><td align="left">选取属性。</td></tr></tbody></table><p>例子：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"> bookstore</td><td align="left"> 选取 bookstore 元素的所有子节点。</td></tr><tr><td align="left">/bookstore</td><td align="left"> 选取根元素 bookstore。注释：假如路径起始于正斜杠 (/)，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">bookstore/book</td><td align="left"> 选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="left">//book</td><td align="left"> 选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">bookstore//book</td><td align="left"> 选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="left">//@lang</td><td align="left"> 选取名为 lang 的所有属性。</td></tr></tbody></table></li><li><p>谓词查询</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"> /bookstore/book[1]</td><td align="left"> 选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td align="left">/bookstore/book[last()]</td><td align="left"> 选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td align="left">/bookstore/book[last()-1]</td><td align="left"> 选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td align="left">/bookstore/book[position()&lt;3]</td><td align="left"> 选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td align="left">//title[@lang]</td><td align="left"> 选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td align="left">//title[@lang=’eng’]</td><td align="left"> 选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]</td><td align="left"> 选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]//title</td><td align="left"> 选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table></li><li><p>模糊查询</p><table><thead><tr><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td> //div[contains(@id, “he”)]</td><td> 选取文档中所有 id 属性包含”he“的 div 元素</td></tr><tr><td> //div[starts‐with(@id, “he”)]</td><td> 选取文档中所有 id 属性开始于”he“的 div 元素</td></tr><tr><td> //div[ends-with(@id, “he”)]</td><td> 选取文档中所有 id 属性以”he“结尾的 div 元素</td></tr></tbody></table></li><li><p>获取标签中的内容</p><table><thead><tr><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td> //div/h1/text()</td><td> 选取文档中所有 div 元素下的 h1 元素的内容</td></tr></tbody></table></li><li><p>选取未知节点</p><table><thead><tr><th align="left">通配符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"> *</td><td align="left"> 匹配任何元素节点。</td></tr><tr><td align="left">@*</td><td align="left"> 匹配任何属性节点。</td></tr><tr><td align="left">node()</td><td align="left"> 匹配任何类型的节点。</td></tr></tbody></table><p>例子：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"> /bookstore/*</td><td align="left"> 选取 bookstore 元素的所有子元素。</td></tr><tr><td align="left">//*</td><td align="left"> 选取文档中的所有元素。</td></tr><tr><td align="left">//title[@*]</td><td align="left"> 选取所有带有属性的 title 元素。</td></tr></tbody></table></li><li><p>选取若干路径</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"> //book/title | //book/price</td><td align="left"> 选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td align="left">//title | //price</td><td align="left"> 选取文档中的所有 title 和 price 元素。</td></tr><tr><td align="left">/bookstore/book/title | //price</td><td align="left"> 选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table></li></ul><h3 id="XPath内建函数"><a href="#XPath内建函数" class="headerlink" title="XPath内建函数"></a>XPath 内建函数</h3><table><thead><tr><th>函数名称</th><th> xpath 表达式示例</th><th>示例说明</th></tr></thead><tbody><tr><td><code>text()</code></td><td><code>./text()</code></td><td>文本匹配，表示值取当前节点中的文本内容。</td></tr><tr><td><code>contains()</code></td><td><code>//div[contains(@id,'stu')] </code></td><td>模糊匹配，表示选择 id 中包含 “stu” 的所有 div 节点。</td></tr><tr><td><code>last()</code></td><td><code>//*[@class='web'][last()]</code></td><td>位置匹配，表示选择 @class=’web’ 的最后一个节点。</td></tr><tr><td><code>position()</code></td><td><code>//*[@class='site'][position()&lt;=2]</code></td><td>位置匹配，表示选择 @class=’site’ 的前两个节点。</td></tr><tr><td><code>start-with()</code></td><td><code>"//input[start-with(@id,'st')]"</code></td><td>匹配 id 以 st 开头的元素。</td></tr><tr><td><code>ends-with()</code></td><td><code>"//input[ends-with(@id,'st')]"</code></td><td>匹配 id 以 st 结尾的元素。</td></tr><tr><td><code>concat(string1,string2)</code></td><td><code>concat ('C 语言中文网 ',.//*[@class='stie']/@href)</code></td><td>C 语言中文与标签类别属性为 “stie” 的 href 地址做拼接。</td></tr></tbody></table><h3 id="XPath-轴（Axes）"><a href="#XPath-轴（Axes）" class="headerlink" title="XPath 轴（Axes）"></a>XPath 轴（Axes）</h3><table><thead><tr><th align="left">轴名称</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left"> ancestor</td><td align="left"> 选取当前节点的所有先辈（父、祖父等）。</td></tr><tr><td align="left">ancestor-or-self</td><td align="left"> 选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td></tr><tr><td align="left">attribute</td><td align="left"> 选取当前节点的所有属性。</td></tr><tr><td align="left">child</td><td align="left"> 选取当前节点的所有子元素。</td></tr><tr><td align="left">descendant</td><td align="left"> 选取当前节点的所有后代元素（子、孙等）。</td></tr><tr><td align="left">descendant-or-self</td><td align="left"> 选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td></tr><tr><td align="left">following</td><td align="left"> 选取文档中当前节点的结束标签之后的所有节点。</td></tr><tr><td align="left">following-sibling</td><td align="left"> 选取当前节点之后的所有兄弟节点</td></tr><tr><td align="left"> namespace</td><td align="left"> 选取当前节点的所有命名空间节点。</td></tr><tr><td align="left">parent</td><td align="left"> 选取当前节点的父节点。</td></tr><tr><td align="left">preceding</td><td align="left"> 选取文档中当前节点的开始标签之前的所有节点。</td></tr><tr><td align="left">preceding-sibling</td><td align="left"> 选取当前节点之前的所有同级节点。</td></tr><tr><td align="left">self</td><td align="left"> 选取当前节点。</td></tr></tbody></table><h3 id="XPath-运算符"><a href="#XPath-运算符" class="headerlink" title="XPath 运算符"></a>XPath 运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="left"> |</td><td align="left"> 计算两个节点集</td><td align="left"> //book | //cd</td><td align="left"> 返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td align="left"> +</td><td align="left"> 加法</td><td align="left"> 6 + 4</td><td align="left">10</td></tr><tr><td align="left">-</td><td align="left"> 减法</td><td align="left"> 6 - 4</td><td align="left">2</td></tr><tr><td align="left">*</td><td align="left"> 乘法</td><td align="left"> 6 * 4</td><td align="left">24</td></tr><tr><td align="left">div</td><td align="left"> 除法</td><td align="left"> 8 div 4</td><td align="left">2</td></tr><tr><td align="left">=</td><td align="left"> 等于</td><td align="left"> price=9.80</td><td align="left"> 如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left">!=</td><td align="left"> 不等于</td><td align="left"> price!=9.80</td><td align="left"> 如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr><tr><td align="left">&lt;</td><td align="left"> 小于</td><td align="left"> price&lt;9.80</td><td align="left"> 如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left">&lt;=</td><td align="left"> 小于或等于</td><td align="left"> price&lt;=9.80</td><td align="left"> 如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left">&gt;</td><td align="left"> 大于</td><td align="left"> price&gt;9.80</td><td align="left"> 如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr><tr><td align="left">&gt;=</td><td align="left"> 大于或等于</td><td align="left"> price&gt;=9.80</td><td align="left"> 如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td></tr><tr><td align="left">or</td><td align="left"> 或</td><td align="left"> price=9.80 or price=9.70</td><td align="left"> 如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td></tr><tr><td align="left">and</td><td align="left"> 与</td><td align="left"> price&gt;9.00 and price&lt;9.90</td><td align="left"> 如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td></tr><tr><td align="left">mod</td><td align="left"> 计算除法的余数</td><td align="left"> 5 mod 2</td><td align="left">1</td></tr></tbody></table><h3 id="案例：获取百度一下"><a href="#案例：获取百度一下" class="headerlink" title="案例：获取百度一下"></a>案例：获取百度一下</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br><span class="hljs-comment"># 1 获取网页的源码</span><br><span class="hljs-comment"># 2 解析</span><br><span class="hljs-comment"># 3 打印</span><br><br>url = <span class="hljs-string">'http://www.baidu.com'</span><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><span class="hljs-comment"># 获取服务器数据</span><br>request = urllib.request.Request(url=url, headers=headers)<br>handler = urllib.request.HTTPHandler()<br>opener = urllib.request.build_opener(handler)<br>response = opener.<span class="hljs-built_in">open</span>(request)<br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><span class="hljs-comment"># 解析</span><br>tree = etree.HTML(content)<br>resource = tree.xpath(<span class="hljs-string">"//input[@id = 'su']/@value"</span>)<br><span class="hljs-comment"># 打印</span><br><span class="hljs-built_in">print</span>(resource)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220816110320.png" alt="image-20220816110320088"></p><h3 id="案例：获取站长素材某几页类型的图片"><a href="#案例：获取站长素材某几页类型的图片" class="headerlink" title="案例：获取站长素材某几页类型的图片"></a>案例：获取站长素材某几页类型的图片</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br><br><span class="hljs-comment"># 需求：获取前十页图片</span><br><span class="hljs-comment"># 获取代理IP</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_proxy</span>():<br>    proxy = requests.get(<span class="hljs-string">"http://demo.spiderpy.cn//get/"</span>).json().get(<span class="hljs-string">"proxy"</span>)<br>    temp = proxy.split(<span class="hljs-string">':'</span>)<br>    <span class="hljs-keyword">return</span> {temp[<span class="hljs-number">0</span>]: temp[<span class="hljs-number">1</span>]}<br><br><br><span class="hljs-comment"># 创建request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat_request</span>(<span class="hljs-params">url</span>):<br>    headers = {<br>        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>    }<br>    <span class="hljs-keyword">return</span> urllib.request.Request(url=url, headers=headers)<br><br><br><span class="hljs-comment"># 创建页面url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat_page_url</span>(<span class="hljs-params">page</span>):<br>    base_url = <span class="hljs-string">'https://sc.chinaz.com/tupian/'</span><br>    <span class="hljs-keyword">if</span> page == <span class="hljs-number">1</span>:<br>        url = base_url + <span class="hljs-string">'index.html'</span><br>    <span class="hljs-keyword">else</span>:<br>        url = base_url + <span class="hljs-string">'index_'</span> + <span class="hljs-built_in">str</span>(page) + <span class="hljs-string">'.html'</span><br>    <span class="hljs-keyword">return</span> url<br><br><br><span class="hljs-comment"># 获取返回值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_content</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>, request</span>):<br>    handler = urllib.request.ProxyHandler(proxies=get_proxy())<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">'page'</span>:<br>        content = urllib.request.build_opener(handler).<span class="hljs-built_in">open</span>(request).read().decode(<span class="hljs-string">'utf-8'</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">'img'</span>:<br>        content = urllib.request.build_opener(handler).<span class="hljs-built_in">open</span>(request).read()<br>    <span class="hljs-keyword">if</span> content <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-comment"># 下载到本地</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">content</span>):<br>    filepath = <span class="hljs-string">'./download/img/'</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>        os.makedirs(filepath)<br>    tree = etree.HTML(content)<br>    <span class="hljs-comment"># 这里为什么不用src属性，是因为一般设计类图片网站会懒加载，需要在页面中找到能组成url的属性</span><br>    src_list = tree.xpath(<span class="hljs-string">'//body/div[3]/div[2]/div/img/@data-original'</span>)<br>    name_list = tree.xpath(<span class="hljs-string">'//body/div[3]/div[2]/div/img/@alt'</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(src_list)):<br>        src = src_list[i]<br>        name = name_list[i]<br>        url = <span class="hljs-string">'https:'</span> + src.replace(<span class="hljs-string">'_s'</span>, <span class="hljs-string">''</span>)<br>        temp_request = creat_request(url)<br>        temp_content = get_content(<span class="hljs-string">'img'</span>, temp_request)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + name + <span class="hljs-string">'.jpg'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> fp:<br>            fp.write(temp_content)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    start_page = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入起始的页码:'</span>))<br>    end_page = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入结束的页面:'</span>))<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_page, end_page + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># (1) 请求对象的定制</span><br>        page_url = creat_page_url(page)<br>        request = creat_request(page_url)<br>        <span class="hljs-comment"># （2）获取响应的数据</span><br>        contend = get_content(<span class="hljs-string">'page'</span>, request)<br>        <span class="hljs-comment"># (3) 数据下载到本地</span><br>        download(contend)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220816144546.png" alt="image-20220816144546226"></p><p>资源目录：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220816144624.png" alt="image-20220816144624291"></p><h2 id="jsonpath解析"><a href="#jsonpath解析" class="headerlink" title="jsonpath解析"></a>jsonpath 解析</h2><p><strong>jsonpath 适用于解析本地文件，不能用于解析服务器响应文件</strong></p><ol><li><p>安装 jsonpath</p><p><code>pip install jsonpath -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p></li><li><p>基本使用</p><ul><li><code>obj=json.load (open ('json 文件 ', 'r', encoding='utf‐8'))</code></li><li><code>res = jsonpath.jsonpath (obj, 'jsonpath 语法 ')</code></li></ul></li></ol><h3 id="jsonpath语法"><a href="#jsonpath语法" class="headerlink" title="jsonpath语法"></a>jsonpath 语法</h3><table><thead><tr><th>XPath</th><th>JsonPath</th><th> 说明</th></tr></thead><tbody><tr><td><code>/</code></td><td><code>$</code></td><td>文档根元素</td></tr><tr><td><code>.</code></td><td><code>@</code></td><td>当前元素</td></tr><tr><td><code>/</code></td><td><code>.</code> 或 <code>[]</code></td><td>匹配下级元素</td></tr><tr><td><code>..</code></td><td><code>N/A</code></td><td>匹配上级元素，JsonPath 不支持此操作符</td></tr><tr><td><code>//</code></td><td><code>..</code></td><td>递归匹配所有子元素</td></tr><tr><td><code>*</code></td><td><code>*</code></td><td>通配符，匹配下级元素</td></tr><tr><td><code>@</code></td><td><code>N/A</code></td><td>匹配属性，JsonPath 不支持此操作符</td></tr><tr><td><code>[]</code></td><td><code>[]</code></td><td>下标运算符，根据索引获取元素，<strong>XPath 索引从 1 开始，JsonPath 索引从 0 开始</strong></td></tr><tr><td> `</td><td>`</td><td><code>[,]</code></td></tr><tr><td><code>N/A</code></td><td><code>[start:end:step]</code></td><td>数据切片操作，XPath 不支持</td></tr><tr><td><code>[]</code></td><td><code>?()</code></td><td>过滤表达式</td></tr><tr><td><code>N/A</code></td><td><code>()</code></td><td>脚本表达式，使用底层脚本引擎，XPath 不支持</td></tr><tr><td><code>()</code></td><td><code>N/A</code></td><td>分组，JsonPath 不支持</td></tr></tbody></table><h3 id="案例：jsonpath解析书店"><a href="#案例：jsonpath解析书店" class="headerlink" title="案例：jsonpath解析书店"></a>案例：jsonpath 解析书店</h3><p>json 文档：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"store"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"book"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"category"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"reference"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Nigel Rees"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"title"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Sayings of the Century"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"price"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8.95</span><br>      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"category"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"fiction"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Evelyn Waugh"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"title"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Sword of Honour"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"price"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12.99</span><br>      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"category"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"fiction"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Herman Melville"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"title"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Moby Dick"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"isbn"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0-553-21311-3"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"price"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8.99</span><br>      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"category"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"fiction"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"J. R. R. Tolkien"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"title"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"The Lord of the Rings"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"isbn"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0-395-19395-8"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"price"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22.99</span><br>      <span class="hljs-punctuation">}</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"bicycle"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"red"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"price"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">19.95</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>解析结果：</p><table><thead><tr><th>XPath</th><th>JsonPath</th><th>Result</th></tr></thead><tbody><tr><td><code>/store/book/author</code></td><td><code>$.store.book[*].author</code></td><td>所有 book 的 author 节点</td></tr><tr><td><code>//author</code></td><td><code>$..author</code></td><td>所有 author 节点</td></tr><tr><td><code>/store/*</code></td><td><code>$.store.*</code></td><td>store 下的所有节点，book 数组和 bicycle 节点</td></tr><tr><td><code>/store//price</code></td><td><code>$.store..price</code></td><td>store 下的所有 price 节点</td></tr><tr><td><code>//book[3]</code></td><td><code>$..book[2]</code></td><td>匹配第 3 个 book 节点</td></tr><tr><td><code>//book[last()]</code></td><td><code>$..book[(@.length-1)]</code>，或 <code>$..book[-1:]</code></td><td>匹配倒数第 1 个 book 节点</td></tr><tr><td><code>//book[position()&lt;3]</code></td><td><code>$..book[0,1]</code>，或 <code>$..book[:2]</code></td><td>匹配前两个 book 节点</td></tr><tr><td><code>//book[isbn]</code></td><td><code>$..book[?(@.isbn)]</code></td><td>过滤含 isbn 字段的节点</td></tr><tr><td><code>//book[price&lt;10]</code></td><td><code>$..book[?(@.price&lt;10)]</code></td><td>过滤 <code>price&lt;10</code> 的节点</td></tr><tr><td><code>//*</code></td><td><code>$..*</code></td><td>递归匹配所有子节点</td></tr></tbody></table><h3 id="案例：jsonpath解析淘票票城市"><a href="#案例：jsonpath解析淘票票城市" class="headerlink" title="案例：jsonpath解析淘票票城市"></a>案例：jsonpath 解析淘票票城市</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-keyword">import</span> jsonpath<br><br>url = <span class="hljs-string">'https://dianying.taobao.com/cityAction.json?activityId&amp;_ksTS=1660664202865_108&amp;jsoncallback=jsonp109&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true'</span><br><br>headers = {<br>    <span class="hljs-string">'accept'</span>: <span class="hljs-string">' text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01'</span>,<br>    <span class="hljs-string">'accept-language'</span>: <span class="hljs-string">' zh-CN,zh;q=0.9,en;q=0.8'</span>,<br>    <span class="hljs-string">'bx-v'</span>: <span class="hljs-string">' 2.2.2'</span>,<br>    <span class="hljs-string">'cookie'</span>: <span class="hljs-string">' t=a8237d7bd8b3656ea8aec5b43ed1cd2b; cookie2=1a50f8f7485b2b81047571e394163bdb; v=0; _tb_token_=be1ebe8b75e5; cna=RqNlG6se4VoCAXFlN34wp09x; xlly_s=1; tfstk=c7LGBADMUhS1LfRygF_soY_ftEnRZNVNUE-28fGpQRYkWt8FiirU4kEmt_pMko1..; l=eBPf7SMHLqeIcNP3BO5Bhurza779FQdbzPVzaNbMiInca6CRtFMY_NCHSSlkSdtjgt5ffeKPNKfZAdUMoW4_WAsWHpfuKtyuJbJeRe1..; isg=BP__h7U7oc3k4qXROIFYPvgMjtOJ5FOGlW4-cJHPP671oB0imLPn1FT-4nBe_Sv-'</span>,<br>    <span class="hljs-string">'referer'</span>: <span class="hljs-string">'https://dianying.taobao.com/'</span>,<br>    <span class="hljs-string">'sec-ch-ua-mobile'</span>: <span class="hljs-string">' ?0'</span>,<br>    <span class="hljs-string">'sec-fetch-dest'</span>: <span class="hljs-string">' empty'</span>,<br>    <span class="hljs-string">'sec-fetch-mode'</span>: <span class="hljs-string">' cors'</span>,<br>    <span class="hljs-string">'sec-fetch-site'</span>: <span class="hljs-string">' same-origin'</span>,<br>    <span class="hljs-string">'user-agent'</span>: <span class="hljs-string">' Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36'</span>,<br>    <span class="hljs-string">'x-requested-with'</span>: <span class="hljs-string">' XMLHttpRequest'</span>,<br>}<br><br>request = urllib.request.Request(url, headers=headers)<br>response = urllib.request.urlopen(request)<br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>).split(<span class="hljs-string">'('</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">')'</span>)[<span class="hljs-number">0</span>]<br>filepath = <span class="hljs-string">'./download/'</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>    os.makedirs(filepath)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'淘票票城市.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(content)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'淘票票城市.json'</span>, <span class="hljs-string">'r'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:<br>    obj = json.loads(f.read())<br>    city_list = jsonpath.jsonpath(obj, <span class="hljs-string">'$..regionName'</span>)<br>    <span class="hljs-built_in">print</span>(city_list)<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220817000416.png" alt="image-20220817000415916"></p><h2 id="BeautifulSoup解析"><a href="#BeautifulSoup解析" class="headerlink" title="BeautifulSoup解析"></a>BeautifulSoup 解析</h2><ol><li><p>基本简介</p><ul><li><p><a href="https://beautifulsoup.cn/">官方文档</a></p></li><li><p> BeautifulSoup 简称：<strong>bs4</strong></p></li><li><p>什么是 BeatifulSoup？</p><ul><li>BeautifulSoup，和 lxml 一样，是一个 html 的解析器，主要功能也是解析和提取数据</li></ul></li><li><p>优缺点</p><ul><li>缺点：效率没有 lxml 的效率高</li><li>优点：接口设计人性化，使用方便</li></ul></li></ul></li><li><p>安装及创建</p><ul><li>安装<ul><li><code>pip install bs4 -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li></ul></li><li>导入<ul><li><code>from bs4 import BeautifulSoup</code></li></ul></li><li>创建对象<ul><li>服务器响应的文件生成对象<ul><li><code>soup = BeautifulSoup(response.read().decode(), 'lxml')</code></li></ul></li><li>本地文件生成对象<ul><li><code>soup = BeautifulSoup(open('1.html'), 'lxml')</code></li><li>注意：默认打开文件的编码格式 gbk 所以需要指定打开编码格式</li></ul></li></ul></li></ul></li></ol><h3 id="案例：bs4基本使用"><a href="#案例：bs4基本使用" class="headerlink" title="案例：bs4基本使用"></a>案例：bs4 基本使用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># 通过解析本地文件 来将bs4的基础语法进行讲解</span><br><span class="hljs-comment"># 默认打开的文件的编码格式是gbk 所以在打开文件的时候需要指定编码</span><br>soup = BeautifulSoup(<span class="hljs-built_in">open</span>(<span class="hljs-string">"./download/bs4.html"</span>, encoding=<span class="hljs-string">'utf-8'</span>), <span class="hljs-string">'lxml'</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">60</span> + <span class="hljs-string">' 根据标签名查找节点 '</span> + <span class="hljs-string">'-'</span> * <span class="hljs-number">60</span>)<br><span class="hljs-comment"># 根据标签名查找节点</span><br><span class="hljs-comment"># 找到的是第一个符合条件的数据</span><br><span class="hljs-built_in">print</span>(soup.a)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">60</span> + <span class="hljs-string">' 获取标签的属性和属性值 '</span> + <span class="hljs-string">'-'</span> * <span class="hljs-number">60</span>)<br><span class="hljs-comment"># 获取标签的属性和属性值</span><br><span class="hljs-built_in">print</span>(soup.a.attrs)<br><br><span class="hljs-comment"># bs4的一些函数</span><br><span class="hljs-comment"># （1）find</span><br><span class="hljs-comment"># 返回的是第一个符合条件的数据</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">60</span> + <span class="hljs-string">' find '</span> + <span class="hljs-string">'-'</span> * <span class="hljs-number">60</span>)<br><span class="hljs-built_in">print</span>(soup.find(<span class="hljs-string">'a'</span>))<br><br><span class="hljs-comment"># 根据title的值来找到对应的标签对象</span><br><span class="hljs-built_in">print</span>(soup.find(<span class="hljs-string">'a'</span>, title=<span class="hljs-string">"a2"</span>))<br><br><span class="hljs-comment"># 根据class的值来找到对应的标签对象  注意的是class需要添加下划线</span><br><span class="hljs-built_in">print</span>(soup.find(<span class="hljs-string">'a'</span>, class_=<span class="hljs-string">"a1"</span>))<br><br><span class="hljs-comment"># （2）find_all  返回的是一个列表 并且返回了所有的a标签</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">60</span> + <span class="hljs-string">' find_all '</span> + <span class="hljs-string">'-'</span> * <span class="hljs-number">60</span>)<br><span class="hljs-built_in">print</span>(soup.find_all(<span class="hljs-string">'a'</span>))<br><br><span class="hljs-comment"># 如果想获取的是多个标签的数据 那么需要在find_all的参数中添加的是列表的数据</span><br><span class="hljs-built_in">print</span>(soup.find_all([<span class="hljs-string">'a'</span>, <span class="hljs-string">'span'</span>]))<br><br><span class="hljs-comment"># limit的作用是查找前几个数据</span><br><span class="hljs-built_in">print</span>(soup.find_all(<span class="hljs-string">'li'</span>, limit=<span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># （3）select（推荐）</span><br><span class="hljs-comment"># select方法返回的是一个列表  并且会返回多个数据</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">60</span> + <span class="hljs-string">' select '</span> + <span class="hljs-string">'-'</span> * <span class="hljs-number">60</span>)<br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">'a'</span>))<br><br><span class="hljs-comment"># 可以通过.代表class  我们把这种操作叫做类选择器</span><br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">'.a1'</span>))<br><br><span class="hljs-comment"># 可以通过#代表id 我们把这种操作叫做id选择器</span><br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">'#l1'</span>))<br><br><span class="hljs-comment"># 属性选择器---通过属性来寻找对应的标签</span><br><span class="hljs-comment"># 查找到li标签中有id的标签</span><br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">'li[id]'</span>))<br><br><span class="hljs-comment"># 查找到li标签中id为l2的标签</span><br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">'li[id="l2"]'</span>))<br><br><span class="hljs-comment"># 层级选择器</span><br><span class="hljs-comment"># 后代选择器</span><br><span class="hljs-comment"># 找到的是div下面的li</span><br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">'div li'</span>))<br><br><span class="hljs-comment"># 子代选择器</span><br><span class="hljs-comment"># 某标签的第一级子标签</span><br><span class="hljs-comment"># 注意：很多的计算机编程语言中 如果不加空格不会输出内容  但是在bs4中 不会报错 会显示内容</span><br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">'div &gt; ul &gt; li'</span>))<br><br><span class="hljs-comment"># 找到a标签和li标签的所有的对象</span><br><span class="hljs-built_in">print</span>(soup.select(<span class="hljs-string">'a,li'</span>))<br><br><span class="hljs-comment"># 节点信息</span><br><span class="hljs-comment"># 获取节点内容</span><br>obj = soup.select(<span class="hljs-string">'#d1'</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 如果标签对象中 只有内容 那么string和get_text()都可以使用</span><br><span class="hljs-comment"># 如果标签对象中 除了内容还有标签 那么string就获取不到数据 而get_text()是可以获取数据</span><br><span class="hljs-comment"># 我们一般情况下  推荐使用get_text()</span><br><span class="hljs-built_in">print</span>(obj.string)<br><span class="hljs-built_in">print</span>(obj.get_text())<br><br><span class="hljs-comment"># 节点的属性</span><br>obj = soup.select(<span class="hljs-string">'#p1'</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># name是标签的名字</span><br><span class="hljs-built_in">print</span>(obj.name)<br><span class="hljs-comment"># 将属性值左右一个字典返回</span><br><span class="hljs-built_in">print</span>(obj.attrs)<br><br><span class="hljs-comment"># 获取节点的属性</span><br>obj = soup.select(<span class="hljs-string">'#p1'</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(obj.attrs.get(<span class="hljs-string">'class'</span>))<br><span class="hljs-built_in">print</span>(obj.get(<span class="hljs-string">'class'</span>))<br><span class="hljs-built_in">print</span>(obj[<span class="hljs-string">'class'</span>])<br></code></pre></td></tr></tbody></table></figure><p>html 页面：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"l1"</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"l2"</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a1"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.baidu.com"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"a1"</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a2"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.taobao.com"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"a2"</span>&gt;</span>淘宝<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p1"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"p1"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"d1"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220817010423.png" alt="image-20220817010422922"></p><h3 id="案例：bs4爬取星巴克菜单"><a href="#案例：bs4爬取星巴克菜单" class="headerlink" title="案例：bs4爬取星巴克菜单"></a>案例：bs4 爬取星巴克菜单</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>url = <span class="hljs-string">'https://www.starbucks.com.cn/menu/'</span><br><br>response = urllib.request.urlopen(url)<br><br>content = response.read().decode(<span class="hljs-string">'utf-8'</span>)<br><br>soup = BeautifulSoup(content, <span class="hljs-string">'lxml'</span>)<br><br><span class="hljs-comment"># //ul[@class="grid padded-3 product"]//strong/text()</span><br><span class="hljs-comment"># name_list = soup.select('ul[class="grid padded-3 product"] strong')</span><br>name_list = soup.select(<span class="hljs-string">'.grid.padded-3.product strong'</span>)<br><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> name_list:<br>    <span class="hljs-built_in">print</span>(name.get_text())<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220817011240.png" alt="image-20220817011240686"></p><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Selenium 是一个<strong>用于 Web 应用程序测试</strong>的工具。</li><li>Selenium 测试<strong>直接运行在浏览器中</strong>，就像真正的用户在操作一样。</li><li>支持通过各种 <strong>driver</strong>（FirfoxDriver，IternetExplorerDriver，OperaDriver，ChromeDriver）驱动<strong>真实浏览器</strong>完成测试。</li><li>selenium 也是<strong>支持无界面浏览器</strong>操作的。</li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>模拟浏览器功能，自动执行网页中的 js 代码，实现动态加载。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Selenium：<code>pip install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p>驱动下载 **(一定注意与浏览器版本对应)**：</p><ul><li>Chrome 浏览器驱动：<a href="https://sites.google.com/a/chromium.org/chromedriver/home">chromedriver</a> , <a href="http://chromedriver.storage.googleapis.com/index.html">备用地址</a></li><li> Firefox 浏览器驱动：<a href="https://github.com/mozilla/geckodriver/releases">geckodriver</a></li><li>Edge 浏览器驱动：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver">MicrosoftWebDriver</a></li><li>IE 浏览器驱动：<a href="http://selenium-release.storage.googleapis.com/index.html">IEDriverServer</a></li><li>Opera 浏览器驱动：<a href="https://github.com/operasoftware/operachromiumdriver/releases">operadriver</a></li><li>PhantomJS 浏览器驱动：<a href="http://phantomjs.org/">phantomjs</a></li></ul><h2 id="Driver-真实浏览器"><a href="#Driver-真实浏览器" class="headerlink" title="Driver+真实浏览器"></a>Driver + 真实浏览器</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>下载驱动并解压，这里使用 chrome。</p></li><li><p>导入：<code>from selenium import webdriver</code></p></li><li><p>创建谷歌浏览器操作对象：</p><ul><li><p>如果把 chromedriver.exe 放在 其他目录下，需要使用路径</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pyt">path = './res/chromedriver.exe'<br>browser = webdriver.Chrome(service=Service(path))<br></code></pre></td></tr></tbody></table></figure></li><li><p>如果把 chromedriver.exe 放在 脚本文件执行目录下</p><p><code>browser = webdriver.Chrome()</code></p></li></ul></li><li><p>访问网址</p><ul><li><code>url = ‘要访问的网址’ browser.get (url)</code></li></ul></li></ol><h3 id="案例：获取京东带有秒杀板块的源码"><a href="#案例：获取京东带有秒杀板块的源码" class="headerlink" title="案例：获取京东带有秒杀板块的源码"></a>案例：获取京东带有秒杀板块的源码</h3><p>在之前的方法中获取到的京东首页源码，会被反爬机制认定不是真实浏览器，从而失去秒杀板块的源码。</p><p>我们使用 selenium 可以避免出现这种情况</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># （1）导入selenium</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><br><span class="hljs-comment"># (2) 创建浏览器操作对象</span><br><span class="hljs-comment"># 如果把 chromedriver.exe 放在 其他目录下，需要使用路径</span><br>path = <span class="hljs-string">'./res/chromedriver.exe'</span><br>browser = webdriver.Chrome(service=Service(path))<br><span class="hljs-comment"># 如果把 chromedriver.exe 放在 脚本文件执行目录下</span><br><span class="hljs-comment"># browser = webdriver.Chrome()</span><br><br><span class="hljs-comment"># （3）访问网站</span><br>url = <span class="hljs-string">'https://www.jd.com/'</span><br>browser.get(url)<br><br><span class="hljs-comment"># page_source获取网页源码</span><br>content = browser.page_source<br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></tbody></table></figure><h3 id="案例：元素定位"><a href="#案例：元素定位" class="headerlink" title="案例：元素定位"></a>案例：元素定位</h3><p>使用 selenium 定位页面元素</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br><span class="hljs-comment"># 如果把 chromedriver.exe 放在 其他目录下，需要使用路径</span><br>path = <span class="hljs-string">'./res/chromedriver.exe'</span><br>browser = webdriver.Chrome(service=Service(path))<br><span class="hljs-comment"># 如果把 chromedriver.exe 放在 脚本文件执行目录下</span><br><span class="hljs-comment"># browser = webdriver.Chrome()</span><br><br>url = <span class="hljs-string">'https://www.baidu.com'</span><br>browser.get(url)<br><br><span class="hljs-comment"># 元素定位</span><br><br><span class="hljs-comment"># 根据id来找到对象</span><br>button = browser.find_element(By.ID, <span class="hljs-string">'su'</span>)<br><span class="hljs-built_in">print</span>(button)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">120</span>)<br><br><span class="hljs-comment"># 根据标签属性的属性值来获取对象的</span><br>button = browser.find_element(By.NAME, <span class="hljs-string">'wd'</span>)<br><span class="hljs-built_in">print</span>(button)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">120</span>)<br><br><span class="hljs-comment"># 根据xpath语句来获取对象</span><br>button = browser.find_elements(By.XPATH, <span class="hljs-string">'//input[@id="su"]'</span>)<br><span class="hljs-built_in">print</span>(button)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">120</span>)<br><br><span class="hljs-comment"># 根据标签的名字来获取对象</span><br>button = browser.find_elements(By.TAG_NAME, <span class="hljs-string">'input'</span>)<br><span class="hljs-built_in">print</span>(button)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">120</span>)<br><br><span class="hljs-comment"># 使用的bs4的语法来获取对象</span><br>button = browser.find_elements(By.CSS_SELECTOR, <span class="hljs-string">'#su'</span>)<br><span class="hljs-built_in">print</span>(button)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">120</span>)<br><br>button = browser.find_element(By.LINK_TEXT, <span class="hljs-string">'直播'</span>)<br><span class="hljs-built_in">print</span>(button)<br></code></pre></td></tr></tbody></table></figure><h3 id="案例：访问元素信息"><a href="#案例：访问元素信息" class="headerlink" title="案例：访问元素信息"></a>案例：访问元素信息</h3><p>使用 selenium 自动化执行浏览器操作</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br><span class="hljs-comment"># 如果把 chromedriver.exe 放在 其他目录下，需要使用路径</span><br>path = <span class="hljs-string">'./res/chromedriver.exe'</span><br>browser = webdriver.Chrome(service=Service(path))<br><span class="hljs-comment"># 如果把 chromedriver.exe 放在 脚本文件执行目录下</span><br><span class="hljs-comment"># browser = webdriver.Chrome()</span><br><br><span class="hljs-comment"># url</span><br>url = <span class="hljs-string">'https://www.baidu.com'</span><br>browser.get(url)<br><br><span class="hljs-keyword">import</span> time<br><br>time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 获取文本框的对象</span><br><span class="hljs-built_in">input</span> = browser.find_element(By.ID, <span class="hljs-string">'kw'</span>)<br><br><span class="hljs-comment"># 在文本框中输入周杰伦</span><br><span class="hljs-built_in">input</span>.send_keys(<span class="hljs-string">'周杰伦'</span>)<br><br>time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 获取百度一下的按钮</span><br>button = browser.find_element(By.ID, <span class="hljs-string">'su'</span>)<br><br><span class="hljs-comment"># 点击按钮</span><br>button.click()<br><br>time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 滑到底部</span><br>js_bottom = <span class="hljs-string">'document.documentElement.scrollTop=100000'</span><br>browser.execute_script(js_bottom)<br><br>time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 获取下一页的按钮</span><br><span class="hljs-built_in">next</span> = browser.find_element(By.XPATH, <span class="hljs-string">'//a[@class="n"]'</span>)<br><br><span class="hljs-comment"># 点击下一页</span><br><span class="hljs-built_in">next</span>.click()<br><br>time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 回到上一页</span><br>browser.back()<br><br>time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 回去</span><br>browser.forward()<br><br>time.sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 退出</span><br>browser.quit()<br></code></pre></td></tr></tbody></table></figure><h2 id="Driver-Phantomjs"><a href="#Driver-Phantomjs" class="headerlink" title="Driver+Phantomjs"></a>Driver+Phantomjs</h2><h4 id="什么是-Phantomjs"><a href="#什么是-Phantomjs" class="headerlink" title="什么是 Phantomjs"></a>什么是 Phantomjs</h4><ul><li><p>是一个无界面的浏览器</p></li><li><p>支持页面元素查找，js 的执行等</p></li><li><p>由于不进行 css 和 gui 渲染，运行效率要比真实的浏览器要快很多</p></li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ol><li><strong>PhantomJS 要求的 selenium 版本较低，需要使用 2.48.0 版本</strong></li><li>获取 PhantomJS.exe 文件路径 path</li><li><code>browser = webdriver.PhantomJS(service=Service(path))</code></li><li>``browser.get (url)` </li><li>扩展：保存屏幕快照：<code>browser.save_screenshot ('baidu.png')</code></li></ol><h4 id="案例：使用selenium操作PhantomJS（未实践）"><a href="#案例：使用selenium操作PhantomJS（未实践）" class="headerlink" title="案例：使用selenium操作PhantomJS（未实践）"></a>案例：使用 selenium 操作 PhantomJS（未实践）</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br> <br>path = <span class="hljs-string">'phantomjs.exe'</span><br> <br>browser = webdriver.PhantomJS(path)<br> <br> <br>url = <span class="hljs-string">'https://www.baidu.com'</span><br>browser.get(url)<br> <br>browser.save_screenshot(<span class="hljs-string">'baidu.png'</span>)<br> <br><span class="hljs-keyword">import</span> time<br>time.sleep(<span class="hljs-number">2</span>)<br> <br><span class="hljs-built_in">input</span> = browser.find_element_by_id(<span class="hljs-string">'kw'</span>)<br><span class="hljs-built_in">input</span>.send_keys(<span class="hljs-string">'陈奕迅'</span>)<br> <br>time.sleep(<span class="hljs-number">3</span>)<br> <br>browser.save_screenshot(<span class="hljs-string">'陈奕迅.png'</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="Driver-Chrome-headless"><a href="#Driver-Chrome-headless" class="headerlink" title="Driver+Chrome headless"></a>Driver+Chrome headless</h2><p>Chrome-headless 模式， Google 针对 Chrome 浏览器 <strong>59 版</strong> 新增加的一种模式，可以让你不打开 UI 界面的情况下 使用 Chrome 浏览器，所以运行效果与 Chrome 保持完美一致。</p><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li>Unix/Linux 系统：系统需要 chrome &gt;= 59</li><li>Windows 系统：系统需要 chrome &gt;= 60</li><li>Python 3.6 以上</li><li> Selenium 3.4 以上</li><li> ChromeDriver 2.31 以上</li></ul><h3 id="案例：使用无头模式获取截图"><a href="#案例：使用无头模式获取截图" class="headerlink" title="案例：使用无头模式获取截图"></a>案例：使用无头模式获取截图</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_chrome_headless_browser</span>():<br>    chrome_option = Options()<br>    chrome_option.add_argument(<span class="hljs-string">'--headless'</span>)<br>    chrome_option.add_argument(<span class="hljs-string">'--disable-gpu'</span>)<br>    <span class="hljs-keyword">return</span> webdriver.Chrome(options=chrome_option)<br><br><br>browser = create_chrome_headless_browser()<br>url = <span class="hljs-string">'https://www.baidu.com'</span><br>browser.get(url)<br>browser.save_screenshot(<span class="hljs-string">"./download/百度.png"</span>)<br>browser.quit()<br></code></pre></td></tr></tbody></table></figure><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><a href="https://requests.readthedocs.io/projects/cn/zh_CN/latest/">官方文档</a></p><p><a href="https://requests.readthedocs.io/projects/cn/zh_CN/latest/user/quickstart.html">快速上手</a></p><p><a href="https://github.com/psf/requests">Github 链接</a></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p><code>pip install requests -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>一个类型和六个属性</p><ul><li>一个类型：<ul><li>Response 类型</li></ul></li><li>六个属性：<ul><li><code>r.text</code> : 获取网站源码</li><li><code>r.encoding</code> ：访问或定制编码方式（<code>r.encoding=r.apparent_encoding (自适应编码 / 万能编码)</code>）</li><li><code>r.url</code> ：获取请求的 url</li><li><code>r.content</code> ：响应的字节类型</li><li><code>r.status_code</code> ：响应的状态码</li><li><code>r.headers</code> ：响应的头信息</li></ul></li></ul><h2 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get 请求</h3><ul><li>参数<strong>使用 params 传递</strong></li><li>参数<strong>无需 urlencode 编码</strong></li><li>不需要请求对象的定制</li><li>请求资源路径中的？可以加也可以不加</li></ul><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">'https://www.baidu.com/s'</span><br><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 '</span><br>                  <span class="hljs-string">'Safari/537.36'</span>,<br>    <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'xxx'</span><br>}<br><br>data = {<br>    <span class="hljs-string">'wd'</span>: <span class="hljs-string">'北京'</span><br>}<br><br><span class="hljs-comment"># url  请求资源路径</span><br><span class="hljs-comment"># params 参数</span><br><span class="hljs-comment"># kwargs 字典</span><br>response = requests.get(url=url, params=data, headers=headers)<br>response.encoding = <span class="hljs-string">'utf-8'</span><br>content = response.text<br><br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></tbody></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post 请求</h3><ul><li>post 请求是<strong>不需要编解码</strong></li><li> post 请求的<strong>参数是 data</strong></li><li> 不需要请求对象的定制</li></ul><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">'https://fanyi.baidu.com/sug'</span><br><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br>data = {<br>    <span class="hljs-string">'kw'</span>: <span class="hljs-string">'reptile'</span><br>}<br><br><span class="hljs-comment"># url 请求地址</span><br><span class="hljs-comment"># data 请求参数</span><br><span class="hljs-comment"># kwargs 字典</span><br>response = requests.post(url=url, data=data, headers=headers)<br><br>content = response.text<br><br>obj = json.loads(content)<br><span class="hljs-built_in">print</span>(obj)<br></code></pre></td></tr></tbody></table></figure><h2 id="代理-1"><a href="#代理-1" class="headerlink" title="代理"></a>代理</h2><p>在 Python3.7 及以上版本，必须要在 <code>ip:port</code> 前面加上 <code>http://</code> 或者 <code>https://</code>，绝对不能去掉前面的 <code>http://</code> 或者 <code>https://</code>，即 Python3.7 后必须使用 <code>proxies={‘http’: ‘http://127.0.0.1:8080’}</code> 或者 <code>proxies={‘https’: ‘https://127.0.0.1:8080’}</code></p><h3 id="案例：使用requests代理"><a href="#案例：使用requests代理" class="headerlink" title="案例：使用requests代理"></a>案例：使用 requests 代理</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">'http://www.baidu.com/s?'</span><br><br>headers = {<br>    <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'xxx'</span>,<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span>,<br>}<br><br>data = {<br>    <span class="hljs-string">'wd'</span>: <span class="hljs-string">'ip'</span><br>}<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_proxy</span>():<br>    proxy = requests.get(<span class="hljs-string">"http://demo.spiderpy.cn/get/"</span>).json().get(<span class="hljs-string">"proxy"</span>)<br>    <span class="hljs-keyword">return</span> {<span class="hljs-string">'http'</span>: <span class="hljs-string">'http://'</span> + proxy}<br><br><br>proxy = get_proxy()<br><span class="hljs-built_in">print</span>(proxy)<br>response = requests.get(url=url, params=data, headers=headers, proxies=proxy)<br><br>content = response.text<br><br><span class="hljs-comment"># 保存</span><br>filepath = <span class="hljs-string">'./download/'</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>    os.makedirs(filepath)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'proxy.html'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(content)<br></code></pre></td></tr></tbody></table></figure><h2 id="处理验证码"><a href="#处理验证码" class="headerlink" title="处理验证码"></a>处理验证码</h2><ul><li>使用付费平台<a href="https://www.chaojiying.com/">超级鹰</a></li><li>开源项目 <a href="https://github.com/sml2h3/ddddocr">ddddocr</a>：<code>pip install ddddocr -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li></ul><h2 id="案例：登录古诗文网"><a href="#案例：登录古诗文网" class="headerlink" title="案例：登录古诗文网"></a>案例：登录古诗文网</h2><p><strong>本案例使用 ddddocr 处理验证码</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过登陆  然后进入到主页面</span><br><br><span class="hljs-comment"># 登录接口的参数</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># __VIEWSTATE: zqFkqiv+3ngBlBzmivZAdDumPi21G++2sOyB9IEEh6fdP620JtV5fRCeFk2oZjs7oL/nVneHKqG6GzJNAeDBNVOhTCVvk7Se5y3ahb8/m+eAyaOX2HCLv+bwmq4IN8ANi0N+Rwkzk5DDr2czD9C//EJmqSY=</span><br><span class="hljs-comment"># __VIEWSTATEGENERATOR: C93BE1AE</span><br><span class="hljs-comment"># from: http://so.gushiwen.cn/user/collect.aspx</span><br><span class="hljs-comment"># email: 18925681157</span><br><span class="hljs-comment"># pwd: test12</span><br><span class="hljs-comment"># code: iymh</span><br><span class="hljs-comment"># denglu: 登录</span><br><br><br><span class="hljs-comment"># 我们观察到__VIEWSTATE   __VIEWSTATEGENERATOR  code是一个可以变化的量</span><br><br><span class="hljs-comment"># 难点:(1)__VIEWSTATE   __VIEWSTATEGENERATOR  一般情况看不到的数据 都是在页面的源码中</span><br><span class="hljs-comment">#     我们观察到这两个数据在页面的源码中 所以我们需要获取页面的源码 然后进行解析就可以获取了</span><br><span class="hljs-comment">#     (2)验证码</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> ddddocr<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># 登录页面的url</span><br>url = <span class="hljs-string">'https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx'</span><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><br>}<br><br>response = requests.get(url=url, headers=headers)<br>content = response.text<br><br><span class="hljs-comment"># 解析页面源码  然后获取__VIEWSTATE   __VIEWSTATEGENERATOR</span><br>soup = BeautifulSoup(content, <span class="hljs-string">'lxml'</span>)<br>__VIEWSTATE = soup.select(<span class="hljs-string">'#__VIEWSTATE'</span>)[<span class="hljs-number">0</span>].attrs.get(<span class="hljs-string">'value'</span>)<br>__VIEWSTATEGENERATOR = soup.select(<span class="hljs-string">'#__VIEWSTATEGENERATOR'</span>)[<span class="hljs-number">0</span>].attrs.get(<span class="hljs-string">'value'</span>)<br><br>email = <span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入账号：'</span>)<br>pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入密码：'</span>)<br><span class="hljs-comment"># 获取验证码图片的url</span><br>code_url = <span class="hljs-string">'https://so.gushiwen.cn'</span> + soup.select(<span class="hljs-string">'#imgCode'</span>)[<span class="hljs-number">0</span>].attrs.get(<span class="hljs-string">'src'</span>)<br><span class="hljs-comment"># 获取了验证码的图片之后 下载到本地 然后观察验证码  观察之后 然后在控制台输入这个验证码 就可以将这个值给code的参数 就可以登陆</span><br><span class="hljs-comment"># 此处不能使用 urllib 等获取验证码的图片，原因是使用其会导致请求的两次验证码，获取的验证码不是登录时的验证码</span><br><span class="hljs-comment"># 应使用 session 对象里的验证码url</span><br><span class="hljs-comment"># 使用 .content 是因为图片需要用二进制打开</span><br>session = requests.session()<br>code_content = session.get(code_url).content<br>filepath = <span class="hljs-string">'./download/'</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(filepath):<br>    os.makedirs(filepath)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'code.jpg'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(code_content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">magic_ocr</span>(<span class="hljs-params">img_path</span>):<br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    ocr 识别</span><br><span class="hljs-string">    :param img_path: 验证码图片路径</span><br><span class="hljs-string">    :return: </span><br><span class="hljs-string">    """</span><br>    ocr = ddddocr.DdddOcr()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(img_path, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> f:<br>        img_bytes = f.read()<br>    <span class="hljs-keyword">return</span> ocr.classification(img_bytes)<br><br><br>code = magic_ocr(filepath + <span class="hljs-string">'code.jpg'</span>)<br><span class="hljs-built_in">print</span>(code)<br><br><span class="hljs-comment"># 点击登陆</span><br>url_post = <span class="hljs-string">'https://so.gushiwen.cn/user/login.aspx?from=http%3a%2f%2fso.gushiwen.cn%2fuser%2fcollect.aspx'</span><br><br>data_post = {<br>    <span class="hljs-string">'__VIEWSTATE'</span>: __VIEWSTATE,<br>    <span class="hljs-string">'__VIEWSTATEGENERATOR'</span>: __VIEWSTATEGENERATOR,<br>    <span class="hljs-string">'from'</span>: <span class="hljs-string">'http://so.gushiwen.cn/user/collect.aspx'</span>,<br>    <span class="hljs-string">'email'</span>: email,<br>    <span class="hljs-string">'pwd'</span>: pwd,<br>    <span class="hljs-string">'code'</span>: code,<br>    <span class="hljs-string">'denglu'</span>: <span class="hljs-string">'登录'</span>,<br>}<br><br><span class="hljs-comment"># 使用 session 对象登录</span><br>response_post = session.post(url=url, headers=headers, data=data_post)<br><br>content_post = response_post.text<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath + <span class="hljs-string">'古诗文网.html'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(content_post)<br><br><span class="hljs-comment"># 难点</span><br><span class="hljs-comment"># （1） 隐藏域</span><br><span class="hljs-comment"># （2） 验证码</span><br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220818205428.png" alt="image-20220818103916720"></p><h1 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h1><h2 id="Scrapy概念和工作流程"><a href="#Scrapy概念和工作流程" class="headerlink" title="Scrapy概念和工作流程"></a>Scrapy 概念和工作流程</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>scray 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p><code>pip install Scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><h3 id="Scrapy-工作原理"><a href="#Scrapy-工作原理" class="headerlink" title="Scrapy 工作原理"></a>Scrapy 工作原理</h3><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220819224546.png" alt="20220819120154.png"></p><h3 id="Scrapy内置对象"><a href="#Scrapy内置对象" class="headerlink" title="Scrapy内置对象"></a>Scrapy 内置对象</h3><ul><li>request 请求对象：由 <code>url method post_data headers</code> 等构成</li><li> response 响应对象：由 <code>url body status headers</code> 等构成</li><li> item 数据对象：本质是个<strong>字典</strong></li></ul><h3 id="Scrapy各模块功能"><a href="#Scrapy各模块功能" class="headerlink" title="Scrapy各模块功能"></a>Scrapy 各模块功能</h3><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220819224913.png" alt="20220819224913.png"></p><p><strong>注意：</strong>爬虫中间件和下载中间件只是运行逻辑的位置不同，作用是重复的：如替换 UA 等</p><h2 id="Scrapy入门使用"><a href="#Scrapy入门使用" class="headerlink" title="Scrapy入门使用"></a>Scrapy 入门使用</h2><ol><li><p>创建爬虫项目</p><p>在需要创建项目的目录，使用终端执行：<code>scrapy startproject 项目名字</code>，项目的名字<strong>不允许出现数字开头，也不能包含中文</strong>。</p></li><li><p>创建爬虫文件</p><p>需要在 spiders 文件夹中去创建爬虫文件。</p><p>进入 spiders 目录：<code>cd 项目名字/项目名字/spiders</code></p><p>创建爬虫文件：<code>scrapy genspider 爬虫文件名字 需要爬取的网页</code> (一般情况下不在网页前面加 <code>http/https</code>)</p><p>eg：<code>scrapy genspider baidu www.baidu.com</code></p></li><li><p>注释掉 <code>settings.py</code> 文件里的：<code>ROBOTSTXT_OBEY = True</code></p></li><li><p>运行爬虫文件</p><p><code>scrapy crawl 爬虫的名字</code></p><p>eg：<code>scrapy crawl baidu</code></p></li><li><p>提取数据<br>根据网站结构在 spider 中实现数据采集相关内容</p></li><li><p>保存数据<br>使用 pipeline 进行数据后续处理和保存</p></li></ol><h3 id="Scrapy文件目录"><a href="#Scrapy文件目录" class="headerlink" title="Scrapy文件目录"></a>Scrapy 文件目录</h3><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220819234618.png" alt="20220819234618.png"></p><h3 id="response-的属性和方法"><a href="#response-的属性和方法" class="headerlink" title="response 的属性和方法"></a>response 的属性和方法</h3><ul><li><code>response.text</code> 获取的是响应的字符串</li><li><code>response.body</code> 获取的是二进制数据</li><li><code>response.xpath</code> 可以直接是 xpath 方法来解析 response 中的内容</li><li><code>response.extract()</code> 返回一个列表，提取 seletor 对象的 data 属性值</li><li><code>response.extract_first()</code> 返回一个字符串，提取的 seletor 列表的第一个数据</li></ul><h3 id="案例：当当网"><a href="#案例：当当网" class="headerlink" title="案例：当当网"></a>案例：当当网</h3><p>我们需要爬取当当网的书本图片链接，名字以及价格</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220819142219.png" alt="20220819142219.png"></p><ol><li><p>定义数据结构为：要保存的 json 数据的对象</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define here the models for your scraped items</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See documentation in:</span><br><span class="hljs-comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><br><br><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScrapyDemo04DangdangItem</span>(scrapy.Item):<br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br><br>    <span class="hljs-comment"># 图片</span><br>    img_src = scrapy.Field()<br>    <span class="hljs-comment"># 名字</span><br>    name = scrapy.Field()<br>    <span class="hljs-comment"># 价格</span><br>    price = scrapy.Field()<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写爬虫</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-keyword">from</span> scrapy_demo04_dangdang.items <span class="hljs-keyword">import</span> ScrapyDemo04DangdangItem<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DangdangSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">'dangdang'</span><br>    allowed_domains = [<span class="hljs-string">'category.dangdang.com/cp01.47.93.00.00.00.html'</span>]<br>    start_urls = [<span class="hljs-string">'http://category.dangdang.com/cp01.47.93.00.00.00.html'</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-comment"># pipelines 下载数据</span><br>        <span class="hljs-comment"># items    定义数据结构</span><br>        <span class="hljs-comment"># img_src = '//ul[@id="component_59"]/li//img/@data-original'</span><br>        <span class="hljs-comment"># name = '//ul[@id="component_59"]/li//img/@alt'</span><br>        <span class="hljs-comment"># price = '//ul[@id="component_59"]/li//p[@class="price"]/span[1]/text()'</span><br>        <span class="hljs-comment"># 所有的seletor对象都可以再次调用 xpath 方法</span><br>        li_list = response.xpath(<span class="hljs-string">'//ul[@id="component_59"]/li'</span>)<br>        <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_list:<br>            <span class="hljs-comment"># 第一张图片和其他的路径不一样，其他图片为懒加载</span><br>            img_src = li.xpath(<span class="hljs-string">'.//img/@data-original'</span>).extract_first()<br>            <span class="hljs-keyword">if</span> img_src:<br>                img_src = img_src<br>            <span class="hljs-keyword">else</span>:<br>                img_src = li.xpath(<span class="hljs-string">'.//img/@src'</span>).extract_first()<br>            name = li.xpath(<span class="hljs-string">'.//img/@alt'</span>).extract_first()<br>            price = li.xpath(<span class="hljs-string">'.//p[@class="price"]/span[1]/text()'</span>).extract_first()<br>            book = ScrapyDemo04DangdangItem(img_src=img_src, name=name, price=price)<br>            <span class="hljs-comment"># 获取一个book就将book返回给 pipelines</span><br>            <span class="hljs-keyword">yield</span> book<br></code></pre></td></tr></tbody></table></figure></li><li><p>重写写管道 pipeline</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define your item pipelines here</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class="hljs-comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><br><br><br><span class="hljs-comment"># useful for handling different item types with a single interface</span><br><br><span class="hljs-comment"># 如果想使用管道就要在 setting 中开启管道</span><br><span class="hljs-keyword">from</span> scrapy <span class="hljs-keyword">import</span> Request<br><span class="hljs-keyword">from</span> scrapy.exceptions <span class="hljs-keyword">import</span> DropItem<br><span class="hljs-keyword">from</span> scrapy.pipelines.images <span class="hljs-keyword">import</span> ImagesPipeline<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScrapyDemo04DangdangPipeline</span>():<br>    <span class="hljs-comment"># 在爬虫文件开始前就执行</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open_spider</span>(<span class="hljs-params">self, spider</span>):<br>        self.f = <span class="hljs-built_in">open</span>(<span class="hljs-string">'book.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>)<br><br>    <span class="hljs-comment"># item 就是 yeild 后的 book 对象</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        self.f.write(<span class="hljs-built_in">str</span>(item))<br>        <span class="hljs-keyword">return</span> item<br><br>    <span class="hljs-comment"># 在爬虫文件结束后才执行</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close_spider</span>(<span class="hljs-params">self, spider</span>):<br>        self.f.close()<br></code></pre></td></tr></tbody></table></figure></li><li><p>在 settings 中开启管道</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ITEM_PIPELINES = {<br>    <span class="hljs-comment">#  管道是由很多个的，管道具有优先级，优先级范围为 1-1000 ，值越小优先级越高</span><br>    <span class="hljs-string">'scrapy_demo04_dangdang.pipelines.ScrapyDemo04DangdangPipeline'</span>: <span class="hljs-number">300</span>,<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>运行 scrapy</p><p><code>scrapy crawl dangdang</code></p></li></ol><h2 id="Scrapy请求"><a href="#Scrapy请求" class="headerlink" title="Scrapy请求"></a>Scrapy 请求</h2><h3 id="翻页请求的思路"><a href="#翻页请求的思路" class="headerlink" title="翻页请求的思路"></a>翻页请求的思路</h3><p>对于下图所示的所有页面的数据该如何提取？</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220820012958.png" alt="image-20220820012958392"></p><p>回顾 requests 模块是如何实现翻页请求的：</p><ol><li>找到下一页的 URL 地址</li><li>调用 requests.get (url)</li></ol><p>scrapy 实现翻页的思路：</p><ol><li>找到下一页的 url 地址</li><li>构造 url 地址的请求对象，传递给引擎</li></ol><h3 id="构造Request对象发送请求"><a href="#构造Request对象发送请求" class="headerlink" title="构造Request对象发送请求"></a>构造 Request 对象发送请求</h3><h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><ol><li>确定 url 地址</li><li>构造请求 <code>scrapy.Request(url,callback)</code><ul><li>callback：指定解析函数名称，表示该请求返回的响应使用哪一个函数进行解析</li></ul></li><li>把请求交给引擎：<code>yield scrapy.Request(url,callback)</code></li></ol><h4 id="模拟翻页"><a href="#模拟翻页" class="headerlink" title="模拟翻页"></a>模拟翻页</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-keyword">from</span> scrapy_demo04_dangdang.items <span class="hljs-keyword">import</span> ScrapyDemo04DangdangItem<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DangdangSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">'dangdang'</span><br>    allowed_domains = [<span class="hljs-string">'category.dangdang.com'</span>]<br>    start_urls = [<span class="hljs-string">'http://category.dangdang.com/cp01.47.93.00.00.00.html'</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-comment"># pipelines 下载数据</span><br>        <span class="hljs-comment"># items    定义数据结构</span><br>        <span class="hljs-comment"># img_src = '//ul[@id="component_59"]/li//img/@data-original'</span><br>        <span class="hljs-comment"># name = '//ul[@id="component_59"]/li//img/@alt'</span><br>        <span class="hljs-comment"># price = '//ul[@id="component_59"]/li//p[@class="price"]/span[1]/text()'</span><br>        <span class="hljs-comment"># 所有的seletor对象都可以再次调用 xpath 方法</span><br>        li_list = response.xpath(<span class="hljs-string">'//ul[@id="component_59"]/li'</span>)<br>        <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_list:<br>            <span class="hljs-comment"># 第一张图片和其他的路径不一样，其他图片为懒加载</span><br>            img_src = li.xpath(<span class="hljs-string">'.//img/@data-original'</span>).extract_first()<br>            <span class="hljs-keyword">if</span> img_src:<br>                img_src = img_src<br>            <span class="hljs-keyword">else</span>:<br>                img_src = li.xpath(<span class="hljs-string">'.//img/@src'</span>).extract_first()<br>            img_src = <span class="hljs-string">'http:'</span> + img_src<br>            name = li.xpath(<span class="hljs-string">'.//img/@alt'</span>).extract_first()<br>            price = li.xpath(<span class="hljs-string">'.//p[@class="price"]/span[1]/text()'</span>).extract_first()<br>            book = ScrapyDemo04DangdangItem(img_src=img_src, name=name, price=price)<br>            <span class="hljs-comment"># 获取一个book就将book返回给 pipelines</span><br>            <span class="hljs-keyword">yield</span> book<br>        <span class="hljs-comment"># 模拟翻页</span><br>        <span class="hljs-comment"># 获取翻页请求</span><br>        next_url = response.xpath(<span class="hljs-string">'//ul[@name="Fy"]/li[@class="next"]/a/@href'</span>).extract_first()<br>        <span class="hljs-comment"># 判断是否到最后一页</span><br>        <span class="hljs-keyword">if</span> next_url:<br>            <span class="hljs-comment"># 构造完整url</span><br>            url = response.urljoin(next_url)<br>            <span class="hljs-comment"># 构造scrapy.Request对象，并yield给引擎</span><br>            <span class="hljs-comment"># 利用callback参数指定该Request对象之后获取的响应用哪个函数进行解析</span><br>            <span class="hljs-keyword">yield</span> scrapy.Request(url, callback=self.parse)<br></code></pre></td></tr></tbody></table></figure><h3 id="scrapy-Request的更多参数"><a href="#scrapy-Request的更多参数" class="headerlink" title="scrapy.Request的更多参数"></a>scrapy.Request 的更多参数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scrapy.Request(url[,callback,method=<span class="hljs-string">"GET"</span>,headers,body,cookies,meta,dont_filter=<span class="hljs-literal">False</span>])<br></code></pre></td></tr></tbody></table></figure><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><ol><li>中括号里的参数为可选参数</li><li><strong> callback</strong>：表示当前的 url 的响应交给哪个函数去处理</li><li><strong> meta</strong>：实现数据在不同的解析函数中传递，meta 默认带有部分数据，比如下载延迟，请求深度等</li><li> dont_filter: 默认为 False，会过滤请求的 url 地址，即请求过的 url 地址不会继续被请求，对需要重复请求的 url 地址可以把它设置为 Ture，比如贴吧的翻页请求，页面的数据总是在变化；start_urls 中的地址会被反复请求，否则程序不会启动</li><li> method：指定 POST 或 GET 请求</li><li> headers：接收一个字典，其中不包括 cookies</li><li>cookies：接收一个字典，专门放置 cookies</li><li>body：接收 json 字符串，为 POST 的数据，发送 payload_post 请求时使用（在下一章节中会介绍 post 请求）</li></ol><h3 id="meta参数的使用"><a href="#meta参数的使用" class="headerlink" title="meta参数的使用"></a>meta 参数的使用</h3><p><strong>meta 的作用</strong>：meta 可以实现数据在不同的解析函数中的传递</p><p>在爬虫文件的 parse 方法中，提取详情页增加之前 callback 指定的 parse_detail 函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self,response</span>):<br>    ...<br>    <span class="hljs-keyword">yield</span> scrapy.Request(detail_url, callback=self.parse_detail,meta={<span class="hljs-string">"item"</span>:item})<br>...<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_detail</span>(<span class="hljs-params">self,response</span>):<br>    <span class="hljs-comment">#获取之前传入的item</span><br>    item = resposne.meta[<span class="hljs-string">"item"</span>]<br></code></pre></td></tr></tbody></table></figure><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><ol><li>meta 参数是一个字典</li><li> meta 字典中有一个固定的键 <code>proxy</code>，表示代理 ip，关于代理 ip 的使用我们将在 scrapy 的下载中间件的学习中进行介绍</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>完善并使用 Item 数据类：<ol><li>在 items.py 中完善要爬取的字段</li><li>在爬虫文件中先导入 Item</li><li> 实例化 Item 对象后，像字典一样直接使用</li></ol></li><li>构造 Request 对象，并发送请求：<ol><li>导入 scrapy.Request 类</li><li>在解析函数中提取 url</li><li>yield scrapy.Request(url, callback=self.parse_detail, meta={})</li></ol></li><li> 利用 meta 参数在不同的解析函数中传递数据:<ol><li> 通过前一个解析函数 yield scrapy.Request (url, callback=self.xxx, meta={}) 来传递 meta</li><li> 在 self.xxx 函数中 response.meta.get (‘key’, ‘’) 或 response.meta [‘key’] 的方式取出传递的数据</li></ol></li></ol><h2 id="Scrapy模拟登录"><a href="#Scrapy模拟登录" class="headerlink" title="Scrapy模拟登录"></a>Scrapy 模拟登录</h2><h3 id="requests-实现模拟登陆"><a href="#requests-实现模拟登陆" class="headerlink" title="requests 实现模拟登陆"></a>requests 实现模拟登陆</h3><ol><li>直接携带 cookies 请求页面</li><li>找 url 地址，发送 post 请求存储 cookie</li></ol><h3 id="selenium-模拟登陆"><a href="#selenium-模拟登陆" class="headerlink" title="selenium 模拟登陆"></a>selenium 模拟登陆</h3><p>找到对应的 input 标签，输入文本点击登陆</p><h3 id="scrapy-模拟登陆"><a href="#scrapy-模拟登陆" class="headerlink" title="scrapy 模拟登陆"></a>scrapy 模拟登陆</h3><ol><li>直接携带 cookies</li><li> 找 url 地址，发送 post 请求存储 cookie</li></ol><h3 id="携带cookies-获取需要登陆的信息"><a href="#携带cookies-获取需要登陆的信息" class="headerlink" title="携带cookies 获取需要登陆的信息"></a>携带 cookies 获取需要登陆的信息</h3><p><strong>应用场景：</strong></p><ol><li>cookie 过期时间很长，常见于一些不规范的网站</li><li>能在 cookie 过期之前把所有的数据拿到</li><li>配合其他程序使用，比如其使用 selenium 把登陆之后的 cookie 获取到保存到本地，scrapy 发送请求之前先读取本地 cookie</li></ol><h4 id="重构starte-rquests方法"><a href="#重构starte-rquests方法" class="headerlink" title="重构starte_rquests方法"></a>重构 starte_rquests 方法</h4><p>scrapy 中 start_url 是通过 start_requests 来进行处理的，其实现代码如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这是源代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_requests</span>(<span class="hljs-params">self</span>):<br>    cls = self.__class__<br>    <span class="hljs-keyword">if</span> method_is_overridden(cls, Spider, <span class="hljs-string">'make_requests_from_url'</span>):<br>        warnings.warn(<br>            <span class="hljs-string">"Spider.make_requests_from_url method is deprecated; it "</span><br>            <span class="hljs-string">"won't be called in future Scrapy releases. Please "</span><br>            <span class="hljs-string">"override Spider.start_requests method instead (see %s.%s)."</span> % (<br>                cls.__module__, cls.__name__<br>            ),<br>        )<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> self.start_urls:<br>            <span class="hljs-keyword">yield</span> self.make_requests_from_url(url)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> self.start_urls:<br>            <span class="hljs-keyword">yield</span> Request(url, dont_filter=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></tbody></table></figure><p><strong>所以对应的，如果 start_url 地址中的 url 是需要登录后才能访问的 url 地址，则需要重写 start_request 方法并在其中手动添加上 cookie</strong></p><h4 id="携带cookies登陆github"><a href="#携带cookies登陆github" class="headerlink" title="携带cookies登陆github"></a>携带 cookies 登陆 github</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GitSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">'git1'</span><br>    allowed_domains = [<span class="hljs-string">'github.com'</span>]<br>    start_urls = [<span class="hljs-string">'https://github.com/AWeiIsCoding'</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_requests</span>(<span class="hljs-params">self</span>):<br>        url = self.start_urls[<span class="hljs-number">0</span>]<br>        cookie_temp = <span class="hljs-string">'从网站上拿到的cookie'</span><br>        cookies = {data.split(<span class="hljs-string">'='</span>)[<span class="hljs-number">0</span>]: data.split(<span class="hljs-string">'='</span>)[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> cookie_temp.split(<span class="hljs-string">'; '</span>)}<br>        <span class="hljs-keyword">yield</span> scrapy.Request(url, callback=self.parse, cookies=cookies)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-built_in">print</span>(response.xpath(<span class="hljs-string">'/html/head/title/text()'</span>).extract_first())<br></code></pre></td></tr></tbody></table></figure><p>登录成功之后，输出的标题后不会带上<code> · GitHub</code></p><p>登录成功：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220823013521.png" alt="image-20220823013521495"></p><p>登录失败：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220823013603.png" alt="image-20220823013603745"></p><p><strong>注意：</strong></p><ol><li>scrapy 中 cookie 不能够放在 headers 中，在构造请求的时候有专门的 cookies 参数，能够接受字典形式的 coookie</li><li> 在 setting 中设置 ROBOTS 协议、USER_AGENT</li></ol><h3 id="scrapy-发送post请求"><a href="#scrapy-发送post请求" class="headerlink" title="scrapy 发送post请求"></a>scrapy 发送 post 请求</h3><p>我们知道可以通过 scrapy.Request () 指定 method、body 参数来发送 post 请求；<strong>但是通常使用 scrapy.FormRequest () 来发送 post 请求。</strong></p><p><strong>注意：scrapy.FormRequest () 能够发送表单和 ajax 请求</strong></p><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><ol><li>找到 post 的 url 地址：点击登录按钮进行抓包，然后定位 url 地址为 <a href="https://github.com/session">https://github.com/session</a></li><li> 找到请求体的规律：分析 post 请求的请求体，其中包含的参数均在前一次的响应中</li><li>否登录成功：通过请求个人主页，观察是否包含用户名</li></ol><h4 id="案例：登录Github获取首页"><a href="#案例：登录Github获取首页" class="headerlink" title="案例：登录Github获取首页"></a>案例：登录 Github 获取首页</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Git2Spider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">'git2'</span><br>    allowed_domains = [<span class="hljs-string">'github.com'</span>]<br>    start_urls = [<span class="hljs-string">'https://github.com/login'</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-comment"># 从登录页面响应中解析出post数据</span><br>        authenticity_token = response.xpath(<span class="hljs-string">"//input[@name='authenticity_token']/@value"</span>).extract_first()<br>        utf8 = response.xpath(<span class="hljs-string">"//input[@name='utf8']/@value"</span>).extract_first()<br>        commit = response.xpath(<span class="hljs-string">"//input[@name='commit']/@value"</span>).extract_first()<br>        webauthn_support = response.xpath(<span class="hljs-string">"//input[@name='webauthn-support']/@value"</span>).extract_first()<br>        webauthn_iuvpaa_support = response.xpath(<span class="hljs-string">"//input[@name='webauthn-iuvpaa-support']/@value"</span>).extract_first()<br>        return_to = response.xpath(<span class="hljs-string">"//input[@name='return_to']/@value"</span>).extract_first()<br>        timestamp = response.xpath(<span class="hljs-string">"//input[@name='timestamp']/@value"</span>).extract_first()<br>        timestamp_secret = response.xpath(<span class="hljs-string">"//input[@name='timestamp_secret']/@value"</span>).extract_first()<br>        post_data = {<br>            <span class="hljs-string">'commit'</span>: commit,<br>            <span class="hljs-string">'authenticity_token'</span>: authenticity_token,<br>            <span class="hljs-string">'login'</span>: <span class="hljs-string">'账号'</span>,<br>            <span class="hljs-string">'password'</span>: <span class="hljs-string">'密码'</span>,<br>            <span class="hljs-string">'trusted_device'</span>: <span class="hljs-string">''</span>,<br>            <span class="hljs-string">'webauthn-support'</span>: webauthn_support,<br>            <span class="hljs-string">'webauthn-iuvpaa-support'</span>: webauthn_iuvpaa_support,<br>            <span class="hljs-string">'return_to'</span>: return_to,<br>            <span class="hljs-string">'allow_signup'</span>: <span class="hljs-string">''</span>,<br>            <span class="hljs-string">'client_id'</span>: <span class="hljs-string">''</span>,<br>            <span class="hljs-string">'integration'</span>: <span class="hljs-string">''</span>,<br>            <span class="hljs-string">'required_field_f5d1'</span>: <span class="hljs-string">''</span>,<br>            <span class="hljs-string">'timestamp'</span>: timestamp,<br>            <span class="hljs-string">'timestamp_secret'</span>: timestamp_secret,<br>        }<br>        <span class="hljs-built_in">print</span>(post_data)<br>        <span class="hljs-comment"># 针对登陆的url发送post请求</span><br>        <span class="hljs-keyword">yield</span> scrapy.FormRequest(url=<span class="hljs-string">'https://github.com/session'</span>, formdata=post_data, callback=self.after_login)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">after_login</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-keyword">yield</span> scrapy.FormRequest(url=<span class="hljs-string">'https://github.com/1337720537'</span>, callback=self.cheak_login)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cheak_login</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-built_in">print</span>(response.xpath(<span class="hljs-string">'/html/head/title/text()'</span>).extract_first())<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220824011021.png" alt="image-20220824011021609"></p><p>在 settings.py 中通过设置 <code>COOKIES_DEBUG=TRUE</code> 能够在终端看到 cookie 的传递传递过程</p><h2 id="Scrapy-Shell"><a href="#Scrapy-Shell" class="headerlink" title="Scrapy Shell"></a>Scrapy Shell</h2><p><strong>Scrapy Shell，是一个交互终端</strong>，供您<strong>在未启动 spider 的情况下尝试及调试您的爬取代码</strong>。 其本意是用来测试提取数据的代码，不过您可以将其作为正常的 Python 终端，在上面测试任何的 Python 代码。 该终端是用来测试 XPath 或 CSS 表达式，查看他们的工作方式及从爬取的网页中提取的数据。 在编写您的 spider 时，该终端提供了交互性测试您的表达式代码的功能，<strong>免去了每次修改后运行 spider 的麻烦</strong>。 一旦熟悉了 Scrapy 终端后，您会发现其在开发和调试 spider 时发挥的巨大作用。</p><ul><li><p>安装</p><p><code>pip install ipython -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p></li><li><p>如何使用</p><ul><li>如果需要进入 scrapy shell ，直接在终端中输入 <code>scrapy shell 域名</code>就行了。</li><li>如果想要高亮或者自动补全，就需要安装 ipython 。 </li></ul></li></ul><h2 id="Scrapy管道"><a href="#Scrapy管道" class="headerlink" title="Scrapy管道"></a>Scrapy 管道</h2><h3 id="pipeline-常用的方法"><a href="#pipeline-常用的方法" class="headerlink" title="pipeline 常用的方法"></a>pipeline 常用的方法</h3><ol><li>process_item(self,item,spider):<ul><li> 管道类中必须有的函数</li><li>实现对 item 数据的处理</li><li>必须 return item</li></ul></li><li>open_spider (self, spider): 在爬虫开启的时候仅执行一次</li><li> close_spider (self, spider): 在爬虫关闭的时候仅执行一次</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/posts/40991/"/>
    <url>/posts/40991/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker 简介</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><a href="http://www.docker.com/">docker 官网</a></p><p><a href="https://hub.docker.com/">docker 镜像仓库</a></p><ul><li><p>问题：为什么会有 docker 出现？</p><p>假定您在开发一个微服务系统，您使用的是一台笔记本电脑而且您的开发环境具有特定的配置。其他开发人员身处的环境配置也各有不同。您正在开发的应用依赖于您当前的配置且还要依赖于某些配置文件。此外，您的企业还拥有标准化的测试和生产环境，且具有自身的配置和一系列支持文件。您希望尽可能多在本地模拟这些环境而不产生重新创建服务器环境的开销。</p><p>请问：您要如何确保应用能够在这些环境中运行和通过质量检测？并且在部署过程中不出现令人头疼的版本、配置问题，也无需重新编写代码和进行故障修复？</p><p><strong>答案就是使用容器</strong>。Docker 之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案 —–<strong>系统平滑移植，容器虚拟化技术</strong>。</p><p>环境配置相当麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，<strong>能否实现软件可以带环境安装</strong>？也就是说，<strong>安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时 “在我的机器上可正常工作” 的问题</strong>。</p><p>传统上认为，软件编码开发 / 测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等 (Java 为例)。而为了让这些程序可以顺利执行，<strong>开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件 + 所有软件环境。不过，即便如此，仍然常常发生部署失败的状况</strong>。Docker 的出现使得 Docker 得以<strong>打破过去「程序即应用」的观念。透过镜像 (images) 将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作</strong>。</p></li><li><p>docker 理念</p><p><strong>Docker 是基于 Go 语言实现的云开源项目</strong>。</p><p>Docker 的主要目标是 “Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 WEB 应用或数据库应用等等）及其运行环境能够做到 “<strong>一次镜像，处处运行</strong>”）。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220528141823.png" alt="image-20220528141823015"></p><p><strong>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的</strong>。将应用打成镜像，通过镜像成为运行在 Docker 容器上面的实例，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。<strong>只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作</strong>。</p></li><li><p>一句话：就是解决了<strong>运行环境和配置问题</strong>的<strong>软件容器</strong>， 方便做持续集成并有助于整体发布的容器虚拟化技术。</p></li></ul><h2 id="容器与虚拟机比较"><a href="#容器与虚拟机比较" class="headerlink" title="容器与虚拟机比较"></a>容器与虚拟机比较</h2><ul><li><p>传统虚拟机技术</p><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p><p>它可以在一种操作系统里面运行另一种操作系统，比如在 Windows10 系统里面运行 Linux 系统 CentOS7。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220528142658.webp" alt="img"></p><p>虚拟机的缺点：</p><ul><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li></ul></li><li><p>容器虚拟化技术</p><p>由于前面虚拟机存在某些缺点，Linux 发展出了另一种虚拟化技术：</p><p><strong>Linux 容器 (Linux Containers，缩写为 LXC)</strong></p><p>Linux 容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p><p><strong>Linux 容器不是模拟一个完整的操作系统</strong>而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。<strong>容器与虚拟机不同，不需要捆绑一整套操作系统</strong>，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220528142718.webp" alt="img"></p></li><li><p>对比</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220528142755.webp" alt="img"></p><ul><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li><li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也<strong>没有进行硬件虚拟</strong>。因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li></ul></li></ul><h2 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h2><ul><li><p>更快速的应用交付和部署</p><p>传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker 化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</p></li><li><p>更便捷的升级和扩缩容</p><p>随着微服务架构和 Docker 的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个 Docker 容器将变成一块 “积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</p></li><li><p>更简单的系统运维</p><p>应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的 BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</p></li><li><p>更高效的计算资源利用</p><p>Docker 是<strong>内核级虚拟化</strong>，其不像传统的虚拟化技术一样需要额外的 Hypervisor 支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的 CPU 和内存的利用率。</p></li><li><p>docker 应用场景</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220528143200.png" alt="image-20220528143200791"></p></li></ul><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker 安装</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p><strong>前提条件</strong></p><p>目前，CentOS 仅发行版本中的内核支持 Docker。Docker 运行在 CentOS 7 (64-bit) 上，</p><p>要求系统为 64 位、Linux 系统内核版本为 3.8 以上，这里选用 Centos7.x。</p><p><strong>查看自己的内核</strong></p><p>uname 命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</p><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker 的基本组成</h2><ul><li><p>镜像 (image)</p><p>Docker 镜像（Image）就是一个<strong>只读</strong>的模板。镜像可以用来创建 Docker 容器，<strong>一个镜像可以创建很多容器</strong>。</p><p>它也相当于是一个 root 文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。</p><p>相当于容器的 “源代码”，<strong>docker 镜像文件类似于 Java 的类模板，而 docker 容器实例类似于 java 中 new 出来的实例对象</strong>。</p></li><li><p>容器 (container)</p><p><strong>从面向对象角度</strong></p><p>Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，<strong>容器是用镜像创建的运行实例</strong>。就像是 Java 中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台</p><p><strong>从镜像容器角度</strong></p><p><strong>可以把容器看做是一个简易版的 Linux 环境</strong>（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p></li><li><p>仓库 (repository)</p><p>仓库（Repository）是集中存放镜像文件的场所。</p><p>类似于</p><p>Maven 仓库，存放各种 jar 包的地方；</p><p>github 仓库，存放各种 git 项目的地方；</p><p>Docker 公司提供的官方 registry 被称为 Docker Hub，存放各种镜像模板的地方。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p><p><strong>最大的公开仓库是 </strong> <a href="https://hub.docker.com/">Docker Hub</a>，</p><p>存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等</p></li><li><p>总结</p><p><strong>需要正确的理解仓库 / 镜像 / 容器这几个概念</strong></p><p>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是 image 镜像文件。只有通过这个镜像文件才能生成 Docker 容器实例 (类似 Java 中 new 出来一个对象)。</p><p>image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p><strong>镜像文件</strong></p><p>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</p><p><strong>容器实例</strong></p><p>一个容器运行一种服务，当我们需要的时候，就可以通过 docker 客户端创建一个对应的运行实例，也就是我们的容器</p><p><strong>仓库</strong></p><p>就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。</p></li></ul><h2 id="Docker平台架构图解-架构版"><a href="#Docker平台架构图解-架构版" class="headerlink" title="Docker平台架构图解(架构版)"></a>Docker 平台架构图解 (架构版)</h2><p>Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220528150211.png" alt="image-20220528150211519"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220528145355.png" alt="image-20220528145355323"></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><div class="tag-common tabs" id="示例，[index]"><ul class="nav-tabs"><li class="tab active"><a data-target="示例，[index]-1">Centos 7</a></li><li class="tab"><a data-target="示例，[index]-2">Debian</a></li></ul><div class="tab-content"><div class="tab-pane active" id="示例，[index]-1"><ol><li><p> 首先准备 CentOS7 系统</p></li><li><p>可以根据 <a href="https://docs.docker.com/engine/install/centos">docker 官网下载 CentOS7 版本的 docker</a> 的步骤安装，也可以按照我下面的步骤进行</p></li><li><p>如果你之前安装过 docke，那么请卸载旧版本 docker</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出已经安装的 docker 相关软件</span><br>yum list installed | grep docker<br>rpm -qa | grep docker<br><br><span class="hljs-comment"># 删掉 docker 相关软件 列出几个就删几个</span><br>sudo yum -y remove docker-xxx.xxxxxx<br><br><span class="hljs-comment"># 删除镜像文件，容器</span><br><span class="hljs-built_in">rm</span> -rf /var/lib/docker<br><br><span class="hljs-comment"># 删除配置文件</span><br><span class="hljs-built_in">rm</span> -rf /etc/docker<br><br><span class="hljs-comment"># 通过脚本移除旧的版本</span><br>sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine<br></code></pre></td></tr></tbody></table></figure></li><li><p>yum 安装 gcc 相关</p><ul><li>yum -y install gcc</li><li>yum -y install gcc-c++</li></ul></li><li><p> 安装需要的软件包</p><p>yum install -y yum-utils</p></li><li><p>设置 stable 镜像仓库</p><p><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p></li><li><p>更新 yum 软件包索引</p><p><code>yum makecache fast</code></p></li><li><p>安装 docker CE</p><p><code>yum -y install docker-ce docker-ce-cli containerd.io</code></p></li><li><p>启动 docker</p><p><code>systemctl start docker</code></p></li><li><p>测试</p><p><code>docker version</code></p><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529024243.png" alt="image-20220529024243269"></p></li><li><p>执行 HelloWrold</p><p><code>docker run hello-world</code></p><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529024411.png" alt="image-20220529024411366"></p></li></ol></div><div class="tab-pane" id="示例，[index]-2"><ol><li><p>首先准备 Debian 系统</p></li><li><p>可以根据 <a href="https://docs.docker.com/engine/install/debian">docker 官网下载 Debian 版本的 docker</a> 的步骤安装，也可以按照我下面的步骤进行</p></li><li><p>如果你之前安装过 docke，那么请卸载旧版本 docker</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get remove docker \<br>               docker-engine \<br>               docker.io<br></code></pre></td></tr></tbody></table></figure></li><li><p>安装必要工具</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br><br>sudo apt-get install \<br>     apt-transport-https \<br>     ca-certificates \<br>     curl \<br>     gnupg \<br>     lsb-release<br></code></pre></td></tr></tbody></table></figure></li><li><p>添加软件源的 GPG 密钥</p><p><code>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</code></p></li><li><p>向 <code>sources.list</code> 中添加 Docker 软件源</p><p>在一些基于 Debian 的 Linux 发行版中 <code>$(lsb_release -cs)</code> 可能不会返回 Debian 的版本代号，例如 <a href="https://www.kali.org/docs/policy/kali-linux-relationship-with-debian/">Kail Linux</a>、 <a href="https://www.bunsenlabs.org/">BunsenLabs Linux</a>。在这些发行版中我们需要将下面命令中的 <code>$(lsb_release -cs)</code> 替换为 <a href="https://mirrors.aliyun.com/docker-ce/linux/debian/dists/">阿里云 docker 镜像站</a> 中支持的 Debian 版本代号，例如 <code>buster</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/debian \</span><br><span class="hljs-string">  <span class="hljs-subst">$(lsb_release -cs)</span> stable"</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br></code></pre></td></tr></tbody></table></figure></li><li><p>安装 docker</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br><br>sudo apt-get install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p><code>docker version</code></p><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220804011417.png" alt="image-20220804011417419"></p></li><li><p>启动 docker</p><p><code>systemctl start docker</code></p></li><li><p>执行 HelloWrold</p><p><code>docker run hello-world</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220804011544.png" alt="image-20220804011544008"></p></li></ol></div></div></div><h2 id="docker卸载"><a href="#docker卸载" class="headerlink" title="docker卸载"></a>docker 卸载</h2><div class="tag-common tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><a data-target="示例-1">Centos 7</a></li><li class="tab"><a data-target="示例-2">Debian</a></li></ul><div class="tab-content"><div class="tab-pane active" id="示例-1"><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop docker<br><br>yum remove docker-ce docker-ce-cli containerd.io<br><br><span class="hljs-built_in">rm</span> -rf /var/lib/docker<br><br><span class="hljs-built_in">rm</span> -rf /var/lib/containerd<br></code></pre></td></tr></tbody></table></figure></div><div class="tab-pane" id="示例-2"><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop docker<br><br>sudo apt-get remove docker \<br>               docker-engine \<br>               docker.io<br></code></pre></td></tr></tbody></table></figure></div></div></div><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><ol><li><p>打开<a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">阿里云云原生应用</a>，登录，选择<strong>控制台</strong>里的<strong>容器镜像服务</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529032548.png" alt="image-20220529031949121"></p></li><li><p>获得加速器地址：<a href="https://jl2z4y5o.mirror.aliyuncs.com/">https://jl2z4y5o.mirror.aliyuncs.com</a></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529032039.png" alt="image-20220529032039500"></p></li><li><p> root 权限下粘贴脚本直接执行</p></li></ol>   <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /etc/docker<br><br>tee /etc/docker/daemon.json &lt;&lt;-'EOF'<br>{<br>  "registry-mirrors": ["https://jl2z4y5o.mirror.aliyuncs.com"]<br>}<br>EOF<br></code></pre></td></tr></tbody></table></figure><ol start="4"><li><p>重启服务器</p><ul><li><code>systemctl daemon-reload</code></li><li><code>systemctl restart docker</code></li></ul></li></ol><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>启动 Docker 后台容器 (测试运行 hello-world)</p><p><code>docker run hello-world</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529032811.png" alt="image-20220529032811648"></p><p>输出这段提示以后，hello world 就会停止运行，容器自动终止。</p><p><strong>那么 docker run 命令之后干了什么呢？</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529113412.png" alt="image-20220529113412857"></p><h2 id="底层对比"><a href="#底层对比" class="headerlink" title="底层对比"></a>底层对比</h2><p><strong>为什么 Docker 比 VM 虚拟机快？</strong></p><ul><li><p>docker 有着比虚拟机更少的抽象层</p><p>由于 docker 不需要 Hypervisor (虚拟机) 实现硬件资源虚拟化，运行在 docker 容器上的程序直接使用的都是实际物理机的硬件资源。因此在 CPU、内存利用率上 docker 将会在效率上有明显优势。</p></li><li><p>docker 利用的是宿主机的内核，而不需要加载操作系统 OS 内核</p><p>当新建一个容器时，docker 不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载 OS, 返回新建过程是分钟级别的。而 docker 由于直接利用宿主机的操作系统，则省略了返回过程，因此新建一个 docker 容器只需要几秒钟。</p></li></ul><h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker 常用命令</h1><h2 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h2><ul><li>启动 docker：<code>systemctl start docker</code></li><li>停止 docker：<code>systemctl stop docker</code></li><li>重启 docker：<code>systemctl restart docker</code></li><li>查看 docker 状态：<code>systemctl status docker</code></li><li>开机启动：<code>systemctl enable docker</code></li><li>查看 docker 概要信息：<code>docker info</code></li><li>查看 docker 总体帮助文档：<code>docker --help</code></li><li>查看 docker 命令帮助文档： <code>docker 具体命令 --help</code></li></ul><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><ul><li><p><code>docker images [OPTIONS]</code></p><ul><li><p>作用：列出本地主机上的镜像</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529120008.png" alt="image-20220529120008005"></p></li><li><p>各个选项卡说明</p><ul><li>REPOSITORY：表示镜像的仓库源</li><li> TAG：镜像的标签版本号<ul><li>同一仓库源可以有多个 TAG 版本，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</li><li>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</li></ul></li><li> IMAGE ID：镜像 ID</li><li>CREATED：镜像创建时间</li><li> SIZE：镜像大小</li></ul></li><li><p> OPTIONS 说明</p><ul><li>-a : 列出本地所有的镜像（含历史映像层）</li><li>-q : 只显示镜像 ID</li></ul></li></ul></li><li><p><code>docker search [OPTIONS] 某个XXX镜像名字</code></p><ul><li><p>作用：从 <a href="https://hub.docker.com/">docker 仓库</a>查找镜像</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529121333.png" alt="image-20220529121333713"></p></li><li><p>各个选项卡说明</p><ul><li>NAME：镜像名称</li><li> DESCRIPTION：镜像说明</li><li> STARS：点赞数量</li><li> OFFICIAL：是否属于官方</li><li> AUTOMATED：是否是自动构建的</li></ul></li><li><p> OPTIONS 说明</p><ul><li>–limit [N]：只列出 N 个镜像，默认 25 个</li></ul></li></ul></li><li><p><code>docker pull 某个XXX镜像名字</code></p><ul><li><p>作用：下载镜像</p></li><li><p>基本命令：<code>docker pull 镜像名字[:TAG]</code>，如果<strong>没有加上 TAG 代表默认取得最新版</strong>，等价于：<code>docker pull 镜像名字:latest</code></p><ul><li><p>例子：<code>docker pull ubuntu</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529122149.png" alt="image-20220529122149769"></p></li></ul></li></ul></li><li><p><code>docker system df</code></p><ul><li><p>作用：查看镜像 / 容器 / 数据卷所占的空间</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529122341.png" alt="image-20220529122341351"></p></li></ul></li><li><p><code>docker rmi 镜像名字ID</code></p><ul><li><p>作用：删除镜像</p></li><li><p>OPTIONS 说明</p><ul><li>-f：强制删除</li></ul></li><li><p>删除单个镜像：<code>docker rmi -f 镜像名字/镜像ID（唯一）</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529215213.png" alt="image-20220529215213219"></p></li><li><p>删除多个镜像：<code>docker rmi -f 镜像名1:TAG 镜像名2:TAG</code></p></li><li><p>删除全部镜像（参数续传）：<code>docker rmi -f $(docker images -qa)</code></p></li></ul></li></ul><h2 id="面试题：docker虚悬镜像"><a href="#面试题：docker虚悬镜像" class="headerlink" title="面试题：docker虚悬镜像"></a>面试题：docker 虚悬镜像</h2><p><strong>是什么</strong></p><p>仓库名、标签都是 <code>&lt;none&gt;</code> 的镜像，俗称虚悬镜像 dangling image</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529215632.png" alt="image-20220529215632374"></p><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>有镜像才能创建容器， 这是根本前提 (下载一个 CentOS 或者 ubuntu 镜像演示)</strong></p><ul><li><p><code>docker pull centos</code> 或者 <code>docker pull ubuntu</code></p></li><li><p>新建 + 启动容器</p><ul><li><p><code>docker run [OPTIONS] IMAGE  [COMMAND] [ARG...]</code></p></li><li><p>OPTIONS 说明（常用）：有些是一个减号，有些是两个减号</p><ul><li>–name=” 容器新名字”：为容器指定一个名称；</li><li>-d：后台运行容器并返回容器 ID，也即启动守护式容器 (后台运行)；</li><li>-i：以交互模式运行容器，通常与 -t 同时使用；</li><li>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。即启动交互式容器 (前台有伪终端，等待交互)；</li><li>-P：随机端口映射，大写 P；</li><li>-p：指定端口映射，小写 p；</li></ul></li><li><p>测试</p><ul><li><p>启动守护式容器</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529230019.png" alt="image-20220529230019455"></p></li><li><p>启动交互式容器，在容器内执行 /bin/bash 命令，要退出终端，直接输入 exit</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220529223826.png" alt="image-20220529223826608"></p></li></ul></li></ul></li><li><p>列出当前所有正在运行的容器</p><ul><li><code>docker ps [OPTIONS]</code></li><li>OPTIONS 说明（常用）<ul><li>-a：列出当前所有正在运行的容器 + 历史上运行过的。</li><li>-l：显示最近创建的容器。</li><li>-n：显示最近 n 个创建的容器。</li><li>-q：静默模式，只显示容器编号。</li></ul></li></ul></li><li><p>退出容器</p><ul><li>两种退出方式<ul><li><code>exit</code>：exit 退出，容器停止</li><li> ctrl+p+q：ctrl+p+q 退出，容器不停止</li></ul></li></ul></li><li><p>启动已停止的容器</p><p> <code>docker start 容器ID或者容器名</code></p></li><li><p>重启容器</p><p> <code>docker restart 容器ID或者容器名</code></p></li><li><p>停止容器</p><p> <code>docker stop 容器ID或者容器名</code></p></li><li><p>强制停止容器</p><p> <code>docker kill 容器ID或容器名</code></p></li><li><p>删除已停止的容器</p><ul><li><code>docker rm 容器ID或容器名</code></li><li>OPTIONS 说明<ul><li> -f：强制删除</li></ul></li><li>一次性删除多个容器实例：<code>docker rm -f $(docker ps -a -q)</code> 或者 <code>docker ps -a -q | xargs docker rm</code></li></ul></li><li><p>查看容器日志</p><p> <code>docker logs 容器ID</code></p></li><li><p>查看容器内运行的进程</p><p> <code>docker top 容器ID</code></p></li><li><p>查看容器内部细节</p><p> <code>docker inspect 容器ID</code></p></li><li><p>重新进入</p><ul><li><p>进入正在运行的容器并以<strong>命令行交互</strong></p><p> <code>docker exec -it 容器ID commond</code></p></li><li><p>重新进入运行的容器</p><p> <code>docker attach 容器ID</code></p></li><li><p>两者区别：</p><ul><li>attach 直接进入容器启动命令的终端，不会启动新的进程 用 exit 退出，会导致容器的停止</li><li> exec 是在容器中打开新的终端，并且可以启动新的进程 用 exit 退出，不会导致容器的停止</li></ul></li></ul></li><li><p>从容器内拷贝文件到主机上（容器→主机）</p><p> <code>docker cp 容器ID:容器内路径 目的主机路径</code></p></li><li><p>导入和导出容器</p><ul><li><p><code>docker export 容器ID &gt; 文件名.tar</code> 导出容器的内容留作为一个 tar 归档文件 [对应 import 命令]</p></li><li><p>import 从 tar 包中的内容创建一个新的文件系统再导入为镜像 [对应 export]</p></li><li><p>示例</p><ul><li><p><code>docker export 容器ID &gt; 文件名.tar</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220530165918.png" alt="image-20220530165918049"></p></li><li><p><code>cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</code></p><p>首先删除容器</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220530170256.png" alt="image-20220530170256543"></p><p>利用 import 命令重新导入</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220530170540.png" alt="image-20220530170540215"></p><p>导入成镜像之后，重新启动 redis，执行成功</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220530171356.png" alt="image-20220530171356078"></p></li></ul></li></ul></li></ul><h2 id="守护式容器示例"><a href="#守护式容器示例" class="headerlink" title="守护式容器示例"></a>守护式容器示例</h2><p><strong>下载一个 Redis6.0.8 镜像演示</strong></p><ul><li><p>启动守护式容器 (后台服务器)：在大部分的场景下，我们希望 docker 的服务是在后台运行的， 我们可以过 -d 指定容器的后台运行模式。</p></li><li><p>使用 <code>docker run -d 容器名</code>启动容器</p><ul><li>问题：有些后台容器（例如 nginx、centos…）启动之后，使用 <code>docker ps -a</code> 进行查看，会发现容器已经退出.</li><li> 原因：Docker 容器后台运行，就必须有一个前台进程。容器运行的命令如果不是那些一直挂起的命令（比如运行 top，tail），就是会自动退出的。</li><li>这个是 docker 的机制问题，比如你的 web 容器，我们以 nginx 为例，正常情况下，我们配置启动服务只需要启动响应的 service 即可。例如 <code>service nginx start</code> 但是，这样做，nginx 为后台进程模式运行，就导致 docker 前台没有运行的应用，这样的容器后台启动后，会立即自杀因为他觉得他没事可做了。所以，<strong>最佳的解决方案是，将你要运行的程序以前台进程的形式运行</strong>。</li></ul></li><li><p>启动 redis:6.0.8：<code>docker run -d redis:6.0.8</code>，查看容器启动情况：<code>docker ps</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220530145159.png" alt="image-20220530145159945"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><strong>attach</strong></p><p>Attach to a running container</p><p>当前 shell 下 attach 连接指定运行镜像</p></li><li><p><strong>build</strong></p><p>Build an image from a Dockerfile</p><p>通过 Dockerfile 定制镜像</p></li><li><p><strong>commit</strong></p><p>Create a new image from a container changes</p><p>提交当前容器为新的镜像</p></li><li><p><strong>cp</strong></p><p>Copy files/folders from the containers filesystem to the host path</p><p>从容器中拷贝指定文件或者目录到宿主机中</p></li><li><p><strong>create</strong></p><p>Create a new container</p><p>创建一个新的容器，同 run，但不启动容器</p></li><li><p><strong>diff</strong></p><p>Inspect changes on a container’s filesystem</p><p>查看 docker 容器变化</p></li><li><p><strong>events</strong></p><p>Get real time events from the server</p><p>从 docker 服务获取容器实时事件</p></li><li><p><strong>exec</strong></p><p>Run a command in an existing container</p><p>在已存在的容器上运行命令</p></li><li><p><strong>export</strong></p><p>Stream the contents of a container as a tar archive</p><p>导出容器的内容流作为一个 tar 归档文件 [对应 import]</p></li><li><p><strong>history</strong></p><p>Show the history of an image</p><p>展示一个镜像形成历史</p></li><li><p><strong>images</strong></p><p>List images</p><p>列出系统当前镜像</p></li><li><p><strong>import</strong></p><p>Create a new filesystem image from the contents of a tarball</p><p>从 tar 包中的内容创建一个新的文件系统映像 [对应 export]</p></li><li><p><strong>info</strong></p><p>Display system-wide information</p><p>显示系统相关信息</p></li><li><p><strong>inspect</strong></p><p>Return low-level information on a container</p><p>查看容器详细信息</p></li><li><p><strong>kill</strong></p><p>Kill a running containe</p><p>kill 指定 docker 容器</p></li><li><p><strong>load</strong></p><p>Load an image from a tar archive</p><p>从一个 tar 包中加载一个镜像 [对应 save]</p></li><li><p><strong>login</strong></p><p>Register or Login to the docker registry server</p><p>注册或者登陆一个 docker 源服务器</p></li><li><p><strong>logout</strong></p><p>Log out from a Docker registry server</p><p>从当前 Docker registry 退出</p></li><li><p><strong>logs</strong></p><p>Fetch the logs of a container</p><p>输出当前容器日志信息</p></li><li><p><strong>port</strong></p><p>Lookup the public-facing port which is NAT-ed to PRIVATE_PORT</p><p>查看映射端口对应的容器内部源端口</p></li><li><p><strong>pause</strong></p><p>Pause all processes within a container</p><p>暂停容器</p></li><li><p><strong>ps</strong></p><p>List containers</p><p>列出容器列表</p></li><li><p><strong>pull</strong></p><p>Pull an image or a repository from the docker registry server</p><p>从 docker 镜像源服务器拉取指定镜像或者库镜像</p></li><li><p><strong>push</strong></p><p>Push an image or a repository to the docker registry server</p><p>推送指定镜像或者库镜像至 docker 源服务器</p></li><li><p><strong>restart</strong></p><p>Restart a running container</p><p>重启运行的容器</p></li><li><p><strong>rm</strong></p><p>Remove one or more containers</p><p>移除一个或者多个容器</p></li><li><p><strong>rmi</strong></p><p>Remove one or more images</p><p>移除一个或多个镜像 [无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</p></li><li><p><strong>run</strong></p><p>Run a command in a new container</p><p>创建一个新的容器并运行一个命令</p></li><li><p><strong>save</strong></p><p>Save an image to a tar archive</p><p>保存一个镜像为一个 tar 包 [对应 load]</p></li><li><p><strong>search</strong></p><p>Search for an image on the Docker Hub</p><p>在 docker hub 中搜索镜像</p></li><li><p><strong>start</strong></p><p>Start a stopped containers</p><p>启动容器</p></li><li><p><strong>stop</strong></p><p>Stop a running containers</p><p>停止容器</p></li><li><p><strong>tag</strong></p><p>Tag an image into a repository</p><p>给源中镜像打标签</p></li><li><p><strong>top</strong></p><p>Lookup the running processes of a container</p><p>查看容器中运行的进程信息</p></li><li><p><strong>unpause</strong></p><p>Unpause a paused container</p><p>取消暂停容器</p></li><li><p><strong>version</strong></p><p>Show the docker version information</p><p>查看 docker 版本号</p></li><li><p><strong>wait</strong></p><p>Block until a container stops, then print its exit code</p><p>截取容器停止时的退出状态值</p></li></ul><h1 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker 镜像</h1><h2 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h2><p><strong>镜像</strong>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境 (包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是 image 镜像文件。</p><p>只有通过这个镜像文件才能生成 Docker 容器实例 (类似 Java 中 new 出来一个对象)。</p><h2 id="镜像的分层"><a href="#镜像的分层" class="headerlink" title="镜像的分层"></a>镜像的分层</h2><p>以 <code>docker pull</code> 命令为例子，在下载的过程中可以看到 docker 的镜像好像是在一层一层的下载</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531143124.png" alt="image-20220531143124176"></p><h2 id="UnionFS（联合文件系统）"><a href="#UnionFS（联合文件系统）" class="headerlink" title="UnionFS（联合文件系统）"></a>UnionFS（联合文件系统）</h2><p>UnionFS（联合文件系统）：Union 文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，<strong>它支持对文件系统的修改作为一次提交来一层层的叠加</strong>，同时可以将不同目录挂载到同一个虚拟文件系统下 (unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。<strong>镜像可以通过分层来进行继承</strong>，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><strong>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</strong></p><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker 镜像加载原理</h2><p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。</p><p>bootfs (boot file system) 主要包含 bootloader 和 kernel, bootloader 主要是引导加载 kernel, Linux 刚启动时会加载 bootfs 文件系统，<strong>在 Docker 镜像的最底层是引导文件系统 bootfs</strong>。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p><p>rootfs (root file system) ，在 bootfs 之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，Centos 等等。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531143603.png" alt="image-20220531143603105"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>为什么 docker 相较于虚拟机来说小很多？</strong></p><p>对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的 linux 发行版，bootfs 基本是一致的，rootfs 会有差别，因此不同的发行版可以公用 bootfs。</p><p><strong>为什么 Docker 镜像要采用这种分层结构？</strong></p><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p><p>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；</p><p>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h2 id="重点理解"><a href="#重点理解" class="headerlink" title="重点理解"></a>重点理解</h2><p><strong>Docker 镜像层都是只读的，容器层是可写的</strong></p><p>当容器启动时，一个新的可写层被加载到镜像的顶部。 这一层通常被称作 “容器层”，“容器层” 之下的都叫 “镜像层”。</p><p>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作 “容器层”，“容器层” 之下的都叫 “镜像层”。</p><p>所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531144037.png" alt="image-20220531144037237"></p><h2 id="commit操作案例"><a href="#commit操作案例" class="headerlink" title="commit操作案例"></a>commit 操作案例</h2><p>作用：提交容器副本使之成为一个新的镜像</p><p><code>docker commit -m="提交的描述信息" -a="作者" 容器ID 要创建的目标镜像名:[标签名]</code></p><p><strong>案例演示 centos 安装 vim</strong></p><ul><li><p>从 Hub 上下载 centos 镜像到本地并成功运行，报错显示未联网</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531150853.png" alt="image-20220531150853321"></p></li><li><p>解决无法联网问题</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 假设 sysctl.conf 文件不存在</span><br>vi /etc/sysctl.conf<br><span class="hljs-comment">## 在 sysctl.conf 中增加 net.ipv4.ip_forward = 1 , 表示允许进行路由转发</span><br>net.ipv4.ip_forward = 1<br><span class="hljs-comment">## 加载参数到内核</span><br>sysctl -p<br><span class="hljs-comment">## 退出容器</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-comment">## 重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></tbody></table></figure></li><li><p>原始的默认 centos 镜像是不带着 vim 命令</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531150908.png" alt="image-20220531150908956"></p></li><li><p>外网连通的情况下，安装 vim：<code>yum install vim</code></p></li><li><p>安装完成后，commit 我们自己的新镜像</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531153022.png" alt="image-20220531153022737"></p></li><li><p>启动新镜像并和原来的对比</p><ul><li>官网是默认下载的 centos 没有 vim 命令</li><li>我们自己 commit 构建的镜像，新增加了 vim 功能，可以成功使用</li></ul></li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>Docker 中的镜像分层，<strong>支持通过扩展现有镜像，创建新的镜像</strong>。类似 Java 继承于一个 Base 基础类，自己再按需扩展。</p><p>新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层</p><h1 id="将本地镜像推送到阿里云"><a href="#将本地镜像推送到阿里云" class="headerlink" title="将本地镜像推送到阿里云"></a>将本地镜像推送到阿里云</h1><ul><li><p>打开<a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">阿里云开发者平台</a></p></li><li><p>创建仓库镜像</p><ul><li><p>选择容器镜像服务</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531153930.png" alt="image-20220531153930394"></p></li><li><p>创建个人版仓库，设置密码、命名空间、仓库名字、公开仓库</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531154320.png" alt="image-20220531154320849"></p></li></ul></li><li><p>在管理页面获得脚本</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531154914.png" alt="image-20220531154914613"></p></li><li><p>根据脚本命令上传本地镜像</p><ul><li><p>首先登录</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531155818.png" alt="image-20220531155818378"></p></li><li><p>选择 <strong>ID 为 3b15ce0005bd</strong> 的镜像上传</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531160346.png" alt="image-20220531160346109"></p></li></ul></li></ul><h1 id="将阿里云上的镜像下载到本地"><a href="#将阿里云上的镜像下载到本地" class="headerlink" title="将阿里云上的镜像下载到本地"></a>将阿里云上的镜像下载到本地</h1><p>使用阿里云脚本拉取镜像</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531195928.png" alt="image-20220531195928935"></p><h1 id="本地镜像发布到私有库"><a href="#本地镜像发布到私有库" class="headerlink" title="本地镜像发布到私有库"></a>本地镜像发布到私有库</h1><ul><li><p>下载镜像 Docker Registry</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531211835.png" alt="image-20220531211835646"></p></li><li><p>下载成功</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220531212050.png" alt="image-20220531212050828"></p></li><li><p>运行私有库 Registry，相当于本地有个私有 Docker hub</p><p>默认情况，仓库被创建在容器的 /var/lib/registry 目录下，建议自行用容器卷映射，方便于宿主机联调</p><p><code>docker run -d -p 5000:5000 -v /awei/myregistry/:/tmp/registry --privileged=true registry</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601002833.png" alt="image-20220601002833851"></p></li><li><p>创建一个新镜像</p><p><code>docker run -it centos:7 bash</code></p></li><li><p>centos 安装 ifconfig 命令，因为原始的 centos 镜像不带 ifconfig 命令</p><p><code>yum install net-tools</code></p></li><li><p>测试</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601011901.png" alt="image-20220601011901821"></p></li><li><p>安装完成后，commit 新镜像</p><p><code>docker commit -m="提交的描述信息" -a="作者" 容器ID 要创建的目标镜像名:[标签名]</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601014235.png" alt="image-20220601014235831"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601014205.png" alt="image-20220601014205893"></p></li><li><p>启动新镜像并和原来的对比</p><ul><li>官网是默认下载的 Ubuntu 没有 ifconfig 命令</li><li> commit 构建的新镜像，新增加了 ifconfig 功能，可以成功使用</li></ul></li><li><p> curl 验证私服库上有什么镜像</p><p><code>curl -XGET http://宿主机IP:5000/v2/_catalog</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601012909.png" alt="image-20220601012909744"></p><p>发现没有任何镜像</p></li><li><p>将新的镜像修改成符合私服规范的 Tag</p><p><code>docker tag 镜像:Tag Host:Port/Repository:Tag</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601014911.png" alt="image-20220601014911105"></p></li><li><p>修改配置文件使之支持 http</p><p><code>vim /etc/docker/daemon.json</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">{<br>  <span class="hljs-string">"registry-mirrors"</span>: [<span class="hljs-string">"阿里云镜像加速网址"</span>],<br>  <span class="hljs-string">"insecure-registries"</span>: [<span class="hljs-string">"宿主机IP:5000"</span>]<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601015242.png" alt="image-20220601015241995"></p><p>因为 docker 默认不允许 http 方式推送镜像，通过配置选项来取消这个限制。====&gt; <strong>修改完后如果不生效，建议重启 docker</strong>。</p></li><li><p>push 推送到私服库</p><p><code>docker push 宿主机IP:5000/Repository:Tag</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601015905.png" alt="image-20220601015905433"></p></li><li><p>curl 验证私服库上有什么镜像</p><p><code>curl -XGET http://宿主机IP:5000/v2/_catalog</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601020037.png" alt="image-20220601020037841"></p></li><li><p>pull 到本地并运行</p><p><code>docker pull 宿主机IP:5000/Repository:Tag</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601020442.png" alt="image-20220601020442530"></p><p>运行</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601020653.png" alt="image-20220601020653585"></p></li></ul><h1 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker 容器数据卷</h1><h2 id="首先来个坑"><a href="#首先来个坑" class="headerlink" title="首先来个坑"></a>首先来个坑</h2><p>Docker 挂载主机目录访问如果出现 <strong>cannot open directory : Permission denied</strong></p><p>解决办法：在挂载目录后多加一个 <code>--privileged=true</code> 参数即可</p><p><strong>为什么</strong></p><p>CentOS7 安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，在 SELinux 里面挂载目录被禁止掉了，如果要开启，我们一般使用 <code>--privileged=true</code> 命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container 内的 root 拥有真正的 root 权限，否则，container 内的 root 只是外部的一个普通用户权限。</p><h2 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h2><p>卷就是目录或文件，存在于一个或多个容器中，由 docker 挂载到容器，但不属于联合文件系统，因此能够绕过 Union File System 提供一些用于持续存储或共享数据的特性：</p><p>卷的设计目的就是<strong>数据的持久化</strong>，完全独立于容器的生存周期，因此 Docker 不会在容器删除时删除其挂载的数据卷。</p><p>一句话：<strong>将 docker 容器内的数据保存进宿主机的磁盘中</strong>。</p><ul><li><p>运行一个带有容器卷存储功能的容器实例</p><p><code>docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录   镜像名</code></p></li></ul><h2 id="能干嘛-1"><a href="#能干嘛-1" class="headerlink" title="能干嘛"></a>能干嘛</h2><p>将运用与运行的环境打包镜像，run 后形成容器实例运行 ，但是我们对数据的要求希望是<strong>持久化的</strong></p><p>Docker 容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。</p><p><strong>为了能保存数据在 docker 中我们使用卷</strong>。</p><ul><li>特点<ul><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接实时生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ul></li></ul><h2 id="数据卷案例"><a href="#数据卷案例" class="headerlink" title="数据卷案例"></a>数据卷案例</h2><ul><li><p>命令：<code>docker run -it -v /宿主机目录:/容器内目录 镜像名 命令</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601145340.png" alt="image-20220601145340290"></p><p>可以看到 <code>/tmp/docker_data</code> 目录底下没有任何文件</p></li><li><p>创建一个文件</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601145518.png" alt="image-20220601145518697"></p></li><li><p>返回宿主机查看 <code>/tmp/host_data</code> 目录，发现文件已经同步</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601145634.png" alt="image-20220601145634656"></p></li><li><p>在主机的 <code>/tmp/host_data</code> 目录下创建新的文件</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601145835.png" alt="image-20220601145835072"></p></li><li><p>返回容器内 <code>/tmp/docker_data</code> 目录，发现文件已经同步</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601145953.png" alt="image-20220601145953960"></p></li><li><p>使用 <code>docker inspect 容器ID</code> 查看挂载情况</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220601150115.png" alt="image-20220601150115822"></p></li><li><p>容器和宿主机之间数据共享</p><ul><li>docker 修改，主机同步获得 </li><li>主机修改，docker 同步获得</li><li> docker 容器 stop，主机修改，docker 容器重启数据也是同步的</li></ul></li></ul><h2 id="读写规则映射添加说明"><a href="#读写规则映射添加说明" class="headerlink" title="读写规则映射添加说明"></a>读写规则映射添加说明</h2><ul><li><p>以上案例默认情况下，权限为：<strong>rw（read + write）</strong></p><p><code>docker run -it -v /宿主机目录:/容器内目录:rw 镜像名 命令</code></p></li><li><p><strong>只读 ro（read only）</strong>： 容器实例内部被限制，只能读取不能写，此时如果宿主机写入内容，可以同步给容器内，容器可以读取到</p><p><code>docker run -it -v /宿主机目录:/容器内目录:ro 镜像名 命令</code></p></li></ul><h2 id="卷的继承和共享"><a href="#卷的继承和共享" class="headerlink" title="卷的继承和共享"></a>卷的继承和共享</h2><ul><li><p>容器 1 完成和宿主机的映射</p><p><code>docker run -it --privileged=true -v /宿主机目录:/容器目录 --name 容器1 镜像名</code></p></li><li><p>容器 2 继承容器 1 的卷规则</p><p><code>docker run -it --privileged=true --volumes-from 父类名字 --name 容器2 镜像名</code></p></li><li><p><strong>可以发现两个容器上拥有相同的文件以及对宿主机的同步</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插件测试</title>
    <link href="/posts/42142/"/>
    <url>/posts/42142/</url>
    
    <content type="html"><![CDATA[<h1 id="遮盖效果"><a href="#遮盖效果" class="headerlink" title="遮盖效果"></a>遮盖效果</h1><p><code>npm install hexo-spoiler --save</code><br>站点根目录配置填写</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spoiler:</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">blur</span> <span class="hljs-comment"># 或者box</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">black</span> <span class="hljs-comment"># 仅当 style 为 box 时起效</span><br>  <span class="hljs-attr">p:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 没懂啥意思，不管它</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">{% <span class="hljs-name">spoiler</span> option:value text... %}</span><br></code></pre></td></tr></tbody></table></figure><p><code>{% spoiler 默认配置效果 %}</code> → <!-- spoiler-1ffd9:black -->  <span class="spoiler" onclick="this.classList.toggle('spoiler')">    <span class="spoiler-blur spoiler-1ffd9">默认配置效果</span>  </span><br><code>{% spoiler style:blur 糊里糊涂 %}</code> → <!-- spoiler-1ffd9:black -->  <span class="spoiler" onclick="this.classList.toggle('spoiler')">    <span class="spoiler-blur spoiler-1ffd9">糊里糊涂</span>  </span><br><code>{% spoiler style:box 黑不溜秋 %}</code> → <!-- spoiler-1ffd9:black -->  <span class="spoiler" onclick="this.classList.toggle('spoiler')">    <span class="spoiler-box spoiler-1ffd9">黑不溜秋</span>  </span><br><code>{% spoiler style:box color:red 红光闪闪 %}</code> → <!-- spoiler-bda96:red -->  <span class="spoiler" onclick="this.classList.toggle('spoiler')">    <span class="spoiler-box spoiler-bda96">红光闪闪</span>  </span></p><h1 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h1><p><code>npm install hexo-tag-common</code></p><div class="tag-common tabs" id="总标题"><ul class="nav-tabs"><li class="tab active"><a data-target="总标题-1">总标题 1</a></li><li class="tab"><a data-target="总标题-2">总标题 2</a></li><li class="tab"><a data-target="总标题-3">总标题 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="总标题-1"><p>Tab 1 的正文</p></div><div class="tab-pane" id="总标题-2"><p>Tab 2 的正文</p></div><div class="tab-pane" id="总标题-3"><p>Tab 3 的正文</p></div></div></div><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">{% <span class="hljs-name">tabs</span> 总标题 %}</span><span class="language-xml"> # 如果下方的 tabs 没有自定义标题则显示为 “总标题1”、“总标题2”……</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab --&gt;</span></span><br><span class="language-xml">Tab 1 的正文</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab --&gt;</span></span><br><span class="language-xml">Tab 2 的正文</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab --&gt;</span></span><br><span class="language-xml">Tab 3 的正文</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">{% <span class="hljs-name">endtabs</span> %}</span><br></code></pre></td></tr></tbody></table></figure><h1 id="盘古之白"><a href="#盘古之白" class="headerlink" title="盘古之白"></a>盘古之白</h1><p><code>npm install hexo-pangu</code><br><code>hexo clean</code><br>送给所有中英混输必须加空格的强迫症患者。<br>（但愿跟其它插件不存在冲突）</p><h1 id="死链检查"><a href="#死链检查" class="headerlink" title="死链检查"></a>死链检查</h1><p><code>npm install hexo-broken-links-checker --save-dev</code><br><code>npx hexo check-links</code><br>喝杯茶等一会儿……</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">WARN  The following links are broken:<br>   - https:<span class="hljs-regexp">//</span><br></code></pre></td></tr></tbody></table></figure><p>默认配置就够了，偶尔用一次</p><script>   <%- toc(page.content) %></script>]]></content>
    
    
    <categories>
      
      <category>杂文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/posts/27273/"/>
    <url>/posts/27273/</url>
    
    <content type="html"><![CDATA[<h1 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL 数据库</h1><h2 id="NoSQL-数据库概述"><a href="#NoSQL-数据库概述" class="headerlink" title="NoSQL 数据库概述"></a>NoSQL 数据库概述</h2><p>NoSQL (Not Only SQL)，即 <strong>“不仅仅是 SQL”</strong>，泛指非关系型的数据库。</p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的 key-value 模式存储。因此大大的增加了数据库的扩展能力。</p><ul><li>不遵循 SQL 标准</li><li>不支持 ACID</li><li> 远超于 SQL 的性能</li></ul><h2 id="NoSQL-适用场景"><a href="#NoSQL-适用场景" class="headerlink" title="NoSQL 适用场景"></a>NoSQL 适用场景</h2><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性的</li></ul><h2 id="NoSQL-不适用场景"><a href="#NoSQL-不适用场景" class="headerlink" title="NoSQL 不适用场景"></a>NoSQL 不适用场景</h2><ul><li>需要事务支持</li><li>基于 sql 的结构化查询存储，处理复杂的关系，需要<strong>即席</strong>查询。</li><li><strong>用不着 sql 的和用了 sql 也不行的情况，请考虑用 NoSQL</strong></li></ul><h2 id="常见的-NoSQL-数据库"><a href="#常见的-NoSQL-数据库" class="headerlink" title="常见的 NoSQL 数据库"></a>常见的 NoSQL 数据库</h2><ul><li>Memcache<ul><li> 很早就已经出现的 NoSql 数据库</li><li>数据都在内存中，一般<strong>不持久化</strong></li><li>支持简单的 key-value 模式，<strong>支持类型单一</strong></li><li>一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</li></ul></li><li> Redis<ul><li> 几乎覆盖了 Memcached 的绝大部分功能、</li><li>数据都在内存中，<strong>支持持久化</strong>，主要用作备份恢复</li><li>除了支持简单的 key-value 模式，还<strong>支持多种数据结构的存储</strong>，比如 list、set、hash、zset 等。</li><li>一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</li></ul></li><li> MongoDB<ul><li> 高性能、开源、模式自由 (schema free) 的<strong>文档型数据库</strong></li><li>数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘</li><li>虽然是 key-value 模式，但是对 value（尤其是 <strong>json</strong>）提供了丰富的查询功能</li><li>支持二进制数据及大型对象</li><li>可以根据数据的特点<strong>替代 RDBMS</strong> ，成为独立的数据库。或者配合 RDBMS，存储特定的数据。</li></ul></li></ul><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis-概述"><a href="#Redis-概述" class="headerlink" title="Redis 概述"></a>Redis 概述</h2><ol><li>Redis 是一个<strong>开源</strong>的 <strong>key-value</strong> 存储系统。</li><li>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 <strong>string</strong> (字符串)、<strong>list</strong> (链表)、<strong>set</strong> (集合)、<strong>zset</strong> (sorted set – 有序集合) 和 <strong>hash</strong>（哈希类型）。</li><li>这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是<strong>原子性</strong>的。</li><li>在此基础上，Redis 支持各种不同方式的<strong>排序</strong>。</li><li>与 memcached 一样，为了保证效率，数据都是<strong>缓存在内存</strong>中。</li><li>区别的是 Redis 会<strong>周期性</strong>的把<strong>更新的数据写入磁盘</strong>或者把修改操作写入追加的记录文件。</li><li>并且在此基础上实现了 <strong>master-slave (主从)</strong> 同步。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><p>配合关系型数据库做高速缓存</p><ul><li>高频次，热门访问的数据，降低数据库 IO</li><li> 分布式架构，做 session 共享</li></ul></li><li><p>多样的数据结构存储持久化数据</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220405004046.png" alt="image-20220405004046157"></p></li></ul><h2 id="Redis安装步骤"><a href="#Redis安装步骤" class="headerlink" title="Redis安装步骤"></a>Redis 安装步骤</h2><ol><li><p>进入 <a href="https://github.com/redis/redis/releases/tag/6.2.6">Redis 下载地址</a>，下载 6.2.6 版本 Redis。</p></li><li><p>使用 ftp 软件连接到 Linux 操作系统，将 Redis 压缩文件上传到 /opt 目录下</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220405231220.png" alt="image-20220405231220319"></p></li><li><p>使用 ssh 工具连接到你的 Linux 系统，进入 <code>/opt</code> 目录</p></li><li><p>下载安装最新版的 gcc 编译器（下载过程中出现依赖更新提示统统输入 <strong>y</strong> 即可）</p><ul><li><p>使用 yum 命令进行安装，命令为：<code>yum install -y gcc</code></p></li><li><p>最后查看版本得知是否安装成功，命令为：<code>gcc --version</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220405231624.png" alt="image-20220405231624495"></p></li></ul></li><li><p>解压 redis 压缩文件</p><p>命令为：<code>tar -zxvf redis-6.2.6.tar.gz</code></p></li><li><p>进入解压好的 redis 文件，执行 make 命令以及 make install 命令进行编译安装</p><p>命令为：<code>cd redis-6.2.6</code> ，然后使用 <code>make &amp;&amp; make install </code>。</p></li><li><p>在 /usr/local/bin (<strong>Redis 安装目录</strong>) 中使用 <code>ls</code> , 出现以下即为安装成功</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220405232430.png" alt="image-20220405232430778"></p></li><li><p>在这步如果出现报错，首先检查有无安装最新版 gcc，然后运行 <code>make distclean</code>，最后重新运行 <code>make &amp;&amp; make install</code></p></li></ol><h2 id="Redis安装目录"><a href="#Redis安装目录" class="headerlink" title="Redis安装目录"></a>Redis 安装目录</h2><p>Redis 数据库成功安装后，<strong>默认安装目录为：/usr/local/bin</strong></p><p>查看默认安装目录：</p><blockquote><p>redis-benchmark：性能测试工具，可以在自己本子运行，看看自己本子性能如何<br>redis-check-aof：修复有问题的 AOF 文件，rdb 和 aof 后面讲<br>redis-check-dump：修复有问题的 dump.rdb 文件<br>redis-sentinel：Redis 集群使用<br><strong>redis-server</strong>：Redis 服务器启动命令<br><strong>redis-cli</strong>：客户端，操作入口</p></blockquote><h2 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动 Redis</h2><h3 id="前台启动（不推荐）"><a href="#前台启动（不推荐）" class="headerlink" title="前台启动（不推荐）"></a>前台启动（不推荐）</h3><p>前台启动，命令行窗口不能关闭，否则服务器停止！</p><p>在 <strong>Redis 安装目录</strong>下，启动命令：<code>redis-server</code></p><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><ol><li><p>将 redis.conf 复制到其他目录下：<code>cp /opt/redis-6.2.6/redis.conf /etc/redis.conf</code></p></li><li><p>修改 redis.conf (257 行) 文件将里面的 <code>daemonize no</code> 改成 <code>yes</code>，让服务在后台启动</p><p>命令为：<code>vim /etc/redis.conf</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220405233453.png" alt="image-20220405233453761"></p></li><li><p>启动 Redis：首先进入 <code>cd /usr/local/bin</code> 目录，然后执行命令：<code>redis-server /etc/redis.conf</code></p></li><li><p>查看是否在运行：<code>ps -ef |grep redis</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220406010113.png" alt="image-20220406010113320"></p></li><li><p>用客户端访问：<code>redis-cli</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220406010225.png" alt="image-20220406010225853"></p></li><li><p>测试验证： <code>ping</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220406010251.png" alt="image-20220406010251651"></p></li><li><p>退出客户端：<code>exit</code></p></li><li><p>关闭 redis 后台：</p><p>关闭后台 <code>redis-cli shutdown</code> 或者是关闭进程号 <code>kill -9 进程号</code></p></li></ol><h2 id="Redis相关知识"><a href="#Redis相关知识" class="headerlink" title="Redis相关知识"></a>Redis 相关知识</h2><ul><li><p>默认 16 个数据库，类似数组下标从 0 开始，初始<strong>默认使用 0 号库</strong></p></li><li><p>使用命令 <code>select &lt;dbid&gt;</code> 来切换数据库。如: <code>select 8</code></p></li><li><p>统一密码管理，所有库同样密码。</p></li><li><p><code>dbsize</code> 查看当前数据库的 key 的数量</p></li><li><p><code>flushdb</code><strong>清空当前库</strong></p></li><li><p><code>flushall</code><strong>通杀全部库</strong></p></li><li><p><strong>Redis 是单线程 + 多路 IO 复用技术</strong>，与 Memcache 三点不同：支持多数据类型，支持持久化，单线程 + 多路 IO 复用</p><blockquote><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用 select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p></blockquote></li><li><p>与 Memcache 三点不同: <strong>支持多数据类型，支持持久化，单线程 + 多路 IO 复用</strong></p></li></ul><h1 id="Redis常用五大数据类型"><a href="#Redis常用五大数据类型" class="headerlink" title="Redis常用五大数据类型"></a>Redis 常用五大数据类型</h1><h2 id="键（key）"><a href="#键（key）" class="headerlink" title="键（key）"></a>键（key）</h2><ul><li>查看当前库所有 <code>&lt;key&gt;</code>（匹配：keys *1）：<code>key *</code></li><li>判断某个 <code>&lt;key&gt;</code> 是否存在：<code>exists &lt;key&gt;</code></li><li>查看你的 <code>&lt;key&gt;</code> 是什么类型：<code>type &lt;key&gt;</code></li><li>删除指定的 <code>&lt;key&gt;</code> 数据：<code>del &lt;key&gt;</code></li><li>从当前数据库中随机返回一个 <code>&lt;key&gt;</code>：<code>randomkey</code></li><li>修改 key 的名称：<code>rename &lt;key&gt; &lt;newkey&gt;</code></li><li>仅当 <code>&lt;newkey&gt;</code> 不存在时，将 <code>&lt;key&gt;</code> 改名为 <code>&lt;newkey&gt;</code>：<code>renamenx &lt;key&gt; &lt;newkey&gt;</code></li><li>迭代数据库中的数据库键：<code>scan cursor [match pattern] [count counts]</code></li><li>根据 <code>&lt;value&gt;</code> 选择非阻塞删除 (<strong>仅将 keys 从 keyspace 元数据中删除，真正的删除会在后续异步操作</strong>)：<code>unlink &lt;key&gt;</code></li><li>为给定的 <code>&lt;key&gt;</code> 设置过期时间，例如 10 秒：<code>expire &lt;key&gt; 10 </code></li><li>用于为 key 设置过期时间。 不同在于 expireat 命令接受的时间参数是 UNIX 时间戳：<code>expireat &lt;key&gt; timestamp</code></li><li>设置 key 的过期时间以毫秒计：<code>pexpire &lt;key&gt; milliseconds</code></li><li>设置 key 过期时间的时间戳 (unix timestamp) 以毫秒计：<code>pexpireat &lt;key&gt; milliseconds-timestamp</code></li><li>查看还有多少秒过期，-1 表示永不过期，-2 表示已过期：<code>ttl &lt;key&gt;</code></li><li>以<strong>毫秒</strong>查看还有多少秒过期：<code>pttl &lt;key&gt;</code></li><li>序列化给定 <code>&lt;key&gt;</code> ，并返回被序列化的值：<code>dump &lt;key&gt;</code></li><li>查找所有符合给定模式 (pattern) 的 key ：<code>keys &lt;pattern&gt;</code></li><li>将当前数据库的 key 移动到给定的数据库 db 当中：<code>move &lt;key&gt; &lt;db&gt;</code></li><li>移除 <code>&lt;key&gt;</code> 的过期时间，<code>&lt;key&gt;</code> 将持久保持：<code>persist &lt;key&gt;</code></li><li><code>select</code> 命令：切换数据库<br><code>dbsize</code> 命令：查看当前数据库的 key 的数量<br><code>flushdb</code> 命令：清空当前库<br><code>flushall</code> 命令：通杀全部库</li></ul><h2 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>String 是 Redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p><p>String 类型是<strong>二进制安全的</strong>。意味着 Redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。</p><p>String 类型是 Redis 最基本的数据类型，一个 Redis 中字符串 value 最多可以是 <strong>512M</strong></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>添加键值对：<code>set &lt;key&gt; &lt;value&gt;</code></li><li>查询对应键值：<code>get &lt;key&gt;</code></li><li>将给定的 <code>&lt;value&gt;</code> 追加到原值的末尾：<code>append &lt;key&gt; &lt;value&gt;</code></li><li>获得值的长度：<code>strlen &lt;key&gt;</code></li><li>只有在 <code>&lt;key&gt;</code> 不存在时设置 key 的值：<code>setnx &lt;key&gt; &lt;value&gt;</code></li><li>将 <code>&lt;key&gt;</code> 中储存的数字值增 1，<strong>只能对数字值操作</strong>，如果为空，新增值为 1：<code>incr &lt;key&gt;</code></li><li>将 <code>&lt;key&gt;</code> 中储存的数字值减 1，<strong>只能对数字值操作</strong>，如果为空，新增值为 -1：<code>decr &lt;key&gt;</code></li><li>将 <code>&lt;key&gt;</code> 中储存的数字值增减，自定义步长：<code>incrby / decrby &lt;key&gt; &lt;数字值&gt;</code></li><li>将 <code>&lt;key&gt;</code> 所储存的值加上给定的浮点增量值：<code>incrbyfloat &lt;key&gt; &lt;数字值&gt;</code></li><li>同时设置一个或多个 key-value 对：<code>mset &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt;...</code></li><li>同时获取一个或多个 <code>&lt;value&gt;</code>：<code>mget &lt;key1&gt; &lt;key2&gt; &lt;key3&gt;...</code></li><li>同时设置一个或多个 key-value 对，当且仅当所有给定 <code>&lt;key&gt;</code> 都不存在 (<strong>原子性，有一个失败则都失败</strong>)：<code>msetnx &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt;...</code></li><li>获得值的范围，类似 java 中的 substring，前包，后包：<code>getrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;</code></li><li>用 <code>&lt;value&gt;</code> 覆写 <code>&lt;key&gt;</code> 所储存的字符串值，从起始位置开始 (索引从 0 开始)：<code>setrange &lt;key&gt; &lt;起始位置&gt; &lt;value&gt;</code></li><li>设置键值的同时，设置过期时间，单位秒：<code>setex &lt;key&gt; &lt;过期时间&gt; &lt;value&gt;</code></li><li>以毫秒为单位设置 key 的生存时间：<code>psetex &lt;key&gt; &lt;过期时间&gt; &lt;value&gt;</code></li><li>以新换旧，设置了新值同时获得旧值：<code>getset &lt;key&gt; &lt;value&gt;</code></li><li>对 <code>&lt;key&gt;</code> 所储存的字符串值，设置或清除指定偏移量上的位 (bit)：<code>setbit &lt;key&gt; &lt;offset&gt; &lt;value&gt;</code></li><li>对 <code>&lt;key&gt;</code> 所储存的字符串值，获取指定偏移量上的位 (bit)：<code>getbit &lt;key&gt; &lt;offset&gt;</code></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>String 的数据结构为简单动态字符串 (Simple Dynamic String, 缩写 SDS)。是可以修改的字符串，内部结构实现上类似于 Java 的 <strong>ArrayList</strong>，采用预分配冗余空间的方式来减少内存的频繁分配。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220407014949.png" alt="image-20220407014949648"></p><p>如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。<strong>当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</strong></p><h2 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><strong>单键多值</strong></p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>它的底层实际是个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220407015208.png" alt="image-20220407015208895"></p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止：<code>BLPOP &lt;key1&gt; &lt;key2&gt;... &lt;过期时间&gt;</code></p></li><li><p>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止：<code>BRPOP &lt;key1&gt; &lt;key2&gt;... &lt;过期时间&gt;</code></p></li><li><p>从 <code>&lt;key1&gt;</code> 中弹出一个值，将弹出的元素插入到 <code>&lt;key2&gt;</code> 中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止：<code>BRPOPLPUSH &lt;key1&gt; &lt;key2&gt; &lt;过期时间&gt;</code></p></li><li><p>从左边 / 右边插入一个或多个值：<code>lpush/rpush &lt;key&gt; &lt;value1&gt; &lt;value2&gt; &lt;value3&gt; ....</code></p></li><li><p>将一个值插入到已存在的列表头部 / 尾部，返回列表长度：<code>lpushx/rpushx &lt;key&gt; &lt;value&gt;</code></p></li><li><p>保留指定区间内的元素，不在指定区间之内的元素都将被删除：<code>ltrim &lt;key&gt; &lt;start&gt; &lt;stop&gt;</code></p></li><li><p>从左边 / 右边吐出一个值 (<strong>值在键在，值光键亡</strong>)：<code>lpop/rpop &lt;key&gt;</code></p></li><li><p>从 <code>&lt;key1&gt;</code> 列表右边吐出一个值，插到 <code>&lt;key2&gt;</code> 列表左边：<code>rpoplpush &lt;key1&gt; &lt;key2&gt;</code></p></li><li><p>按照索引下标获得元素 (从左到右)：<code>lrange &lt;key&gt; &lt;start&gt; &lt;stop&gt;</code></p><p>例如：<code>lrange mylist 0 -1</code>  其中 0 表示左边第一个，-1 表示右边第一个，（<strong>0 -1 表示获取所有</strong>）</p></li><li><p>按照索引下标获得元素 (从左到右)：<code>lindex &lt;key&gt; &lt;index&gt;</code></p></li><li><p>获得列表长度：<code>llen &lt;key&gt;</code></p></li><li><p>在 <code>&lt;value&gt;</code> 的<strong>前面 / 后面</strong>插入 <code>&lt;newvalue&gt;</code> 的值：<code>linsert &lt;key&gt; before/after &lt;value&gt; &lt;newvalue&gt;</code></p></li><li><p>从左边删除 n 个值为 <code>&lt;value&gt;</code> 的值 (从左到右)：<code>lrem &lt;key&gt; &lt;n&gt; &lt;value&gt;</code></p></li><li><p>将列表 <code>&lt;key&gt;</code> 下标为 index 的值替换成 value：<code>lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</code></p></li></ul><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>List 的数据结构为<strong>快速链表 quickList</strong>。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 <strong>ziplist</strong>，也即是<strong>压缩列表</strong>。</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成 quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220407021204.png" alt="image-20220407021204491"></p><p>Redis 将<strong>链表和 ziplist 结合起来组成了 quicklist</strong>。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h2 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>Redis set 对外提供的功能与 list 类似是一个列表的功能，特殊之处在于 set 是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。</p><p>Redis 的 Set 是 string 类型的无序集合。它底层其实是<strong>一个 value 为 null 的 hash 表</strong>，所以添加，删除，查找的 ** 复杂度都是 O (1)**。</p><p>一个算法，随着数据的增加，执行时间的长短，如果是 O (1)，数据增加，查找数据的时间不变</p><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略：<code>sadd &lt;key&gt; &lt;value1&gt; &lt;value2&gt; .....</code></li><li>取出该集合的所有值：<code>smembers &lt;key&gt;</code></li><li>判断集合 <code>&lt;key&gt;</code> 是否为含有该 <code>&lt;value&gt;</code> 值，有返回 1，没有返回 0：<code>sismember &lt;key&gt;&lt;value&gt;</code></li><li>返回该集合的元素个数：<code>scard &lt;key&gt;</code></li><li>删除集合中的某个元素：<code>srem &lt;key&gt; &lt;value1&gt; &lt;value2&gt; ....</code></li><li><strong>随机从该集合中移除并返回一个值</strong>：<code>spop &lt;key&gt;</code></li><li>随机从该集合中取出 n 个值。不会从集合中删除：<code>srandmember &lt;key&gt; &lt;n&gt;</code></li><li>把集合中一个值从一个集合移动到另一个集合：<code>smove &lt;source&gt; &lt;destination&gt; &lt;value&gt;</code></li><li>返回所有集合的<strong>交集</strong>元素：<code>sinter &lt;key1&gt; &lt;key2&gt;...</code></li><li>返回给定所有集合的交集并存储在 <code>&lt;destination&gt;</code> 中：<code>sinterstore &lt;destination&gt; &lt;key1&gt; &lt;key2&gt;...</code></li><li>返回所有集合的<strong>并集</strong>元素：<code>sunion &lt;key1&gt; &lt;key2&gt;...</code></li><li>所有给定集合的并集存储在 destination 集合中：<code>sunionstore &lt;destination&gt; &lt;key1&gt; &lt;key2&gt;...</code></li><li>返回第一个集合和其他集合的<strong>差集</strong>元素 (<code>&lt;key1&gt;</code> 中的，不包含 <code>&lt;key2&gt;</code> 中的)：<code>sdiff &lt;key1&gt; &lt;key2&gt;...</code></li><li>迭代集合中的元素：<code>sscan &lt;key&gt; cursor [match pattern] [count counts]</code></li></ul><h3 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h3><p>Set 数据结构是 dict 字典，字典是用哈希表实现的。</p><p>Java 中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。Redis 的 set 结构也是一样，它的内部也使用 hash 结构，所有的 value 都指向同一个内部值。</p><h2 id="哈希（Hash）"><a href="#哈希（Hash）" class="headerlink" title="哈希（Hash）"></a>哈希（Hash）</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>Redis hash 是一个键值对集合。</p><p>Redis hash 是一个 string 类型的 <strong>field</strong> 和 <strong>value</strong> 的映射表，hash 特别适合用于存储对象。</p><p>类似 Java 里面的 Map&lt;String,Object&gt;</p><p>用户 ID 为查找的 key，存储的 value 用户对象包含姓名，年龄，生日等信息，如果用普通的 key/value 结构来存储，主要有以下 2 种存储方式：</p><ol><li><p>每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220409134058.png" alt="image-20220409134058598"></p></li><li><p>用户 ID 数据冗余</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220409134141.png" alt="image-20220409134141235"></p></li></ol><p>而使用 hash 的情况下：</p><p><strong>通过 key (用户 ID) + field (属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220409134535.png" alt="image-20220409134535668"></p><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>给 <code>&lt;key&gt;</code> 集合中的 <code>&lt;field&gt;</code> 键赋值 <code>&lt;value&gt;</code>：<code>hset &lt;key&gt; &lt;field&gt; &lt;value&gt;</code></li><li>只有在字段 field 不存在时，<code>&lt;key&gt;</code> 集合中的 <code>&lt;field&gt;</code> 键赋值 <code>&lt;value&gt;</code>：<code>hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;</code></li><li>从 <code>&lt;key&gt;</code> 集合 <code>&lt;field&gt;</code> 取出 value：<code>hget &lt;key&gt; &lt;field&gt;</code></li><li>批量设置 hash 的值：<code>hmset &lt;key1&gt; &lt;field1&gt; &lt;value1&gt; &lt;field2&gt; &lt;value2&gt;...</code></li><li>批量获得 hash 的值：<code>hmget &lt;key&gt; &lt;field1&gt; &lt;field2&gt;...</code></li><li>查看哈希表 <code>&lt;key&gt;</code> 中，给定域 <code>&lt;field&gt;</code> 是否存在：<code>hexists &lt;key&gt; &lt;field&gt;</code></li><li>删除一个或多个哈希表字段：<code>hdel &lt;key&gt; &lt;field1&gt; &lt;field2&gt;</code></li><li>列出该 hash 集合的所有的 <code>&lt;field&gt;</code>：<code>hkeys &lt;key&gt;</code></li><li>列出该 hash 集合的所有 <code>&lt;value&gt;</code>：<code>hvals &lt;key&gt;</code></li><li>为哈希表 <code>&lt;key&gt;</code> 中的域 <code>&lt;field&gt;</code> 的值加上增量 <code>&lt;increment&gt;</code>：<code>hincrby &lt;key&gt; &lt;field&gt; &lt;increment&gt;</code></li><li>为哈希表 key 中的指定字段的浮点数值加上增量 <code>&lt;increment&gt;</code> ：<code>hincrbyfloat &lt;key&gt; &lt;field&gt; &lt;increment&gt;</code></li><li>将哈希表 <code>&lt;key&gt;</code> 中的域 <code>&lt;field&gt;</code> 的值设置为 <code>&lt;value&gt;</code> ，当且仅当域 field 不存在：<code>hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;</code></li><li>获取在哈希表中指定 <code>&lt;key&gt;</code> 的所有字段和值：<code>hgetall &lt;key&gt;</code></li><li>迭代哈希表中的键值对：<code>hscan &lt;key&gt; cursor [match pattern] [count counts]</code></li></ul><h3 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h3><p>Hash 类型对应的数据结构是两种：<strong>ziplist（压缩列表）</strong>，<strong>hashtable（哈希表）</strong>。当 field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable</p><h2 id="有序集合（Zset）"><a href="#有序集合（Zset）" class="headerlink" title="有序集合（Zset）"></a>有序集合（Zset）</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>Redis 有序集合 zset 与普通集合 set 非常相似，是一个<strong>没有重复元素</strong>的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个<strong>评分（score）</strong>, 这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。<strong>集合的成员是唯一的，但是评分可以是重复了</strong> 。</p><p>因为元素是有序的，所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的，因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>将一个或多个 member 元素及其 <code>&lt;score&gt;</code> 值加入到有序集 <code>&lt;key&gt;</code> 当中：<code>zadd &lt;key&gt; &lt;score1&gt; &lt;value1&gt; &lt;score2&gt; &lt;value&gt;...</code></li><li>返回有序集 <code>&lt;key&gt;</code> 中，下标在 <code>&lt;start&gt; &lt;stop&gt;</code> 之间的元素，按 <code>&lt;score&gt;</code> 值递增 (<strong>从小到大</strong>) 次序排列，带 withscores，可以让分数一起和值返回到结果集：<code>zrange &lt;key&gt; &lt;start&gt; &lt;stop&gt; [withscores]</code></li><li>返回有序集 <code>&lt;key&gt;</code> 中，下标在 <code>&lt;start&gt; &lt;stop&gt;</code> 之间的元素，按 <code>&lt;score&gt;</code> 值递增 (<strong>从大到小</strong>) 次序排列，带 withscores，可以让分数一起和值返回到结果集：<code>zrevrange &lt;key&gt; &lt;start&gt; &lt;stop&gt; [withscores]</code></li><li>返回有序集 <code>&lt;key&gt;</code> 中，所有 <code>&lt;score&gt;</code> 值介于 <code>&lt;min&gt;</code> 和 <code>&lt;max&gt;</code> 之间 (包括等于 min 或 max) 的成员。有序集成员按 <code>&lt;score&gt;</code> 值递增 (<strong>从小到大</strong>) 次序排列：<code>zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores] [limit offset count]</code></li><li>返回有序集 <code>&lt;key&gt;</code> 中，所有 <code>&lt;score&gt;</code> 值介于  <code>&lt;min&gt;</code> 和 <code>&lt;max&gt;</code> 之间 (包括等于 min 或 max) 的成员。有序集成员按 <code>&lt;score&gt;</code> 值递增 (<strong>从大到小</strong>) 次序排列：<code>zrevrangebyscore &lt;key&gt; &lt;max&gt; &lt;min&gt; [withscores] [limit offset count]</code></li><li>为元素的 score 加上增量：<code>zincrby &lt;key&gt; &lt;increment&gt; &lt;value&gt;</code></li><li>删除该集合下，指定值的元素：<code>zrem &lt;key&gt; &lt;value1&gt; &lt;value2&gt;...</code></li><li>统计该集合，分数区间内的元素个数：<code>zcount &lt;key&gt; &lt;min&gt; &lt;max&gt;</code></li><li>返回该值在集合中的排名，按 <code>&lt;score&gt;</code> 值递增 (<strong>从小到大</strong>) 次序排列，从 0 开始：<code>zrank &lt;key&gt; &lt;value&gt;</code></li><li>返回该值在集合中的排名，按 <code>&lt;score&gt;</code> 值递增 (<strong>从大到小</strong>) 次序排列，从 0 开始：<code>zrevrank &lt;key&gt; &lt;value&gt;</code></li><li>获取有序集合的成员数：<code>zcard key</code></li><li>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 <code>&lt;destination&gt;</code> 中：<code> zinterstore &lt;destination&gt; &lt;numkeys&gt; &lt;key1&gt; &lt;key2&gt; ...</code></li><li>在有序集合中计算指定字典区间内成员数量：<code>zlexcount &lt;key&gt; &lt;min&gt; &lt;max&gt;</code><ul><li>成员名称前需要加 <code>[</code> 符号作为开头，<code>[</code> 符号与成员之间不能有空格</li><li>可以使用 <code>-</code> 和 <code>+</code> 表示得分最小值和最大值</li></ul></li><li>通过字典区间返回有序集合的成员：<code>zrangebylex  &lt;key&gt; &lt;min&gt; &lt;max&gt; [limit offset count]</code><ul><li>成员名称前需要加 <code>[</code> 符号作为开头，<code>[</code> 符号与成员之间不能有空格，<code>(</code>符号表示不包含</li><li>可以使用 <code>-</code> 和 <code>+</code> 表示得分最小值和最大值</li></ul></li><li>移除有序集合中给定的字典区间的所有成员：<code>zremrangebylex  &lt;key&gt; &lt;min&gt; &lt;max&gt;</code><ul><li>成员名称前需要加 <code>[</code> 符号作为开头，<code>[</code> 符号与成员之间不能有空格</li><li>可以使用 <code>-</code> 和 <code>+</code> 表示得分最小值和最大值</li></ul></li><li>移除有序集合中给定的排名区间的所有成员：<code>zremrangebyrank &lt;key&gt; &lt;start&gt; &lt;stop&gt;</code> </li><li>移除有序集合中给定的分数区间的所有成员：<code>zremrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt;</code></li><li>返回有序集中，成员的分数值：<code>zcore  &lt;key&gt; &lt;value&gt;</code></li><li>计算给定的一个或多个有序集的并集，并存储在 <code>&lt;destination&gt;</code> 中：<code>zunionstore &lt;destination&gt; &lt;numkeys&gt; &lt;key1&gt; &lt;key2&gt; ...</code></li><li>迭代有序集合中的元素（包括元素成员和元素分值）：<code>zscan &lt;key&gt; cursor [match pattern] [count counts]</code></li></ul><h3 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h3><p>SortedSet (zset) 是 Redis 提供的一个非常特别的数据结构，一方面它等价于 Java 的数据结构 Map&lt;String, Double&gt;，可以给每一个元素 value 赋予一个权重 score，另一方面它又类似于 TreeSet，内部的元素会按照权重 score 进行排序，可以得到每个元素的名次，还可以通过 score 的范围来获取元素的列表。</p><p>zset 底层使用了两个数据结构：</p><ol><li>hash，hash 的作用就是关联元素 value 和权重 score，保障元素 value 的唯一性，可以通过元素 value 找到相应的 score 值。</li><li>跳跃表，跳跃表的目的在于给元素 value 排序，根据 score 的范围获取元素列表。</li></ol><h2 id="跳跃表（跳表）"><a href="#跳跃表（跳表）" class="headerlink" title="跳跃表（跳表）"></a><strong>跳跃表（跳表）</strong></h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis 采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>对比有序链表和跳跃表，从链表中查询出 51</p><ol><li> 有序链表</li></ol><p>   <img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220410020855.png" alt="image-20220410020855417"></p><p>   要查找值为 51 的元素，需要从第一个元素开始依次查找、比较才能找到。共需要 6 次比较。</p><ol start="2"><li><p>跳跃表</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220410131600.jpg" alt="image-20220410131600"></p><p>从第 2 层开始，1 节点比 41 节点小，向后比较。21 节点比 51 节点小，继续向后比较，后面就是 NULL 了，所以从 21 节点向下到第 1 层</p><p>在第 1 层，41 节点比 51 节点小，继续向后，61 节点比 51 节点大，所以从 41 节点向下</p><p>在第 0 层，51 节点为要查找的节点，节点被找到，共查找 4 次。</p></li></ol><h1 id="Redis-配置文件"><a href="#Redis-配置文件" class="headerlink" title="Redis 配置文件"></a>Redis 配置文件</h1><p>自定义目录：/etc/redis.conf</p><h2 id="Units-单位"><a href="#Units-单位" class="headerlink" title="Units 单位"></a>Units 单位</h2><p>配置大小单位，开头定义了一些基本的度量单位，只支持 bytes，不支持 bit<br>大小写不敏感</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220410225355.png" alt="image-20220410225355826"></p><h2 id="INCLUDES-包含"><a href="#INCLUDES-包含" class="headerlink" title="INCLUDES 包含"></a>INCLUDES 包含</h2><p>类似 jsp 中的 include，多实例的情况可以把公用的配置文件提取出来</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220410225510.png" alt="image-20220410225510320"></p><h2 id="网络相关配置"><a href="#网络相关配置" class="headerlink" title="网络相关配置"></a>网络相关配置</h2><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>默认情况 bind=127.0.0.1 只能接受本机的访问请求<br>不写的情况下，无限制接受任何 ip 地址的访问<br>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其<strong>注释掉</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220410225644.png" alt="image-20220410225644567"></p><h3 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h3><p><strong>如果开启了 protected-mode，那么在没有设定 bind ip 且没有设密码的情况下，Redis 只允许接受本机的响应，需要将其改为 no</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411015319.png" alt="image-20220411015319271"></p><h3 id="tcp-backlog"><a href="#tcp-backlog" class="headerlink" title="tcp-backlog"></a>tcp-backlog</h3><p>设置 tcp 的 backlog，backlog 其实是一个连接队列，backlog 队列总和 = 未完成三次握手队列 + 已经完成三次握手队列。</p><p>在高并发环境下你需要一个高 backlog 值来避免慢客户端连接问题。</p><p>注意 Linux 内核会将这个值减小到 /proc/sys/net/core/somaxconn 的值（128），所以需要确认增大 /proc/sys/net/core/somaxconn 和 /proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411020630.png" alt="image-20220411020630898"></p><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>一个空闲的客户端维持多少秒会关闭，0 表示关闭该功能。即<strong>永不关闭</strong>。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411020728.png" alt="image-20220411020728892"></p><h3 id="tcp-keepalive"><a href="#tcp-keepalive" class="headerlink" title="tcp-keepalive"></a>tcp-keepalive</h3><p>对访问客户端的一种<strong>心跳检测</strong>，每个 n 秒检测一次。</p><p>单位为秒，如果设置为 0，则不会进行 Keepalive 检测，建议设置成 60</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411020803.png" alt="image-20220411020803546"></p><h2 id="GENERAL-通用"><a href="#GENERAL-通用" class="headerlink" title="GENERAL 通用"></a>GENERAL 通用</h2><h3 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h3><p>是否为后台进程，设置为 yes</p><p>守护进程，后台启动</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411020857.png" alt="image-20220411020857831"></p><h3 id="pidfile"><a href="#pidfile" class="headerlink" title="pidfile"></a>pidfile</h3><p>存放 pid 文件的位置，每个实例会产生一个不同的 pid 文件</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411020927.png" alt="image-20220411020927003"></p><h3 id="loglevel"><a href="#loglevel" class="headerlink" title="loglevel"></a>loglevel</h3><p>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</p><p>四个级别根据使用阶段来选择，生产环境选择 notice 或者 warning</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411021005.png" alt="image-20220411021005540"></p><h3 id="logfile"><a href="#logfile" class="headerlink" title="logfile"></a>logfile</h3><p>日志文件名称</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411021104.png" alt="image-20220411021103939"></p><h3 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h3><p><strong>设定库的数量 默认 16</strong>，默认数据库为 0，可以使用 SELECT 命令在连接上指定数据库 id</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411021134.png" alt="image-20220411021133989"></p><h2 id="SECURITY-安全"><a href="#SECURITY-安全" class="headerlink" title="SECURITY 安全"></a>SECURITY 安全</h2><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>访问密码的查看、设置和取消</p><p>在命令中设置密码，只是临时的。重启 redis 服务器，密码就还原了</p><p>永久设置，需要在配置文件中进行设置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411021309.png" alt="image-20220411021309192"></p><h2 id="LIMITS-限制"><a href="#LIMITS-限制" class="headerlink" title="LIMITS 限制"></a>LIMITS 限制</h2><h3 id="maxclients"><a href="#maxclients" class="headerlink" title="maxclients"></a>maxclients</h3><p>设置 redis 同时可以与多少个客户端进行连接</p><p>默认情况下为 10000 个客户端。</p><p>如果达到了此限制，redis 则会拒绝新的连接请求，并且向这些连接请求方发出 “max number of clients reached” 以作回应。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411021644.png" alt="image-20220411021644289"></p><h3 id="maxmemory"><a href="#maxmemory" class="headerlink" title="maxmemory"></a>maxmemory</h3><p>建议必须设置，否则，将内存占满，造成服务器宕机</p><p>设置 redis 可以使用的内存量。一旦到达内存使用上限，redis 将会试图移除内部数据，移除规则可以通过 maxmemory-policy 来指定。</p><p>如果 redis 无法根据移除规则来移除内存中的数据，或者设置了 “不允许移除”，那么 redis 则会针对那些需要申请内存的指令返回错误信息，比如 SET、LPUSH 等。</p><p>但是对于无内存申请的指令，仍然会正常响应，比如 GET 等。如果你的 redis 是主 redis（说明你的 redis 有从 redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是 “不移除” 的情况下，才不用考虑这个因素。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411021734.png" alt="image-20220411021733993"></p><h3 id="maxmemory-policy"><a href="#maxmemory-policy" class="headerlink" title="maxmemory-policy"></a>maxmemory-policy</h3><p>volatile-lru：使用 LRU 算法移除 key，只对设置了过期时间的键；（最近最少使用）</p><p>allkeys-lru：在所有集合 key 中，使用 LRU 算法移除 key</p><p>volatile-random：在过期集合中移除随机的 key，只对设置了过期时间的键</p><p>allkeys-random：在所有集合 key 中，移除随机的 key</p><p>volatile-ttl：移除那些 TTL 值最小的 key，即那些最近要过期的 key</p><p>noeviction：不进行移除。针对写操作，只是返回错误信息</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411021938.png" alt="image-20220411021937910"></p><h3 id="maxmemory-samples"><a href="#maxmemory-samples" class="headerlink" title="maxmemory-samples"></a>maxmemory-samples</h3><p>设置样本数量，LRU 算法和最小 TTL 算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis 默认会检查这么多个 key 并选择其中 LRU 的那个。</p><p>一般设置 3 到 7 的数字，数值越小样本越不准确，但性能消耗越小。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411022320.png" alt="image-20220411022320100"></p><h1 id="Redis-的发布和订阅"><a href="#Redis-的发布和订阅" class="headerlink" title="Redis 的发布和订阅"></a>Redis 的发布和订阅</h1><h2 id="什么是发布和订阅"><a href="#什么是发布和订阅" class="headerlink" title="什么是发布和订阅"></a>什么是发布和订阅</h2><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><h2 id="Redis-的发布和订阅-1"><a href="#Redis-的发布和订阅-1" class="headerlink" title="Redis 的发布和订阅"></a>Redis 的发布和订阅</h2><ol><li><p>客户端可以订阅频道</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411022626.png" alt="image-20220411022626452"></p></li><li><p>当给这个频道发布消息后，消息就会发送给订阅的客户端</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411022635.png" alt="image-20220411022635647"></p></li></ol><h2 id="发布订阅命令行实现"><a href="#发布订阅命令行实现" class="headerlink" title="发布订阅命令行实现"></a>发布订阅命令行实现</h2><ol><li><p>打开一个客户端订阅 channel1：<code>subscribe channel1</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411022818.png" alt="image-20220411022818765"></p></li><li><p>打开另一个客户端，给 channel1 发布消息 hello (返回的 1 是订阅者数量)：<code>publish channel1 hello</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411022937.png" alt="image-20220411022937078"></p></li><li><p>打开第一个客户端可以看到发送的消息</p><p>注：发布的消息没有持久化，如果在订阅的客户端收不到 hello，只能收到订阅后发布的消息</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411023030.png" alt="image-20220411023030235"></p></li></ol><h1 id="Redis-新数据类型"><a href="#Redis-新数据类型" class="headerlink" title="Redis 新数据类型"></a>Redis 新数据类型</h1><h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>现代计算机用二进制（位） 作为信息的基础单位， 1 个字节等于 8 位， 例如 “abc” 字符串是由 3 个字节组成， 但实际在计算机存储时将其用二进制表示。合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p>Redis 提供了 Bitmaps 这个 “数据类型” 可以实现对位的操作：</p><ol><li>Bitmaps 本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</li><li>Bitmaps 单独提供了一套命令， 所以在 Redis 中使用 Bitmaps 和使用字符串的方法不太相同。可以把 Bitmaps 想象成一个以位为单位的数组， 数组的每个单元只能存储 0 和 1， 数组的下标在 Bitmaps 中叫做偏移量。</li></ol><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220411023225.png" alt="image-20220411023225140"></p><h3 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>设置 Bitmaps 中某个偏移量的值（0 或 1）（offset: 偏移量从 0 开始）：<code>setbit &lt;key&gt; &lt;offset&gt; &lt;value&gt;</code></p><p>实例：<br>每个独立用户是否访问过网站存放在 Bitmaps 中， 将访问的用户记做 1， 没有访问的用户记做 0， 用偏移量作为用户的 id。</p><p><strong>注意</strong>：<br>很多应用的用户 id 以一个指定数字（例如 10000） 开头， 直接将用户 id 和 Bitmaps 的偏移量对应势必会造成一定的浪费， 通常的做法是每次做 setbit 操作时将用户 id 减去这个指定数字。</p><p>在第一次初始化 Bitmaps 时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成 Redis 的阻塞。</p></li><li><p>获取 Bitmaps 中某个偏移量的值：<code>getbit &lt;key&gt; &lt;offset&gt;</code></p><p>若访问的 bit 不存在，则返回 0 。</p></li><li><p>统计<strong>字符串</strong>被设置为 1 的 bit 数：<code>bitcount &lt;key&gt;[start end] </code></p><p>注意：redis 的 setbit 设置或清除的是 bit 位置，而 bitcount 计算的是 byte 位置。</p></li><li><p>对 Bitmaps 进行 and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在 destkey 中：<code>bitop and(or/not/xor) &lt;destkey&gt; &lt;key1&gt; &lt;key2&gt;...</code></p></li></ul><h3 id="Bitmaps与set对比"><a href="#Bitmaps与set对比" class="headerlink" title="Bitmaps与set对比"></a>Bitmaps 与 set 对比</h3><p>假设网站有 1 亿用户， 每天独立访问的用户有 5 千万， 如果每天用 set 类型和 Bitmaps 分别存储活跃用户，可以得到 set 类型占用空间：  <strong>64 位 * 5 千万 = 400MB</strong> ，而 Bitmaps 占用空间：<strong>1 位 * 1 亿 = 12.5MB</strong>。</p><p>很明显， 这种情况下使用 Bitmaps 能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的。</p><p>但 Bitmaps 并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有 10 万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用 Bitmaps 就不太合适了， 因为基本上大部分位都是 0。可以得到 set 类型占用空间：  <strong>64 位 * 10 万 = 800KB</strong> ，而 Bitmaps 占用空间：<strong>1 位 * 1 亿 = 12.5MB</strong>。</p><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站 PV（PageView 页面访问量）, 可以使用 Redis 的 incr、incrby 轻松实现。</p><p>但像 UV（UniqueVisitor，独立访客）、独立 IP 数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p><strong>解决基数问题有很多种方案</strong>：<br>（1）数据存储在 MySQL 表中，使用 distinct count 计算不重复个数<br>（2）使用 Redis 提供的 hash、set、bitmaps 等数据结构来处理</p><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p><strong>能否能够降低一定的精度来平衡存储空间</strong>？</p><p>Redis 推出了 HyperLogLog</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而<strong>不会储存输入元素本身</strong>，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p><strong>什么是基数？</strong><br>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数 (不重复元素) 为 5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><h3 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>添加指定元素到 HyperLogLog 中，如果执行命令后 HLL 估计的近似基数发生变化，则返回 1，否则返回 0：<code>pfadd &lt;key&gt; &lt;element1&gt; &lt;element2&gt;... </code></li><li><strong>计算 HLL 的近似基数</strong>，可以计算多个 HLL，比如用 HLL 存储每天的 UV，计算一周的 UV 可以使用 7 天的 UV 合并计算即可：<code>pfcount &lt;key1&gt; &lt;key2&gt;...</code></li><li>将一个或多个 HLL 合并后的结果存储在另一个 HLL 中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得：<code>pfmerge &lt;destkey&gt; &lt;sourcekey1&gt; &lt;sourcekey2&gt;...</code> </li></ul><h2 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h2><h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><p>Redis 3.2 中增加了对 GEO 类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的 2 维坐标，在地图上就是经纬度。redis 基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度 Hash 等常见操作。</p><h3 id="常用命令-7"><a href="#常用命令-7" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>添加地理位置（经度，纬度，名称）：<code>geoadd &lt;key&gt; &lt;longitude&gt; &lt;latitude&gt; &lt;member&gt; [longitude latitude member...] </code></p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p></li><li><p>获得指定地区的坐标值：<code>geopos &lt;key&gt; &lt;member&gt; [member...] </code></p></li><li><p>获取两个位置之间的直线距离：<code>geodist&lt;key&gt; &lt;member1&gt; &lt;member2&gt; [m|km|ft|mi]</code></p><ul><li>m 表示单位为米 [默认值]。</li><li>km 表示单位为千米。</li><li>mi 表示单位为英里。</li><li>ft 表示单位为英尺。</li><li>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</li></ul></li><li><p>以给定的经纬度为中心，找出某一半径内的元素：<code>georadius &lt;key&gt;&lt;longitude&gt; &lt;latitude&gt; &lt;半径&gt; m|km|ft|mi</code></p><ul><li>m 表示单位为米 [默认值]。</li><li>km 表示单位为千米。</li><li>mi 表示单位为英里。</li><li>ft 表示单位为英尺。</li><li>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</li></ul></li></ul><h1 id="Jedis-测试"><a href="#Jedis-测试" class="headerlink" title="Jedis 测试"></a>Jedis 测试</h1><h2 id="Jedis-所需的-jar-包"><a href="#Jedis-所需的-jar-包" class="headerlink" title="Jedis 所需的 jar 包"></a>Jedis 所需的 jar 包</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="hutools工具包"><a href="#hutools工具包" class="headerlink" title="hutools工具包"></a>hutools 工具包</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0.M2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="连接-Redis-注意事项"><a href="#连接-Redis-注意事项" class="headerlink" title="连接 Redis 注意事项"></a>连接 Redis 注意事项</h2><ul><li>禁用 Linux 的防火墙：Linux (CentOS7) 里执行命令：<code>systemctl stop firewalld.service</code></li><li>执行开机禁用防火墙自启命令 ： <code>systemctl disable firewalld.service</code></li><li>查看防火墙命令：<code>systemctl status firewalld.service</code></li><li>redis.conf 中注释掉 <code>bind 127.0.0.1</code>，更改 <code>protected-mode no</code></li><li>关闭 redis server：<code>redis-cli -h 127.0.0.1 -p 6379 -a 密码 shutdown</code></li><li>重启 redis server：<code>/usr/local/bin/redis-server /etc/redis.conf</code></li></ul><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.jedis;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : redis-study-jedis</span><br><span class="hljs-comment"> * description : jedis测试01</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-13【星期三】</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisDemo01</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-comment">//创建Jedis对象</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br><br>        <span class="hljs-comment">//密码认证</span><br>        jedis.auth(<span class="hljs-string">"root"</span>);<br><br>        <span class="hljs-comment">//测试</span><br>        System.out.println(jedis.ping());<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>测试结果</strong>：</p><p>返回 “PONG” ，则表示连接成功。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413011409.png" alt="image-20220413011409350"></p><h2 id="测试相关数据类型"><a href="#测试相关数据类型" class="headerlink" title="测试相关数据类型"></a>测试相关数据类型</h2><h3 id="Jedis-API：Key"><a href="#Jedis-API：Key" class="headerlink" title="Jedis-API：Key"></a>Jedis-API：Key</h3><ul><li><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//操作key</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo01</span> <span class="hljs-params">()</span> {<br>    <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.get();<br>    <span class="hljs-comment">//创建Jedis对象</span><br>    <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//密码认证</span><br>    jedis.auth(<span class="hljs-string">"root"</span>);<br><br>    <span class="hljs-comment">//设置key</span><br>    jedis.set(<span class="hljs-string">"k1"</span>, <span class="hljs-string">"v1"</span>);<br>    jedis.set(<span class="hljs-string">"k2"</span>, <span class="hljs-string">"v2"</span>);<br>    jedis.set(<span class="hljs-string">"k3"</span>, <span class="hljs-string">"v3"</span>);<br><br>    <span class="hljs-comment">//获得所有的key</span><br>    Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">"*"</span>);<br>    <span class="hljs-comment">//获得key的数量</span><br>    log.info(<span class="hljs-string">"获得key的数量"</span>);<br>    System.out.println(keys.size());<br><br>    log.info(<span class="hljs-string">"遍历打印keys"</span>);<br>    <span class="hljs-comment">//遍历打印keys</span><br>    <span class="hljs-keyword">for</span> (String key : keys) {<br>        System.out.println(key);<br>    }<br><br>    <span class="hljs-comment">//检测key是否存在</span><br>    log.info(<span class="hljs-string">"检测key是否存在"</span>);<br>    System.out.println(jedis.exists(<span class="hljs-string">"k1"</span>));<br><br>    <span class="hljs-comment">//查看key的剩余时间</span><br>    log.info(<span class="hljs-string">"查看key的剩余时间"</span>);<br>    System.out.println(jedis.ttl(<span class="hljs-string">"k1"</span>));<br><br>    <span class="hljs-comment">//获得key对应的value</span><br>    log.info(<span class="hljs-string">"获得key对应的value"</span>);<br>    System.out.println(jedis.get(<span class="hljs-string">"k1"</span>));<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413015527.png" alt="image-20220413015527640"></p></li></ul><h3 id="Jedis-API：String"><a href="#Jedis-API：String" class="headerlink" title="Jedis-API：String"></a>Jedis-API：String</h3><ul><li><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//操作string</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo02</span> <span class="hljs-params">()</span> {<br>    <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.get();<br>    <span class="hljs-comment">//创建Jedis对象</span><br>    <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//密码认证</span><br>    jedis.auth(<span class="hljs-string">"root"</span>);<br><br>    <span class="hljs-comment">//设置多个 string 的 key-value</span><br>    jedis.mset(<span class="hljs-string">"str1"</span>, <span class="hljs-string">"v1"</span>, <span class="hljs-string">"str2"</span>, <span class="hljs-string">"v2"</span>, <span class="hljs-string">"str3"</span>, <span class="hljs-string">"v3"</span>);<br>    <br>    <span class="hljs-comment">//打印获得的 key-value</span><br>    log.info(<span class="hljs-string">"打印获得的 key-value"</span>);<br>    System.out.println(jedis.mget(<span class="hljs-string">"str1"</span>, <span class="hljs-string">"str2"</span>, <span class="hljs-string">"str3"</span>));<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413020214.png" alt="image-20220413020214277"></p></li></ul><h3 id="Jedis-API：list"><a href="#Jedis-API：list" class="headerlink" title="Jedis-API：list"></a>Jedis-API：list</h3><ul><li><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//操作list</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo03</span> <span class="hljs-params">()</span> {<br>    <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.get();<br>    <span class="hljs-comment">//创建Jedis对象</span><br>    <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//密码认证</span><br>    jedis.auth(<span class="hljs-string">"root"</span>);<br><br>    <span class="hljs-comment">//设置 list 的 key-value</span><br>    jedis.lpush(<span class="hljs-string">"myList"</span>, <span class="hljs-string">"1"</span>, <span class="hljs-string">"2"</span>, <span class="hljs-string">"3"</span>);<br>    <span class="hljs-comment">//获取list</span><br>    List&lt;String&gt; list = jedis.lrange(<span class="hljs-string">"myList"</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//遍历输出list里的value</span><br>    log.info(<span class="hljs-string">"遍历输出list里的value"</span>);<br>    <span class="hljs-keyword">for</span> (String element : list) {<br>        System.out.println(element);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413021911.png" alt="image-20220413021911595"></p></li></ul><h3 id="Jedis-API：set"><a href="#Jedis-API：set" class="headerlink" title="Jedis-API：set"></a>Jedis-API：set</h3><ul><li><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//操作set</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo04</span> <span class="hljs-params">()</span> {<br>    <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.get();<br>    <span class="hljs-comment">//创建Jedis对象</span><br>    <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//密码认证</span><br>    jedis.auth(<span class="hljs-string">"root"</span>);<br><br>    <span class="hljs-comment">//设置 set 的 key-value</span><br>    jedis.sadd(<span class="hljs-string">"orders"</span>, <span class="hljs-string">"order01"</span>,<span class="hljs-string">"order02"</span>,<span class="hljs-string">"order03"</span>,<span class="hljs-string">"order04"</span>);<br>    <span class="hljs-comment">//获取set中所有的值</span><br>    Set&lt;String&gt; smembers = jedis.smembers(<span class="hljs-string">"orders"</span>);<br>    <span class="hljs-comment">//遍历输出set中所有的值</span><br>    log.info(<span class="hljs-string">"遍历输出set中所有的值"</span>);<br>    <span class="hljs-keyword">for</span> (String order : smembers) {<br>        System.out.println(order);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413022151.png" alt="image-20220413022151586"></p></li></ul><h3 id="Jedis-API：hash"><a href="#Jedis-API：hash" class="headerlink" title="Jedis-API：hash"></a>Jedis-API：hash</h3><ul><li><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//操作hash</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo05</span> <span class="hljs-params">()</span> {<br>    <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.get();<br>    <span class="hljs-comment">//创建Jedis对象</span><br>    <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//密码认证</span><br>    jedis.auth(<span class="hljs-string">"root"</span>);<br><br>    <span class="hljs-comment">//设置 hash 中的 key-field-value</span><br>    jedis.hset(<span class="hljs-string">"hash1"</span>, <span class="hljs-string">"userName"</span>, <span class="hljs-string">"李四"</span>);<br>    <span class="hljs-comment">//输出hash里的值</span><br>    log.info(<span class="hljs-string">"输出hash里的值"</span>);<br>    System.out.println(jedis.hget(<span class="hljs-string">"hash1"</span>, <span class="hljs-string">"userName"</span>));<br><br>    <span class="hljs-comment">//使用Map集合存放需要输入hash的值</span><br>    Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>    map.put(<span class="hljs-string">"phone"</span>, <span class="hljs-string">"188xxxxxxxx"</span>);<br>    map.put(<span class="hljs-string">"address"</span>, <span class="hljs-string">"广东"</span>);<br>    map.put(<span class="hljs-string">"email"</span>, <span class="hljs-string">"xxx@163.com"</span>);<br><br>    <span class="hljs-comment">//设置 hash 中的 key-field-value</span><br>    jedis.hmset(<span class="hljs-string">"hash2"</span>, map);<br><br>    <span class="hljs-comment">//获取hash里的值</span><br>    List&lt;String&gt; result = jedis.hmget(<span class="hljs-string">"hash2"</span>, <span class="hljs-string">"phone"</span>, <span class="hljs-string">"address"</span>, <span class="hljs-string">"email"</span>);<br><br>    <span class="hljs-comment">//遍历输出hash中所有的值</span><br>    log.info(<span class="hljs-string">"遍历输出hash中所有的值"</span>);<br>    <span class="hljs-keyword">for</span> (String element : result) {<br>        System.out.println(element);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413023119.png" alt="image-20220413023119111"></p></li></ul><h3 id="Jedis-API：zset"><a href="#Jedis-API：zset" class="headerlink" title="Jedis-API：zset"></a>Jedis-API：zset</h3><ul><li><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//操作zset</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo06</span> <span class="hljs-params">()</span> {<br>    <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.get();<br>    <span class="hljs-comment">//创建Jedis对象</span><br>    <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//密码认证</span><br>    jedis.auth(<span class="hljs-string">"root"</span>);<br><br>    <span class="hljs-comment">//设置 zset 的 key-value</span><br>    jedis.zadd(<span class="hljs-string">"zset01"</span>, <span class="hljs-number">100d</span>, <span class="hljs-string">"z3"</span>);<br>    jedis.zadd(<span class="hljs-string">"zset01"</span>, <span class="hljs-number">90d</span>, <span class="hljs-string">"l4"</span>);<br>    jedis.zadd(<span class="hljs-string">"zset01"</span>, <span class="hljs-number">80d</span>, <span class="hljs-string">"w5"</span>);<br>    jedis.zadd(<span class="hljs-string">"zset01"</span>, <span class="hljs-number">70d</span>, <span class="hljs-string">"z6"</span>);<br>    <span class="hljs-comment">//获取zset中所有的值</span><br>    List&lt;String&gt; zrange = jedis.zrange(<span class="hljs-string">"zset01"</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//遍历输出set中所有的值</span><br>    log.info(<span class="hljs-string">"遍历输出zset中所有的值"</span>);<br>    <span class="hljs-keyword">for</span> (String e : zrange) {<br>        System.out.println(e);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413023411.png" alt="image-20220413023411339"></p></li></ul><h1 id="Jedis-实例：手机验证码功能"><a href="#Jedis-实例：手机验证码功能" class="headerlink" title="Jedis 实例：手机验证码功能"></a>Jedis 实例：手机验证码功能</h1><blockquote><p>要求：</p><ol><li>输入手机号，点击发送后随机生成 6 位数字码，2 分钟有效</li><li>输入验证码，点击验证，返回成功或失败</li><li>每个手机号每天只能输入 3 次</li></ol></blockquote><ul><li><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.jedis;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.date.DateTime;<br><span class="hljs-keyword">import</span> cn.hutool.core.date.DateUnit;<br><span class="hljs-keyword">import</span> cn.hutool.core.date.DateUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : redis-study-jedis</span><br><span class="hljs-comment"> * description : 手机验证码生成</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-13【星期三】</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneCode</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-comment">//模拟验证码发送</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> verifyCode(<span class="hljs-string">"18888888888"</span>);<br>        <span class="hljs-keyword">if</span> (b) {<br>            <span class="hljs-comment">//校验发送的验证码</span><br>            getRedisCode(<span class="hljs-string">"18888888888"</span>, <span class="hljs-string">"888888"</span>);<br>        }<br>    }<br><br>    <span class="hljs-comment">//生成6位数字验证码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCode</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> RandomUtil.randomNumbers(<span class="hljs-number">6</span>);<br>    }<br><br>    <span class="hljs-comment">//计算当天剩余时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">remain</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-type">DateTime</span> <span class="hljs-variable">endOfDay</span> <span class="hljs-operator">=</span> DateUtil.endOfDay(DateUtil.date());<br>        <span class="hljs-type">DateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> DateUtil.date();<br>        <span class="hljs-keyword">return</span> DateUtil.between(endOfDay, now, DateUnit.SECOND);<br>    }<br><br>    <span class="hljs-comment">//设置手机每天只能验证三次，并把验证码放到redis中，设置过期时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verifyCode</span> <span class="hljs-params">(String phone)</span> {<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//创建Jedis对象</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//密码认证</span><br>        jedis.auth(<span class="hljs-string">"root"</span>);<br><br>        <span class="hljs-comment">//拼接key</span><br>        <span class="hljs-comment">//手机发送次数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">countKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">"VerifyCode"</span> + phone + <span class="hljs-string">":count"</span>;<br>        <span class="hljs-comment">//验证码key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">codeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">"VerifyCode"</span> + phone + <span class="hljs-string">":code"</span>;<br><br>        <span class="hljs-comment">//每个手机一天只能收到三次验证码,每日0点刷新</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jedis.get(countKey);<br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-literal">null</span>) {<br>            <span class="hljs-comment">//没有接收过验证码，第一次发送，设置发送次数为1</span><br>            DateUtil.beginOfSecond(DateUtil.date());<br>            jedis.setex(countKey, remain(), <span class="hljs-string">"1"</span>);<br>            <span class="hljs-comment">//发送的验证码要放到redis中,设置过期时间为120s</span><br>            jedis.setex(codeKey, <span class="hljs-number">120</span>, getCode());<br>            flag = <span class="hljs-literal">true</span>;<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Integer.parseInt(count) &lt;= <span class="hljs-number">2</span>) {<br>            <span class="hljs-comment">//接收次数小于3，次数+1</span><br>            jedis.incr(countKey);<br>            <span class="hljs-comment">//发送的验证码要放到redis中,设置过期时间为120s</span><br>            jedis.setex(codeKey, <span class="hljs-number">120</span>, getCode());<br>            flag = <span class="hljs-literal">true</span>;<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Integer.parseInt(count) &gt; <span class="hljs-number">2</span>) {<br>            <span class="hljs-comment">//接收三次了，不能再发送了</span><br>            System.out.println(<span class="hljs-string">"今天的发送次数已经超过3次了"</span>);<br>        }<br><br>        <span class="hljs-comment">//关闭连接</span><br>        jedis.close();<br>        <span class="hljs-keyword">return</span> flag;<br>    }<br><br>    <span class="hljs-comment">//验证码校验</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getRedisCode</span> <span class="hljs-params">(String phone, String code)</span> {<br>        <span class="hljs-comment">//创建Jedis对象</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">"192.168.137.130"</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//密码认证</span><br>        jedis.auth(<span class="hljs-string">"root"</span>);<br><br>        <span class="hljs-comment">//验证码key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">codeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">"VerifyCode"</span> + phone + <span class="hljs-string">":code"</span>;<br>        <span class="hljs-comment">//从redis中获取验证码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">redisCode</span> <span class="hljs-operator">=</span> jedis.get(codeKey);<br><br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">if</span> (redisCode.equals(code)) {<br>            System.out.println(<span class="hljs-string">"成功"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            System.out.println(<span class="hljs-string">"失败"</span>);<br>        }<br><br>        <span class="hljs-comment">//关闭连接</span><br>        jedis.close();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><ul><li><p>验证码错误</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413113401.png" alt="image-20220413113401758"></p></li><li><p>超过每日次数限制</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413115218.png" alt="image-20220413115218271"></p></li><li><p>redis 数据</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413113500.png" alt="image-20220413113500447"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220413113636.png" alt="image-20220413113636287"></p></li></ul></li></ul><h1 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h1><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--hutools工具箱--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0.M2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Redis工具类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>wiki.xsx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 application.yaml 中 redis 配置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml">server:<br>  port: 8080<br><br>spring:<br>  redis:<br>    #Redis服务器地址<br>    host: 192.168.137.130<br>    #Redis密码<br>    password: root<br>    #Redis数据库索引（默认为0）<br>    database: 0<br>    #Redis服务器连接端口<br>    port: 6379<br>    #连接超时时间（毫秒）<br>    timeout: 1800000<br>    lettuce:<br>      pool:<br>        #连接池最大连接数（使用负值表示没有限制）<br>        max-active: 20<br>        #最大阻塞等待时间(负数表示没限制)<br>        max-wait: -1<br>        #连接池中的最大空闲连接<br>        max-idle: 5<br>        #连接池中的最小空闲连接<br>        min-idle: 0<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 redis 配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_redis.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.cache.CacheManager;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.EnableCaching;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : springboot_redis</span><br><span class="hljs-comment"> * description : Redis配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-15【星期五】</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> {<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span> <span class="hljs-params">(RedisConnectionFactory factory)</span> {<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">//key序列化方式</span><br>        template.setKeySerializer(redisSerializer);<br>        <span class="hljs-comment">//value序列化</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-comment">//value hashmap序列化</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> template;<br>    }<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span> <span class="hljs-params">(RedisConnectionFactory factory)</span> {<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-comment">//解决查询缓存转换异常的问题</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig()<br>                .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                .disableCachingNullValues();<br>        <span class="hljs-type">RedisCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试 controller 方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_redis.config.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> wiki.xsx.core.handler.StringHandler;<br><span class="hljs-keyword">import</span> wiki.xsx.core.util.RedisUtil;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : springboot_redis</span><br><span class="hljs-comment"> * description :</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-15【星期五】</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/redisTest"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTestController</span> {<br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedis</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-type">StringHandler</span> <span class="hljs-variable">stringHandler</span> <span class="hljs-operator">=</span> RedisUtil.getStringHandler();<br>        <span class="hljs-comment">//设置值到redis</span><br>        stringHandler.set(<span class="hljs-string">"name"</span>, <span class="hljs-string">"lucy"</span>);<br>        <span class="hljs-comment">//返回redis获取的值</span><br>        <span class="hljs-keyword">return</span> stringHandler.get(<span class="hljs-string">"name"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220415234503.png" alt="image-20220415234503161"></p></li></ol><h1 id="事务和锁机制"><a href="#事务和锁机制" class="headerlink" title="事务和锁机制"></a>事务和锁机制</h1><h2 id="Redis-的事务定义"><a href="#Redis-的事务定义" class="headerlink" title="Redis 的事务定义"></a>Redis 的事务定义</h2><p>Redis 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis 事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队。</p><h2 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h2><p>从输入 Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 Exec 后，Redis 会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过 discard 来放弃组队。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416124318.png" alt="image-20220416124318161"></p><p><strong>测试</strong>：</p><ul><li><p>组队成功，提交成功。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416124711.png" alt="image-20220416124625005"></p></li><li><p>组队阶段报错，提交失败。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416124823.png" alt="image-20220416124823292"></p></li><li><p>组队成功，提交有成功有失败情况。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416124937.png" alt="image-20220416124937429"></p></li></ul><h2 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h2><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416125030.png" alt="image-20220416125030450"></p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416125110.png" alt="image-20220416125110925"></p><h2 id="事务冲突的问题"><a href="#事务冲突的问题" class="headerlink" title="事务冲突的问题"></a>事务冲突的问题</h2><p>假如一个场景：有很多人有你的账户并且该账户只有 10000, 同时去参加 618 抢购，同时发送了三个请求</p><p>一个请求想给金额减 <code>8000</code><br>一个请求想给金额减 <code>5000</code><br>一个请求想给金额减 <code>1000</code></p><p>这三个请求同时发出，假如都执行成功了，那么此时账户的余额就变成了 <code>10000-8000-5000-1000 = -4000</code>，此时账户余额变成负的了，显然这在实际生活中是很不合理的。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416213405.png" alt="image-20220416213405199"></p><p>那么我们就需要加锁！</p><h2 id="悲观锁（解决事务冲突）"><a href="#悲观锁（解决事务冲突）" class="headerlink" title="悲观锁（解决事务冲突）"></a>悲观锁（解决事务冲突）</h2><p>** 悲观锁 (Pessimistic Lock)**，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 block 直到它拿到锁。 <strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><h2 id="乐观锁（解决事务冲突）"><a href="#乐观锁（解决事务冲突）" class="headerlink" title="乐观锁（解决事务冲突）"></a>乐观锁（解决事务冲突）</h2><p><strong>乐观锁 (Optimistic Lock)<strong>，顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。</strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis 就是利用这种 check-and-set 机制实现事务的。</p><h2 id="乐观锁在-Redis-中的具体使用"><a href="#乐观锁在-Redis-中的具体使用" class="headerlink" title="乐观锁在 Redis 中的具体使用"></a>乐观锁在 Redis 中的具体使用</h2><p>在执行 multi 之前，先执行 <code>watch &lt;key1&gt; &lt;key2&gt;</code>, 可以监视一个 (或多个) key ，如果在事务<strong>执行之前这个 (或这些) key 被其他命令所改动，那么事务将被打断</strong>。</p><p><strong>测试</strong></p><p>终端一：设置键值，乐观锁监视一个 key，开启事务，执行事务，发现成功修改。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416215858.png" alt="image-20220416215858529"></p><p>终端二：监视一个 key，开启事务，执行事务，发现修改失败。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220416220013.png" alt="image-20220416220013549"></p><p><strong>取消 WATCH 命令对所有 key 的监视</strong>：<code>unwatch</code></p><p>如果在执行 WATCH 命令之后，<code>EXEC</code> 命令或 <code>DISCARD</code> 命令先被执行了的话，那么就不需要再执行 <code>unwatch</code> 了。</p><h2 id="Redis-事务三大特性"><a href="#Redis-事务三大特性" class="headerlink" title="Redis 事务三大特性"></a>Redis 事务三大特性</h2><ol><li><strong>单独的隔离操作</strong><br>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li><strong>没有隔离级别的概念</strong><br>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li><li><strong>不保证原子性</strong><br>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ol><h2 id="事务的秒杀示例"><a href="#事务的秒杀示例" class="headerlink" title="事务的秒杀示例"></a>事务的秒杀示例</h2><p>在 redis 存入商品数，设定秒杀时间，提供用户秒杀窗口，用户秒杀成功，redis 中商品数 - 1，用户信息也存入 redis 中 (为了相同用户只能秒杀一次)。</p><ul><li><p>沿用上面的整合 springboot 项目</p></li><li><p>代码逻辑：通过表单，点击一个按钮，之后功能实现传输到实现的逻辑上。为了凸显逻辑，在表单中只有一个隐藏的商品和一个按钮框</p></li><li><p>pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--hutools工具箱--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.0.M2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Redis工具类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>wiki.xsx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>yaml 配置文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment">#Redis服务器地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.137</span><span class="hljs-number">.130</span><br>    <span class="hljs-comment">#Redis密码</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment">#Redis数据库索引（默认为0）</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment">#Redis服务器连接端口</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-comment">#连接超时时间（毫秒）</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-comment">#连接池最大连接数（使用负值表示没有限制）</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><br>        <span class="hljs-comment">#最大阻塞等待时间(负数表示没限制)</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">10000</span><br>        <span class="hljs-comment">#连接池中的最大空闲连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">5</span><br>        <span class="hljs-comment">#连接池中的最小空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>导入 jquery</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417132451.png" alt="image-20220417132451279"></p></li><li><p>前端页面：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span> = <span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span> = <span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span> = <span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span> = <span class="hljs-string">"text/html; charset=UTF-8"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>iPhone 13 Pro !!! 1元秒杀！！！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span> = <span class="hljs-string">"msform"</span> <span class="hljs-attr">th:action</span> = <span class="hljs-string">"@{/doSecKill}"</span> <span class="hljs-attr">enctype</span> = <span class="hljs-string">"application/x-www-form-urlencoded"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"hidden"</span> <span class="hljs-attr">id</span> = <span class="hljs-string">"prodid"</span> <span class="hljs-attr">name</span> = <span class="hljs-string">"prodid"</span> <span class="hljs-attr">value</span> = <span class="hljs-string">"0101"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"button"</span> <span class="hljs-attr">id</span> = <span class="hljs-string">"miaosha_btn"</span> <span class="hljs-attr">name</span> = <span class="hljs-string">"seckill_btn"</span> <span class="hljs-attr">value</span> = <span class="hljs-string">"秒杀点我"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span> = <span class="hljs-string">"@{/js/jquery-3.6.0.js}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {</span><br><span class="language-javascript">            $(<span class="hljs-string">"#miaosha_btn"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> url = $(<span class="hljs-string">"#msform"</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">"action"</span>);</span><br><span class="language-javascript">                $.<span class="hljs-title function_">post</span>(url, $(<span class="hljs-string">"#msform"</span>).<span class="hljs-title function_">serialize</span>(), <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) {</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (data == <span class="hljs-string">"false"</span>) {</span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(<span class="hljs-string">"抢光了"</span>);</span><br><span class="language-javascript">                        $(<span class="hljs-string">"#miaosha_btn"</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">                    }</span><br><span class="language-javascript">                });</span><br><span class="language-javascript">            })</span><br><span class="language-javascript">        })</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>业务接口以及实现类</p><ul><li><p>接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_redis.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : springboot_redis</span><br><span class="hljs-comment"> * description : 秒杀业务接口</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-17【星期日】</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SecKill</span> {<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">doSecKill</span> <span class="hljs-params">(String uid, String prodId)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>实现类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_redis.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> wiki.xsx.core.handler.NumberHandler;<br><span class="hljs-keyword">import</span> wiki.xsx.core.handler.SetHandler;<br><span class="hljs-keyword">import</span> wiki.xsx.core.handler.StringHandler;<br><span class="hljs-keyword">import</span> wiki.xsx.core.util.RedisUtil;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : springboot_redis</span><br><span class="hljs-comment"> * description :</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-17【星期日】</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecKillImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecKill</span> {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doSecKill</span> <span class="hljs-params">(String uid, String prodId)</span> {<br>        <span class="hljs-type">NumberHandler</span> <span class="hljs-variable">numberHandler</span> <span class="hljs-operator">=</span> RedisUtil.getNumberHandler();<br>        <span class="hljs-type">SetHandler</span> <span class="hljs-variable">setHandler</span> <span class="hljs-operator">=</span> RedisUtil.getSetHandler();<br>        <span class="hljs-type">StringHandler</span> <span class="hljs-variable">stringHandler</span> <span class="hljs-operator">=</span> RedisUtil.getStringHandler();<br><br>        <span class="hljs-comment">//1 uid和prodid非空判断</span><br>        <span class="hljs-keyword">if</span> (uid == <span class="hljs-literal">null</span> || prodId == <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br><br>        <span class="hljs-comment">//2 拼接key</span><br>        <span class="hljs-comment">// 2.1 库存key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">kcKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">"sk:"</span> + prodId + <span class="hljs-string">":qt"</span>;<br>        <span class="hljs-comment">// 2.2 秒杀成功用户key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">"sk:"</span> + prodId + <span class="hljs-string">":user"</span>;<br><br>        <span class="hljs-comment">//3 获取库存，如果库存null，秒杀还没有开始</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">kc</span> <span class="hljs-operator">=</span> stringHandler.get(kcKey);<br>        <span class="hljs-keyword">if</span> (kc == <span class="hljs-literal">null</span>) {<br>            System.out.println(<span class="hljs-string">"秒杀还没有开始，请等待"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br><br>        <span class="hljs-comment">//4 判断用户是否重复秒杀操作</span><br>        <span class="hljs-keyword">if</span> (setHandler.contains(userKey, uid)) {<br>            System.out.println(<span class="hljs-string">"已经秒杀成功了，不能重复秒杀"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br><br>        <span class="hljs-comment">//因为kc为字符串，所以先转换城integer类型的</span><br>        <span class="hljs-comment">//5 判断如果商品数量，库存数量小于1，秒杀结束</span><br>        <span class="hljs-keyword">if</span> (Integer.parseInt(kc) &lt;= <span class="hljs-number">0</span>) {<br>            System.out.println(<span class="hljs-string">"秒杀已经结束了"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br><br>        <span class="hljs-comment">//6 库存-1</span><br>        numberHandler.decrementLong(kcKey);<br>        <span class="hljs-comment">//7 把秒杀成功用户添加清单里面</span><br>        setHandler.add(userKey, uid);<br><br>        System.out.println(<span class="hljs-string">"秒杀成功了.."</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_redis.controller;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<br><span class="hljs-keyword">import</span> com.zlw.springboot_redis.service.SecKillImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : springboot_redis</span><br><span class="hljs-comment"> * description : 秒杀案例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-17【星期日】</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecKillController</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    SecKillImpl secKillImpl;<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/doSecKill"</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSecKill</span> <span class="hljs-params">(String prodid, Model model)</span> {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userid</span> <span class="hljs-operator">=</span> RandomUtil.randomNumbers(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> String.valueOf(secKillImpl.doSecKill(userid, prodid));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试结果</p><ul><li><p>数据库里尚无商品信息</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417133258.png" alt="image-20220417133258134"></p></li><li><p>加入商品信息：<code>set sk:0101:qt 10</code></p></li><li><p>测试购买</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417133416.png" alt="image-20220417133416002"></p><p>库存耗尽</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417133454.png" alt="image-20220417133258134"></p></li><li><p>查看秒杀成功的用户 ID</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417133538.png" alt="image-20220417133538790"></p></li></ul></li><li><p>基本业务逻辑搭建完成</p></li></ul><h2 id="高并发测试"><a href="#高并发测试" class="headerlink" title="高并发测试"></a>高并发测试</h2><p>这部分代码有个缺陷，就是没有模拟同时按下秒杀按钮的，一步一步进行点击不会出错，但是如果遇到了高并发的数据，就会出现 bug。</p><p>我们通过使用 <strong>ab 工具</strong>模拟高并发进行测试</p><ul><li><p>首先在 Linux 上安装 httpd-tools：<code>yum -y install httpd-tools</code></p></li><li><p>具体参数设计，主要有几个比较重要</p><ul><li>-n 请求次数</li><li> -c 当前请求次数的并发请求</li><li> -T 设计的类型，可以是 post，get</li><li>-p 提交的参数</li></ul></li><li><p>在 <code>/tmp</code> 目录下创建 postfile 文件：录入数据</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417142912.png" alt="image-20220417142912290"></p></li><li><p>重置商品数量：<code>set sk:0101:qt 10</code></p></li><li><p>如何进行压力测试：<code>ab -n 1000 -c 100 -p /tmp/postfile -T application/x-www-form-urlencoded http://windows系统IP地址:8080/doSecKill</code></p><p>我的 windows 主机地址为：192.168.0.103，即我的测试命令为：<code>ab -n 1000 -c 100 -p /tmp/postfile -T application/x-www-form-urlencoded http://192.168.0.103:8080/doSecKill</code></p></li><li><p>执行完成查看数据库数据，发现存在<strong>负值</strong>，存在<strong>超卖现象</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417143421.png" alt="image-20220417143421871"></p></li></ul><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="增加连接池"><a href="#增加连接池" class="headerlink" title="增加连接池"></a>增加连接池</h3><p><strong>使用连接池解决连接超时问题。</strong></p><ul><li><p>引入依赖，开启连接池</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--使用 redis 连接池（无论 lettuce 还是 jedis 客户端，都需要）--&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></tbody></table></figure></li><li><p>由于 lettuce 连接池的配置在上文已经配好，故不再赘述。</p></li><li><p>打断点可以查看到连接池配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417150449.png" alt="image-20220417150449030"></p></li></ul><h3 id="增加乐观锁"><a href="#增加乐观锁" class="headerlink" title="增加乐观锁"></a>增加乐观锁</h3><p><strong>使用乐观锁解决超卖问题。</strong></p><ul><li><p>修改秒杀实现类，添加事务。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_redis.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> wiki.xsx.core.handler.NumberHandler;<br><span class="hljs-keyword">import</span> wiki.xsx.core.handler.SetHandler;<br><span class="hljs-keyword">import</span> wiki.xsx.core.handler.StringHandler;<br><span class="hljs-keyword">import</span> wiki.xsx.core.util.RedisUtil;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : springboot_redis</span><br><span class="hljs-comment"> * description :</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-17【星期日】</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecKillImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecKill</span> {<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doSecKill</span> <span class="hljs-params">(String uid, String prodId)</span> {<br>        <span class="hljs-comment">//1 uid和prodid非空判断</span><br>        <span class="hljs-keyword">if</span> (uid == <span class="hljs-literal">null</span> || prodId == <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br><br>        <span class="hljs-comment">//2 拼接key</span><br>        <span class="hljs-comment">// 2.1 库存key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">kcKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">"sk:"</span> + prodId + <span class="hljs-string">":qt"</span>;<br>        <span class="hljs-comment">// 2.2 秒杀成功用户key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">"sk:"</span> + prodId + <span class="hljs-string">":user"</span>;<br><br>        <span class="hljs-type">List</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> RedisUtil.getTransactionHandler().execute(handler -&gt; {<br>            <span class="hljs-comment">// 开启监控</span><br>            handler.watch(<span class="hljs-string">"sk:0101:qt"</span>);<br><br>            <span class="hljs-comment">// 获取对应事务字符串助手</span><br>            <span class="hljs-type">StringHandler</span> <span class="hljs-variable">stringHandler</span> <span class="hljs-operator">=</span> handler.getStringHandler();<br>            <span class="hljs-comment">// 获取对应事务数字助手</span><br>            <span class="hljs-type">NumberHandler</span> <span class="hljs-variable">numberHandler</span> <span class="hljs-operator">=</span> handler.getNumberHandler();<br>            <span class="hljs-comment">// 获取对应事务无序集合助手</span><br>            <span class="hljs-type">SetHandler</span> <span class="hljs-variable">setHandler</span> <span class="hljs-operator">=</span> handler.getSetHandler();<br><br>            <span class="hljs-comment">//3 获取库存，如果库存null，秒杀还没有开始</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">kc</span> <span class="hljs-operator">=</span> stringHandler.get(kcKey);<br>            <span class="hljs-keyword">if</span> (kc == <span class="hljs-literal">null</span>) {<br>                System.out.println(<span class="hljs-string">"秒杀还没有开始，请等待"</span>);<br>                <span class="hljs-keyword">return</span> Collections.singletonList(<span class="hljs-literal">false</span>);<br>            }<br><br>            <span class="hljs-comment">//4 判断用户是否重复秒杀操作</span><br>            <span class="hljs-keyword">if</span> (setHandler.contains(userKey, uid)) {<br>                System.out.println(<span class="hljs-string">"已经秒杀成功了，不能重复秒杀"</span>);<br>                <span class="hljs-keyword">return</span> Collections.singletonList(<span class="hljs-literal">false</span>);<br>            }<br><br>            <span class="hljs-comment">//因为kc为字符串，所以先转换城integer类型的</span><br>            <span class="hljs-comment">//5 判断如果商品数量，库存数量小于1，秒杀结束</span><br>            <span class="hljs-keyword">if</span> (Integer.parseInt(kc) &lt;= <span class="hljs-number">0</span>) {<br>                System.out.println(<span class="hljs-string">"秒杀已经结束了"</span>);<br>                <span class="hljs-keyword">return</span> Collections.singletonList(<span class="hljs-literal">false</span>);<br>            }<br><br>            <span class="hljs-comment">// 开启事务</span><br>            handler.beginTransaction();<br>            <span class="hljs-comment">//6 库存-1</span><br>            numberHandler.decrementLong(kcKey);<br>            <span class="hljs-comment">//7 把秒杀成功用户添加清单里面</span><br>            setHandler.add(userKey, uid);<br>            System.out.println(<span class="hljs-string">"秒杀成功了.."</span>);<br>            <span class="hljs-comment">// 提交事务返回结果</span><br>            <span class="hljs-keyword">return</span> handler.commit();<br>        });<br><br>        <span class="hljs-keyword">if</span> (execute == <span class="hljs-literal">null</span> || execute.size() == <span class="hljs-number">0</span> || execute.get(<span class="hljs-number">0</span>).equals(<span class="hljs-literal">false</span>)) {<br>            System.out.println(<span class="hljs-string">"秒杀失败！！！"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>使用 ab 工具测试：<code>ab -n 1000 -c 100 -p /tmp/postfile -T application/x-www-form-urlencoded http://192.168.0.103:8080/doSecKill</code></p></li><li><p>解决超卖问题</p><ul><li><p>剩余商品数目</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417220746.png" alt="image-20220417220746189"></p></li><li><p>抢购成功用户 ID</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417220758.png" alt="image-20220417220758449"></p></li></ul></li></ul><h3 id="库存遗留问题"><a href="#库存遗留问题" class="headerlink" title="库存遗留问题"></a>库存遗留问题</h3><p>增加了乐观锁之后，确实可以解决高并发问题，不会出现超卖的问题</p><p>增加并发量进行测试：<code>ab -n 2000 -c 300 -p /tmp/postfile -T application/x-www-form-urlencoded http://192.168.0.103:8080/doSecKill</code></p><p>执行结束后可以发现，商品会有一定程度的遗留：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220417221736.png" alt="image-20220417221736152"></p><p><strong>这是由于增加了乐观锁之后，假设一个人买了之后，版本改变了，下一个人都不能买了，所以出现了商品遗留的问题，商品都卖不出去。</strong>这就是库存遗留问题。</p><p>对于这个问题，我们只能使用 Lua 脚本的方式进行解决，<strong>watch 是 redis 服务中的乐观锁，Lua 脚本是 redis 中的悲观锁</strong>。</p><ul><li><p>增加一个接口方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">doSecKillByScript</span> <span class="hljs-params">(String uid, String prodId)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doSecKillByScript</span> <span class="hljs-params">(String uid, String prodId)</span> {<br>    <span class="hljs-type">ScriptHandler</span> <span class="hljs-variable">scriptHandler</span> <span class="hljs-operator">=</span> RedisUtil.getScriptHandler();<br>    <span class="hljs-comment">//Lua 脚本</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">secKillScript</span> <span class="hljs-operator">=</span> <span class="hljs-string">"local userid=KEYS[1];\r\n"</span> +<br>            <span class="hljs-string">"local prodid=KEYS[2];\r\n"</span> +<br>            <span class="hljs-string">"local qtkey='sk:'..prodid..\":qt\";\r\n"</span> +<br>            <span class="hljs-string">"local usersKey='sk:'..prodid..\":usr\";\r\n"</span> +<br>            <span class="hljs-string">"local userExists=redis.call(\"sismember\",usersKey,userid);\r\n"</span> +<br>            <span class="hljs-string">"if tonumber(userExists)==1 then \r\n"</span> +<br>            <span class="hljs-string">"   return \"2\";\r\n"</span> +<br>            <span class="hljs-string">"end\r\n"</span> +<br>            <span class="hljs-string">"local num= redis.call(\"get\" ,qtkey);\r\n"</span> +<br>            <span class="hljs-string">"if tonumber(num)&lt;=0 then \r\n"</span> +<br>            <span class="hljs-string">"   return \"0\";\r\n"</span> +<br>            <span class="hljs-string">"else \r\n"</span> +<br>            <span class="hljs-string">"   redis.call(\"decr\",qtkey);\r\n"</span> +<br>            <span class="hljs-string">"   redis.call(\"sadd\",usersKey,userid);\r\n"</span> +<br>            <span class="hljs-string">"end\r\n"</span> +<br>            <span class="hljs-string">"return \"1\";"</span>;<br>    <br>    <span class="hljs-comment">//执行Lua脚本</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> scriptHandler.excute(secKillScript, String.class, Arrays.asList(uid, prodId));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">"0"</span>.equals(result)) {<br>        System.err.println(<span class="hljs-string">"已抢空！！"</span>);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"1"</span>.equals(result)) {<br>        System.out.println(<span class="hljs-string">"抢购成功！！！！"</span>);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"2"</span>.equals(result)) {<br>        System.err.println(<span class="hljs-string">"该用户已抢过！！"</span>);<br>    } <span class="hljs-keyword">else</span> {<br>        System.err.println(<span class="hljs-string">"抢购异常！！"</span>);<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller 层调用新的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_redis.controller;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.RandomUtil;<br><span class="hljs-keyword">import</span> com.zlw.springboot_redis.service.SecKillImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * project : springboot_redis</span><br><span class="hljs-comment"> * description : 秒杀案例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-04-17【星期日】</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecKillController</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    SecKillImpl secKillImpl;<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/doSecKill"</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSecKill</span> <span class="hljs-params">(String prodid, Model model)</span> {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userid</span> <span class="hljs-operator">=</span> RandomUtil.randomNumbers(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> String.valueOf(secKillImpl.doSecKillByScript(userid, prodid));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>重置商品数量：<code>set sk:0101:qt 500</code></p></li><li><p>进行测试：<code>ab -n 2000 -c 300 -p /tmp/postfile -T application/x-www-form-urlencoded http://192.168.0.103:8080/doSecKill</code></p></li><li><p>测试结果</p><ul><li><p>控制台输出</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418104116.png" alt="image-20220418104116518"></p></li><li><p>数据库数据</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418104149.png" alt="image-20220418104149641"></p></li></ul></li></ul><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis 持久化</h1><h2 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h2><p>官网介绍：<a href="http://www.redis.io/">http://www.redis.io</a></p><p>具体 Redis 提供了 2 个不同形式的持久化方式</p><ul><li>RDB（Redis DataBase）</li><li>AOF（Append Of File）</li></ul><h2 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>在<strong>指定的时间间隔</strong>内将内存中的<strong>数据集快照</strong>写入磁盘， 也就是 Snapshot 快照，它恢复时是将快照文件直接读到内存里。</p><h3 id="具体的备份流程"><a href="#具体的备份流程" class="headerlink" title="具体的备份流程"></a>具体的备份流程</h3><p>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能</p><ul><li>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。</li><li>RDB 的缺点是最后一次持久化后的数据可能丢失。</li></ul><p>数据如果有变化的，会在 <code>/usr/local/bin</code> 目录下生成一个 dum.rdb 的文件</p><h3 id="Fork-进程"><a href="#Fork-进程" class="headerlink" title="Fork 进程"></a>Fork 进程</h3><p>Fork 的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</p><ul><li>在 Linux 程序中，fork () 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统调用，出于效率考虑，Linux 中引入了 “写时复制技术”</li><li> 一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul><h3 id="RDB持久化流程"><a href="#RDB持久化流程" class="headerlink" title="RDB持久化流程"></a>RDB 持久化流程</h3><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418182127.png" alt="image-20220418182127866"></p><h3 id="dump-rdb-文件"><a href="#dump-rdb-文件" class="headerlink" title="dump.rdb 文件"></a>dump.rdb 文件</h3><p>在 redis.conf 中配置文件名称，默认为 dump.rdb</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418175809.png" alt="image-20220418175809236"></p><h3 id="配置位置"><a href="#配置位置" class="headerlink" title="配置位置"></a>配置位置</h3><p>rdb 文件的保存路径，也可以修改。默认为 Redis 启动时命令行所在的目录下</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418175820.png" alt="image-20220418175820816"></p><h3 id="如何触发-RDB-快照：保存策略"><a href="#如何触发-RDB-快照：保存策略" class="headerlink" title="如何触发 RDB 快照：保存策略"></a>如何触发 RDB 快照：保存策略</h3><h4 id="配置文件中默认的快照配置"><a href="#配置文件中默认的快照配置" class="headerlink" title="配置文件中默认的快照配置"></a>配置文件中默认的快照配置</h4><p>取消注释</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418180643.png" alt="image-20220418180643091"></p><h4 id="Save"><a href="#Save" class="headerlink" title="Save"></a>Save</h4><p>格式：<code>save 秒钟 写操作次数</code></p><p>RDB 是整个内存的压缩过的 Snapshot，RDB 的数据结构，可以配置复合的快照触发条件</p><p>默认是 1 分钟内改了 1 万次，或 5 分钟内改了 100 次，或 60 分钟内改了 1 次。</p><p>一般直接禁用，不设置 save 指令，或者给 save 传入空字符串。</p><h4 id="命令-save-VS-bgsave"><a href="#命令-save-VS-bgsave" class="headerlink" title="命令 save VS bgsave"></a>命令 save VS bgsave</h4><p><code>save</code> ：save 时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p><code>bgsave</code>：Redis 会在后台异步进行快照操作， 快照同时还可以响应客户端请求。</p><p>可以通过 <code>lastsave</code> 命令获取最后一次成功执行快照的时间</p><h4 id="flushall-命令"><a href="#flushall-命令" class="headerlink" title="flushall 命令"></a>flushall 命令</h4><p>执行 flushall 命令，也会产生 dump.rdb 文件，但里面是空的，无意义。</p><h4 id="stop-writes-on-bgsave-error"><a href="#stop-writes-on-bgsave-error" class="headerlink" title="stop-writes-on-bgsave-error"></a>stop-writes-on-bgsave-error</h4><p>当 Redis 无法写入磁盘的话，直接关掉 Redis 的写操作。推荐 yes。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418180933.png" alt="image-20220418180932974"></p><h4 id="rdbcompression-压缩文件"><a href="#rdbcompression-压缩文件" class="headerlink" title="rdbcompression 压缩文件"></a>rdbcompression 压缩文件</h4><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis 会采用 <strong>LZF 算法</strong>进行压缩。</p><p>如果你不想消耗 CPU 来进行压缩的话，可以设置为关闭此功能。推荐 yes。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418181013.png" alt="image-20220418181013450"></p><h4 id="rdbchecksum-检查完整性"><a href="#rdbchecksum-检查完整性" class="headerlink" title="rdbchecksum 检查完整性"></a>rdbchecksum 检查完整性</h4><p>在存储快照后，还可以让 redis 使用 CRC64 算法来进行数据校验</p><p>但是这样做会增加大约 10% 的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p><p>推荐 yes。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418181045.png" alt="image-20220418181045415"></p><h4 id="rdb-的备份"><a href="#rdb-的备份" class="headerlink" title="rdb 的备份"></a>rdb 的备份</h4><p>先通过 config get dir 查询 rdb 文件的目录</p><p>将 *.rdb 的文件拷贝到别的地方</p><p>rdb 的恢复：</p><ul><li>关闭 Redis</li><li> 先把备份的文件拷贝到工作目录下 <code>cp 旧的dump.rdb dump.rdb</code></li><li>启动 Redis, 备份数据会直接加载</li></ul><h3 id="优势与劣势"><a href="#优势与劣势" class="headerlink" title="优势与劣势"></a>优势与劣势</h3><ul><li><p>优势：</p><ul><li><p>适合大规模的数据恢复</p></li><li><p>对数据完整性和一致性要求不高更适合使用</p></li><li><p>节省磁盘空间</p></li><li><p>恢复速度快</p></li></ul></li><li><p>劣势：</p><ul><li><p>Fork 的时候，内存中的数据被克隆了一份，大致 2 倍的膨胀性需要考虑</p></li><li><p>虽然 Redis 在 fork 时使用了<strong>写时复制技术</strong> , 但是如果数据庞大时还是比较消耗性能。</p></li><li><p>在备份周期在一定间隔时间做一次备份，所以如果 Redis 意外 down 掉的话，就会丢失最后一次快照后的所有修改。</p></li></ul></li></ul><h3 id="如何停止-RDB"><a href="#如何停止-RDB" class="headerlink" title="如何停止 RDB"></a>如何停止 RDB</h3><p>动态停止 RDB：<code>redis-cli config set save “”</code></p><p><strong>save 后给空值，表示禁用保存策略</strong></p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p><strong>以日志的形式来记录每个写操作（增量保存）</strong>，将 Redis 执行过的所有写指令记录下来 (<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="AOF-持久化流程"><a href="#AOF-持久化流程" class="headerlink" title="AOF 持久化流程"></a>AOF 持久化流程</h3><ol><li>客户端的请求写命令会被 append 追加到 AOF 缓冲区内；</li><li>AOF 缓冲区根据 AOF 持久化策略 [always,everysec,no] 将操作 sync 同步到磁盘的 AOF 文件中；</li><li>AOF 文件大小超过重写策略或手动重写时，会对 AOF 文件 rewrite 重写，压缩 AOF 文件容量；</li><li>Redis 服务重启时，会重新 load 加载 AOF 文件中的写操作达到数据恢复的目的；</li></ol><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220418182219.png" alt="image-20220418182219165"></p><h3 id="AOF-默认不开启"><a href="#AOF-默认不开启" class="headerlink" title="AOF 默认不开启"></a>AOF 默认不开启</h3><p>可以在 redis.conf 中配置文件名称，默认为 <strong>appendonly.aof</strong><br>AOF 文件的保存路径，同 RDB 的路径一致。</p><h3 id="AOF-和-RDB-同时开启的情况"><a href="#AOF-和-RDB-同时开启的情况" class="headerlink" title="AOF 和 RDB 同时开启的情况"></a>AOF 和 RDB 同时开启的情况</h3><p>AOF 和 RDB 同时开启，系统默认取 AOF 的数据（数据不会存在丢失）</p><h3 id="AOF-启动-修复-恢复"><a href="#AOF-启动-修复-恢复" class="headerlink" title="AOF 启动 / 修复 / 恢复"></a>AOF 启动 / 修复 / 恢复</h3><ul><li>AOF 的备份机制和性能虽然和 RDB 不同，但是备份和恢复的操作同 RDB 一样，都是拷贝备份文件，需要恢复时再拷贝到 Redis 工作目录下，启动系统即加载。</li><li>正常恢复<ol><li>修改默认的 <code>appendonly no</code>，改为 yes </li><li>将有数据的 aof 文件复制一份保存到对应目录 (查看目录：<code>config get dir</code>)</li><li> 恢复：重启 redis 然后重新加载</li></ol></li><li>异常恢复<ol><li>修改默认的 appendonly no，改为 yes</li><li> 如遇到 AOF 文件损坏，通过 /usr/local/bin/redis-check-aof–fix appendonly.aof 进行恢复</li><li>备份被写坏的 AOF 文件</li><li>恢复：重启 redis，然后重新加载</li></ol></li></ul><h3 id="AOF-同步频率设置"><a href="#AOF-同步频率设置" class="headerlink" title="AOF 同步频率设置"></a>AOF 同步频率设置</h3><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220419025851.png" alt="image-20220419025851393"></p><p><code>appendfsync always</code><br>始终同步，每次 Redis 的写入都会立刻记入日志；性能较差但数据完整性比较好</p><p><code>appendfsync everysec</code><br>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><p><code>appendfsync no</code><br>redis 不主动进行同步，把同步时机交给操作系统。</p><h3 id="Rewrite-压缩"><a href="#Rewrite-压缩" class="headerlink" title="Rewrite 压缩"></a>Rewrite 压缩</h3><ol><li><p>是什么？</p><p>AOF 采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。可以使用命令 <code>bgrewriteaof</code>。</p></li><li><p>重写原理，如何实现重写</p><p>AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写 (也是先写临时文件最后再 rename)，<strong>redis4.0 版本后的重写，是指上就是把 rdb 的快照，以二级制的形式附在新的 aof 头部，作为已有的历史数据，替换掉原来的流水账操作</strong>。</p><p><strong>no-appendfsync-on-rewrite</strong>：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220419025816.png" alt="image-20220419025816691"></p><p>如果 <code>no-appendfsync-on-rewrite=yes</code>, 不写入 aof 文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据（降低数据安全性，提高性能）。<strong>如果这个时候 redis 挂掉，就会丢失数据。丢失多少数据呢？在 linux 的操作系统的默认设置下，最多会丢失 30s 的数据</strong>。如果 <code>no-appendfsync-on-rewrite=no</code>, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞（数据安全，但是性能降低）。</p><p><strong>触发机制，何时重写</strong><br>Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于 64M 时触发重写，虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定 Redis 要满足一定条件才会进行重写。<br><code>auto-aof-rewrite-percentage</code>：设置重写的基准值，文件达到 100% 时开始重写（文件是原来重写后文件的 2 倍时触发）<br><code>auto-aof-rewrite-min-size</code>：设置重写的基准值，最小文件 64MB。达到这个值开始重写。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220419025749.png" alt="image-20220419025749396"></p><p>例如：文件在达到 70MB 时开始重写，重写完成降到 50MB，下次什么时候开始重写？</p><p><strong>答案是 100MB（50+50*100%）&gt;64</strong><br>系统载入时或者上次重写完毕时，Redis 会记录此时 AOF 大小，设为 base_size, 如果 Redis 的 <strong>AOF 当前大小 &gt;=base_size +base_size*100% (默认)</strong> 且<strong>当前大小 &gt;=64mb (默认)</strong> 的情况下，Redis 会对 AOF 进行重写。</p></li><li><p>重写流程</p><ol><li>bgrewriteaof 触发重写，判断是否当前有 bgsave 或 bgrewriteaof 在运行，如果有，则等待该命令结束后再继续执行。</li><li>主进程 fork 出子进程执行重写操作，保证主进程不会阻塞。</li><li>子进程遍历 redis 内存中数据到临时文件，客户端的写请求同时写入 aof_buf 缓冲区和 aof_rewrite_buf 重写缓冲区保证原 AOF 文件完整以及新 AOF 文件生成期间的新的数据修改动作不会丢失。</li><li><ul><li>子进程写完新的 AOF 文件后，向主进程发信号，父进程更新统计信息。</li><li>主进程把 aof_rewrite_buf 中的数据写入到新的 AOF 文件。</li></ul></li><li>使用新的 AOF 文件覆盖旧的 AOF 文件，完成 AOF 重写。</li></ol><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220419030204.png" alt="image-20220419030204042"></p></li></ol><h3 id="优势与劣势-1"><a href="#优势与劣势-1" class="headerlink" title="优势与劣势"></a>优势与劣势</h3><ul><li><p>优势：</p><ul><li><p>备份机制更稳健，丢失数据概率更低。</p></li><li><p>可读的日志文本，通过操作 AOF 稳健，可以处理误操作。</p></li></ul></li><li><p>劣势：</p><ul><li><p>比起 RDB 占用更多的磁盘空间。</p></li><li><p>恢复备份速度要慢。</p></li><li><p>每次读写都同步的话，有一定的性能压力。</p></li><li><p>存在个别 Bug，造成恢复不能。</p></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="选择哪个持久化方式"><a href="#选择哪个持久化方式" class="headerlink" title="选择哪个持久化方式"></a>选择哪个持久化方式</h3><p>官方推荐两个都启用。<br>如果对数据不敏感，可以选单独用 RDB。<br>不建议单独用 AOF，因为可能会出现 Bug。<br>如果只是做纯内存缓存，可以都不用。</p><h3 id="官方建议"><a href="#官方建议" class="headerlink" title="官方建议"></a>官方建议</h3><ul><li><p>RDB 持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p></li><li><p>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 redis 协议追加保存每次写的操作到文件末尾.</p></li><li><p>Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大</p></li><li><p>只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式.</p></li><li><p><strong>同时开启两种持久化方式</strong></p></li><li><p>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整.</p></li><li><p>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。那要不要只使用 AOF 呢？</p><p>建议不要，因为 RDB 更适合用于备份数据库 (AOF 在不断变化不好备份)， 快速重启，而且不会有 AOF 可能潜在的 bug，留着作为一个万一的手段。</p></li><li><p>性能建议：</p><p>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够了，只保留 <code>save 900 1</code> 这条规则。<br>如果使用 AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只 load 自己的 AOF 文件就可以了。<br><strong>代价</strong>：</p><p>一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。<br>只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值 64M 太小了，可以设到 5G 以上。<br>默认超过原大小 100% 大小时重写可以改到适当的数值。</p></li></ul><h1 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h1><h2 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h2><p>主机数据更新后根据配置和策略， 自动同步到备机的 master/slaver 机制，Master 以写为主，Slave 以读为主。</p><h2 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h2><ul><li>读写分离，性能扩展</li><li>容灾快速恢复</li></ul><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220419083537.png" alt="image-20220419083537477"></p><h2 id="具体操作：主从复制"><a href="#具体操作：主从复制" class="headerlink" title="具体操作：主从复制"></a>具体操作：主从复制</h2><ol><li><p>新建目录：/myredis  <code>mkdis /myredis</code></p></li><li><p><strong>注释掉</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220410225644.png" alt="image-20220410225644567"></p></li><li><p>开启 daemonize yes</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420105020.png" alt="image-20220420105020021"></p></li><li><p>关闭 Appendonly 或者更换其名字</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420105216.png" alt="image-20220420105216824"></p></li><li><p>拷贝 redis.conf 文件到：/myredis  <code>cp /etc/redis.conf /myredis/redis.conf</code></p></li><li><p>生成多个 redis.conf 文件，分别代表不同的数据库，模拟一主多从</p><ul><li><p><code>vim redis端口号.conf</code></p></li><li><p>文件内容</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">include /myredis/redis.conf<br>pidfile /var/run/redis_端口号.pid<br>port 端口号<br>dbfilename dump端口号.rdb<br><span class="hljs-comment"># 以下是本次演示时（同一服务器下的一主多从）的从库需要的配置</span><br>replicaof 主库IP 6379<br>masterauth root<br><span class="hljs-comment"># 设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认 100</span><br><span class="hljs-comment"># 主配置文件也有，在这里配置会优先使用这里的</span><br>replica-priority 数字<br></code></pre></td></tr></tbody></table></figure></li><li><p>这里我采用一主两从的设置，即：主（6379），从（6380，6381）</p></li><li><p><strong>（注意：集群时需要添加到每个 redis 环境的 conf 中！！）</strong>修改 slave 从库配置文件，指定主库以及密码</p><p><code>replicaof IP地址 端口</code></p><p><code>masterauth 主库密码</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420120159.png" alt="image-20220420120159501"></p></li></ul></li><li><p>在 <code>/myredis</code> 目录下启动三个 redis：<code>redis-server redis端口号.conf</code></p></li><li><p>查看系统进程，看看三个 redis 服务是否启动：<code>ps -ef|grep redis</code></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420112803.png" alt="image-20220420112802952"></p></li><li><p>连接 redis 客户端：<code>redis-cli -p 端口号 -a 密码</code></p></li><li><p>查看主机运行情况，打印主从复制的相关信息：<code>info replication</code>，可以看见主从数据库。</p><ul><li><p>6379</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420154411.png" alt="image-20220420154411186"></p></li><li><p>6380</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420154448.png" alt="image-20220420154448320"></p></li><li><p>6381</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420154507.png" alt="image-20220420154507730"></p></li></ul></li><li><p>测试主从库</p><ul><li><p>主库存值，从库取值。</p><ul><li><p>测试主库（6379）存值情况</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420175326.png" alt="image-20220420175326095"></p></li><li><p>测试从库取值情况</p><ul><li><p>6380</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420175433.png" alt="image-20220420175433209"></p></li><li><p>6381</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420175549.png" alt="image-20220420175443513"></p></li></ul></li></ul></li><li><p>测试从库只读</p><ul><li>6380<img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420175831.png" alt="image-20220420175831751"></li><li>6381<img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420175854.png" alt="image-20220420175854379"></li></ul></li></ul></li></ol><h2 id="常用的三种操作"><a href="#常用的三种操作" class="headerlink" title="常用的三种操作"></a>常用的三种操作</h2><h3 id="一主多仆"><a href="#一主多仆" class="headerlink" title="一主多仆"></a>一主多仆</h3><p>假设数据库中已经有了 <strong>”k1,k2,k3“</strong> 三个数据，一个 Slave 在这时挂掉，在挂掉的这段时间里，Master 写入了另外三个数据 <strong>“k4,k5,k6”</strong> ，在挂掉的 Slave 连回来之后，该 Slave 的数据应为完整的六个数据：<strong>“k1,k2,k3,k4,k5,k6”</strong>。</p><p>Master 挂掉之后，Slave 还是 Slave，并不会丢失 Master，在 Master 重新连接之后，恢复正常。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420183516.png" alt="image-20220420182541088"></p><h3 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h3><p>即上一个 Slave 可以是下一个 slave 的 Master，这个中间的 Slave 同样可以接收其他 Slave 的连接和同步请求，那么该 Slave 作为了链条中下一个的 Master, 可以<strong>有效减轻 Master 的写压力</strong>，去中心化降低风险。</p><p>命令：<code>replicaof ip地址 端口号</code></p><p>中途变更转向：<strong>会清除之前的数据，重新建立拷贝最新的</strong>。<br>风险是一旦某个 Slave 宕机，后面的 Slave 都没法备份<br>主机挂了，从机还是从机，无法写数据了。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420183526.png" alt="image-20220420183526355"></p><h3 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h3><p>当一个 Master 宕机后，后面的 Slave 可以立刻升为 Master，其后面的 Slave 不用做任    何修改。</p><p>用 <code>replicaof no one</code> 将从机变为主机。</p><h2 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h2><ul><li>Slave 启动成功连接到 M    aster 后会发送一个 sync 命令</li><li> Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，Master 将传送整个数据文件到 Slave, 以完成一次完全同步</li><li>全量复制：而 Slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master 继续将新的所有收集到的修改命令依次传给 Slave, 完成同步</li><li>但是只要是重新连接 Master, 一次完全同步（全量复制) 将被自动执行</li></ul><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420183535.png" alt="image-20220420183535411"></p><h2 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式 (sentinel)"></a>哨兵模式 (sentinel)</h2><h3 id="是什么-3"><a href="#是什么-3" class="headerlink" title="是什么"></a>是什么</h3><p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220420184303.png" alt="image-20220420184303748"></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="调整为一主二仆模式"><a href="#调整为一主二仆模式" class="headerlink" title="调整为一主二仆模式"></a>调整为一主二仆模式</h4><p>调整为一主二仆模式，主库（6379）带着从库（6380，6381）。</p><h4 id="创建-sentinel-conf-文件"><a href="#创建-sentinel-conf-文件" class="headerlink" title="创建 sentinel.conf 文件"></a>创建 sentinel.conf 文件</h4><p>自定义的 /myredis 目录下新建 sentinel.conf 文件，名字绝不能出错。</p><h4 id="配置哨兵，填写内容"><a href="#配置哨兵，填写内容" class="headerlink" title="配置哨兵，填写内容"></a>配置哨兵，填写内容</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sentinel monitor 监控对象名称（任意） IP地址 端口号 认为主库失效的哨兵数<br>sentinel auth-pass 监控对象名称（任意） 密码<br></code></pre></td></tr></tbody></table></figure><p>例如：</p><p><code>sentinel monitor mymaster 127.0.0.1 6379 1</code> </p><p><code>sentinel auth-pass mymaster root</code></p><p>其中 mymaster 为监控对象起的服务器名称， “1” 为指明当有多少个 sentinel 认为一个 master 失效时，master 才算真正失效。</p><h4 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h4><p>执行 <code>redis-sentinel /myredis/sentinel.conf</code></p><p>可以看到哨兵的端口以及 PID，监控的主库（6379），两个从库（6380，6381）</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220421013058.png" alt="image-20220421013058554"></p><h4 id="当主库挂掉，从库选举中产生新的主库"><a href="#当主库挂掉，从库选举中产生新的主库" class="headerlink" title="当主库挂掉，从库选举中产生新的主库"></a>当主库挂掉，从库选举中产生新的主库</h4><p>根据优先级别：<code>replica-priority 数字</code> ，**(大概 10 秒左右可以看到哨兵窗口日志，切换了新的主库)**</p><p>原主库重启后会变为从库</p><p><strong>测试 6379 主库挂掉</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220421013913.png" alt="image-20220421013913594"></p><p>可以看到哨兵<strong>检测到 6379 主库挂掉</strong>之后，<strong>投票 6380 从库作为新的主库</strong>，并把挂掉的 6379 主库<strong>作为自己的从库</strong>。</p><p>并在后台自动修改了 sentinel.conf，使 6380 成为哨兵监控的主库</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220421014143.png" alt="image-20220421014143403"></p><h4 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h4><p>由于所有的写操作都是先在 Master 上操作，然后同步更新到 Slave 上，所以从 Master 同步到 Slave 机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave 机器数量的增加也会使这个问题更加严重。</p><h3 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h3><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220421014458.png" alt="image-20220421014458184"></p><ul><li>优先级：在 redis.conf 中默认：<code>replica-priority 100</code>，值越小优先级越高</li><li>偏移量：是指获得原主机数据<strong>最全</strong>的</li><li> runid：每个 redis 实例启动后都会随机生成一个 40 位的 runid</li></ul><h3 id="Java代码实现哨兵模式"><a href="#Java代码实现哨兵模式" class="headerlink" title="Java代码实现哨兵模式"></a>Java 代码实现哨兵模式</h3><p>使用 redisson 实现哨兵模式，可参考<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">官方文档</a>。</p><p><strong>依赖</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>配置</strong></p><p>application.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">redisson:</span><br>      <span class="hljs-attr">file:</span> <span class="hljs-string">classpath:redisson.yaml</span><br></code></pre></td></tr></tbody></table></figure><p>redisson.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 示例配置</span><br><span class="hljs-attr">sentinelServersConfig:</span><br>  <span class="hljs-attr">idleConnectionTimeout:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-attr">pingTimeout:</span> <span class="hljs-number">1000</span><br>  <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">10000</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">3000</span><br>  <span class="hljs-attr">retryAttempts:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">retryInterval:</span> <span class="hljs-number">1500</span><br>  <span class="hljs-attr">reconnectionTimeout:</span> <span class="hljs-number">3000</span><br>  <span class="hljs-attr">failedAttempts:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">密码</span><br>  <span class="hljs-attr">subscriptionsPerConnection:</span> <span class="hljs-number">5</span><br>  <span class="hljs-attr">clientName:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">loadBalancer:</span> <span class="hljs-type">!&lt;org.redisson.connection.balancer.RoundRobinLoadBalancer&gt;</span> {}<br>  <span class="hljs-attr">slaveSubscriptionConnectionMinimumIdleSize:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">slaveSubscriptionConnectionPoolSize:</span> <span class="hljs-number">50</span><br>  <span class="hljs-attr">slaveConnectionMinimumIdleSize:</span> <span class="hljs-number">32</span><br>  <span class="hljs-attr">slaveConnectionPoolSize:</span> <span class="hljs-number">64</span><br>  <span class="hljs-attr">masterConnectionMinimumIdleSize:</span> <span class="hljs-number">32</span><br>  <span class="hljs-attr">masterConnectionPoolSize:</span> <span class="hljs-number">64</span><br>  <span class="hljs-attr">readMode:</span> <span class="hljs-string">"SLAVE"</span><br>  <span class="hljs-attr">sentinelAddresses:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">"IP:端口"</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">"redis://IP:端口"</span><br>  <span class="hljs-attr">masterName:</span> <span class="hljs-string">"mymaster"</span><br>  <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">threads:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">nettyThreads:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">codec:</span> <span class="hljs-type">!&lt;org.redisson.codec.JsonJacksonCodec&gt;</span> {}<br><span class="hljs-string">"transportMode"</span><span class="hljs-string">:"NIO"</span><br></code></pre></td></tr></tbody></table></figure><h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis 集群</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>容量不够，redis 如何进行扩容？</p><p>并发写操作， redis 如何分摊？</p><p><strong>另外，主从模式、薪火相传模式，主机宕机，导致 ip 地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息</strong>。</p><p>之前通过代理主机来解决，但是 <strong>redis3.0</strong> 中提供了解决方案。就是 <strong>无中心化集群</strong>配置。</p><h2 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h2><p>Redis 集群实现了对 Redis 的水平扩容，即启动 N 个 redis 节点，将整个数据库分布存储在这 N 个节点中，每个节点存储总数据的 1/N。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><h2 id="删除持久化数据"><a href="#删除持久化数据" class="headerlink" title="删除持久化数据"></a>删除持久化数据</h2><p><strong>将 rdb,aof 文件都删除</strong></p><h2 id="制作-6-个实例"><a href="#制作-6-个实例" class="headerlink" title="制作 6 个实例"></a>制作 6 个实例</h2><h3 id="配置基本信息"><a href="#配置基本信息" class="headerlink" title="配置基本信息"></a>配置基本信息</h3><p>开启 daemonize yes<br>Pid 文件名字<br>指定端口<br>Log 文件名字<br>Dump.rdb 名字<br>Appendonly 关掉或者换名字</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus</title>
    <link href="/posts/33152/"/>
    <url>/posts/33152/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h1><p>学习 MyBatis-Plus 之前要先学 MyBatis–&gt;Spring—&gt;SpringMVC</p><p>为什么要学它？MyBatisPlus 可以节省我们大量的时间，所有 CRUD 代码都可以自动完成</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>是什么？</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220327001841.jpg" alt="mybatis-plus"></p><p><a href="https://baomidou.com/">官网</a></p><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="工程搭建"><a href="#工程搭建" class="headerlink" title="工程搭建"></a>工程搭建</h2><p>我们将通过一个简单的 Demo 来阐述 MyBatis-Plus 的强大功能，在此之前，我们假设您已经：</p><ul><li>拥有 Java 开发环境以及相应 IDE</li><li> 熟悉 Spring Boot</li><li> 熟悉 Maven</li></ul><ol><li><p> 创建数据库 <code>mybatis_plus</code></p></li><li><p>创建数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> <span class="hljs-keyword">user</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br>(<br>    id <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'主键ID'</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'姓名'</span>,<br>    age <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'年龄'</span>,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'邮箱'</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><span class="hljs-comment">--真实开发环境中,还需要version(乐观锁),deleted(逻辑删除),gmt_create(创建时间),gmt_modified(修改时间)</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>插入数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (id, name, age, email) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-string">'Jone'</span>, <span class="hljs-number">18</span>, <span class="hljs-string">'test1@baomidou.com'</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">'Jack'</span>, <span class="hljs-number">20</span>, <span class="hljs-string">'test2@baomidou.com'</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">'Tom'</span>, <span class="hljs-number">28</span>, <span class="hljs-string">'test3@baomidou.com'</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-string">'Sandy'</span>, <span class="hljs-number">21</span>, <span class="hljs-string">'test4@baomidou.com'</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-string">'Billie'</span>, <span class="hljs-number">24</span>, <span class="hljs-string">'test5@baomidou.com'</span>);<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写项目，使用 SpringBoot 初始化！</p></li><li><p>导入依赖</p><p>我们使用 mybatis-plus 可以节省我们大量的代码，尽量不要同时导入 mybatis 和 mybatis-plus 因为版本有差异！</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mysql--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis-plus-generator--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>配置 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>传统的方式 pojo-dao (连接 mybatis, 配置 mapper.xml 文件)-service-controller</p></li><li><p>使用了 mybatis-plus 之后</p><ul><li><p>pojo（类名与表名一致，否则加上 <code>@TableName("表名")</code>）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.mybatis_plus_study.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-keyword">private</span> Long id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> Integer age;<br>   <span class="hljs-keyword">private</span> String email;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>mapper 接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.mybatis_plus_study.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.zlw.mybatis_plus_study.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//在对应的mapper上面继承基本的类 BaseMapper</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; {<br>    <span class="hljs-comment">//所有CRUD操作都已经编写完成了</span><br>    <span class="hljs-comment">//你不需要向以前一样配置一大堆文件了!</span><br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>测试类中测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.mybatis_plus_study;<br><br><span class="hljs-keyword">import</span> com.zlw.mybatis_plus_study.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.zlw.mybatis_plus_study.pojo.User;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusStudyApplicationTests</span> {<br><br>   <span class="hljs-comment">//继承了BaseMapper, 所有的方法都来自己父类</span><br>   <span class="hljs-comment">//我们也可以编写自己的扩展方法</span><br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-comment">//参数是一个Wrapper , 条件构造器,这里我们先不用 --null</span><br>      <span class="hljs-comment">//查询全部用户</span><br>      List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br>      users.forEach(System.out::println);<br>   }<br><br>}<br></code></pre></td></tr></tbody></table></figure><p>查询结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png"></p></li><li><p>思考问题</p><ol><li><p>sql 谁帮我们写的？</p><p>—mybatis-plus</p></li><li><p>方法谁帮我们写的？</p><p>—mybatis-plus</p></li></ol></li></ol><h2 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h2><p>我们所有的 sql 是不可见的，我们希望知道他是怎么执行的，所以我们必须看日志！</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置日志  (默认控制台输出)</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%E6%97%A5%E5%BF%97.png"></p><h2 id="CRUD-扩展"><a href="#CRUD-扩展" class="headerlink" title="CRUD 扩展"></a>CRUD 扩展</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 插入一条记录</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T entity)</span>;<br></code></pre></td></tr></tbody></table></figure><p><strong>参数说明</strong></p><p>| 类型 | 参数名 | 描述 | | :–: | :—-: | :——: | | T | entity | 实体对象 |</p><hr><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>{<br>        User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">"AWEI"</span>);<br>        user.setAge(<span class="hljs-number">21</span>);<br>        user.setEmail(<span class="hljs-string">"iszlw@foxmail.com"</span>);<br>        Integer result=userMapper.insert(user); <span class="hljs-comment">//会帮我们自动生成id</span><br>        System.out.println(result); <span class="hljs-comment">//受影响的行数</span><br>        System.out.println(user); <span class="hljs-comment">//通过日志发现id会自动回填</span><br>        }<br></code></pre></td></tr></tbody></table></figure><p>结果为</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8Binsert.png"></p><p>可以看到自动生成了 ID，<strong>数据库插入的 id 的默认值为：全局的唯 —id。</strong></p><h3 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h3><p><strong>默认 ID_WORKER 全局唯一 id</strong></p><p><strong>对应数据库中的主键 (uuid. 自增 id. 雪花算法.redis.zookeeper)</strong></p><p>分布式系统唯一 id 生成:<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><p><strong>雪花算法 Twitter 的 snowflake 算法</strong></p><p>snowflake 是 Twitter 开源的分布式 ID 生成算法，结果是一个 long 型的 ID。其核心思想是：使用 41bit 作为毫秒数，10bit 作为机器的 ID（5 个 bit 是数据中心，5 个 bit 的机器<br>ID），12bit 作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是 0. 可以保证几乎全球唯一</p><p><strong>主键自增</strong></p><p><strong>默认主键生成策略：雪花算法</strong></p><p>假如需要配置主键自增:</p><ol><li><p>实体类字段上 <code>@TableId(type = IdType.AUTO)</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-meta">@TableId</span> (type = IdType.AUTO)<br>   <span class="hljs-keyword">private</span> Long id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> Integer age;<br>   <span class="hljs-keyword">private</span> String email;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>数据库字段一定要是<strong>自增</strong> !</p></li><li><p>结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8Binsert%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E.png"></p></li></ol><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"> AUTO</td><td align="left"> 数据库 ID 自增</td></tr><tr><td align="left"> NONE</td><td align="left"> 无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td></tr><tr><td align="left">INPUT</td><td align="left">insert 前自行 set 主键值</td></tr><tr><td align="left"> ASSIGN_ID</td><td align="left"> 分配 ID (主键类型为 Number (Long 和 Integer) 或 String)(since 3.3.0), 使用接口 <code>IdentifierGenerator</code> 的方法 <code>nextId</code>(默认实现类为 <code>DefaultIdentifierGenerator</code> 雪花算法)</td></tr><tr><td align="left">ASSIGN_UUID</td><td align="left"> 分配 UUID, 主键类型为 String (since 3.3.0), 使用接口 <code>IdentifierGenerator</code> 的方法 <code>nextUUID</code>(默认 default 方法)</td></tr><tr><td align="left"><del>ID_WORKER</del></td><td align="left"> 分布式全局唯一 ID 长整型类型 (please use <code>ASSIGN_ID</code>)</td></tr><tr><td align="left"><del>UUID</del></td><td align="left">32 位 UUID 字符串 (please use <code>ASSIGN_UUID</code>)</td></tr><tr><td align="left"><del>ID_WORKER_STR</del></td><td align="left"> 分布式全局唯一 ID 字符串类型 (please use <code>ASSIGN_ID</code>)</td></tr></tbody></table><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 whereWrapper 条件，更新记录</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.ENTITY)</span> T updateEntity,<span class="hljs-meta">@Param</span> (Constants.WRAPPER) Wrapper&lt;T&gt; whereWrapper);<br><span class="hljs-comment">// 根据 ID 修改</span><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.ENTITY)</span> T entity);<br></code></pre></td></tr></tbody></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"> T</td><td align="center">entity</td><td align="center"> 实体对象 (set 条件值，可为 null)</td></tr><tr><td align="center">Wrapper<t></t></td><td align="center">updateWrapper</td><td align="center"> 实体对象封装操作类（可以为 null, 里面的 entity 用于生成 where 语句）</td></tr></tbody></table><p>注意:updateById () 参数是 一个对象！</p><hr><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试更新</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>{<br>        User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">5L</span>);<br>        user.setName(<span class="hljs-string">"熬夜写代码"</span>);<br>        <span class="hljs-comment">//注意:updateById()参数是一个对象!</span><br>        <span class="hljs-type">int</span> i=userMapper.updateById(user);<br>        System.out.println(i);<br>        }<br></code></pre></td></tr></tbody></table></figure><p>所有的 sql 都是动态帮你配置的，也就是动态 sql。</p><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><p>创建时间。修改时间！这些个操作都是自动化完成的，我们不希望手动更新！</p><p>阿里巴巴开发手册：所有的数据库表:gmt_create .gmt_modified 几乎所有的表都要配置上！而且需要自动化！</p><ol><li><p>在表中新增字段 create_time , update_time</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br>    <span class="hljs-keyword">ADD</span> `create_time` DATETIME;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br>    <span class="hljs-keyword">ADD</span> `update_time` DATETIME;<br></code></pre></td></tr></tbody></table></figure></li><li><p>实体类字段属性上添加注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字段添加填充内容</span><br><span class="hljs-meta">@TableField</span> (fill = FieldFill.INSERT)<br><span class="hljs-keyword">private</span> LocalDateTime createTime;<br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> LocalDateTime updateTime;<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写处理器来处理这个注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.mybatis_plus_study.handler;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span> <span class="hljs-params">(MetaObject metaObject)</span> {<br>log.info(<span class="hljs-string">"Start insert fill.... "</span>);<br><span class="hljs-built_in">this</span>.strictInsertFill(metaObject, <span class="hljs-string">"createTime"</span>, LocalDateTime.class, LocalDateTime.now());<br><span class="hljs-built_in">this</span>.strictInsertFill(metaObject, <span class="hljs-string">"updateTime"</span>, LocalDateTime.class, LocalDateTime.now());<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span> <span class="hljs-params">(MetaObject metaObject)</span> {<br>log.info(<span class="hljs-string">"Start update fill.... "</span>);<br><span class="hljs-built_in">this</span>.strictUpdateFill(metaObject, <span class="hljs-string">"updateTime"</span>, LocalDateTime.class, LocalDateTime.now());<br>}<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试插入</p></li><li><p>测试更新，观察时间即可！</p></li></ol><h3 id="乐观锁-amp-悲观锁"><a href="#乐观锁-amp-悲观锁" class="headerlink" title="乐观锁 &amp; 悲观锁"></a>乐观锁 &amp; 悲观锁</h3><blockquote><p>乐观锁：顾名思义十分乐观，他总是认为不会出现问题，无论干什么都不上锁！如果出现了问题，再次更新值测试</p><p>悲观锁：顾名思义十分悲观，他总是认为出现问题，无论干什么都会上锁！再去操作！</p></blockquote><p>这里主要讲解 乐观锁机制！</p><p>乐观锁实现方式:</p><ul><li>取出记录时，获取当前 version</li><li> 更新时，带上这个 version</li><li> 执行更新时，set version = newVersion where version = oldVersion</li><li> 如果 version 不对，就更新失败 </li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 乐观锁：先查询，获得版本号</span><br><span class="hljs-comment">-- A 线程 （更新id = 1 并且version = 1 的记录的 name = AWEI 和 version = version + 1）</span><br><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">SET</span> name    <span class="hljs-operator">=</span> "awei",<br>    version <span class="hljs-operator">=</span> version <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">AND</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-comment">-- B 线程 （B线程抢先完成，此时version=2，会导致A线程修改失败！）</span><br><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">SET</span> name    <span class="hljs-operator">=</span> "awei",<br>    version <span class="hljs-operator">=</span> version <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">AND</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>说明:</p><ul><li><strong>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</strong></li><li> 整数类型下 <code>newVersion = oldVersion + 1</code></li><li><code>newVersion</code> 会<strong>回写</strong>到 <code>entity</code> 中</li><li>仅支持 <code>updateById(id)</code> 与 <code>update(entity, wrapper)</code> 方法</li><li><strong>在 <code>update(entity, wrapper)</code> 方法下，<code>wrapper</code> 不能复用！！！</strong></li></ul></blockquote><p><strong>测试一下 Mybatis-Plus 乐观锁插件</strong></p><ol><li><p>给数据库中增加 version 字段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br>    <span class="hljs-keyword">ADD</span> `version` <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>实体类加对应的字段</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span> <span class="hljs-comment">//乐观锁version注解</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></tbody></table></figure></li><li><p>注册组件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.mybatis_plus_study.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/2/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//自动管理事务</span><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisPlusConfig</span> {<br>   <span class="hljs-comment">//乐观锁</span><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>      interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInnerInterceptor</span>());<br>      <span class="hljs-keyword">return</span> interceptor;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><ul><li><p>成功情况</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-comment">//测试乐观锁成功</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOptimisticLocker1</span><span class="hljs-params">()</span>{<br>   <span class="hljs-comment">//1、查询用户信息</span><br>   <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>   <span class="hljs-comment">//2、修改用户信息</span><br>   user.setAge(<span class="hljs-number">18</span>);<br>   user.setEmail(<span class="hljs-string">"xxxxxxx@qq.com"</span>);<br>   <span class="hljs-comment">//3、执行更新操作</span><br>   userMapper.updateById(user);<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_%E4%B9%90%E8%A7%82%E9%94%81%E6%88%90%E5%8A%9F%E6%83%85%E5%86%B5.png"></p></li><li><p>失败情况</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-comment">//测试乐观锁失败  多线程下</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOptimisticLocker2</span><span class="hljs-params">()</span>{<br>   <span class="hljs-comment">//线程1</span><br>   <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>   user1.setAge(<span class="hljs-number">1</span>);<br>   user1.setEmail(<span class="hljs-string">"11111111@qq.com"</span>);<br>   <span class="hljs-comment">//模拟另外一个线程执行了插队操作</span><br>   <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>   user2.setAge(<span class="hljs-number">2</span>);<br>   user2.setEmail(<span class="hljs-string">"22222222@qq.com"</span>);<br>   userMapper.updateById(user2);<br>   <span class="hljs-comment">//自旋锁来多次尝试提交！</span><br>   userMapper.updateById(user1);<span class="hljs-comment">//如果没有乐观锁就会覆盖插队线程的值</span><br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_%E4%B9%90%E8%A7%82%E9%94%81%E5%A4%B1%E8%B4%A5%E6%83%85%E5%86%B5.png"></p></li></ul></li></ol><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 ID 查询</span><br>T <span class="hljs-title function_">selectById</span><span class="hljs-params">(Serializable id)</span>;<br><span class="hljs-comment">// 根据 wrapper 条件，查询一条记录</span><br>T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);<br><br><span class="hljs-comment">// 查询（根据ID 批量查询）</span><br>List&lt;T&gt; <span class="hljs-title function_">selectBatchIds</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.COLLECTION)</span> Collection&lt;?<span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span>&gt; idList);<br><span class="hljs-comment">// 根据 wrapper 条件，查询全部记录</span><br>List&lt;T&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);<br><span class="hljs-comment">// 查询（根据 columnMap 条件）</span><br>List&lt;T&gt; <span class="hljs-title function_">selectByMap</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap);<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录</span><br>List&lt;Map&lt;String, Object&gt;&gt;selectMaps(<span class="hljs-meta">@Param</span> (Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span><br>List&lt;Object&gt; <span class="hljs-title function_">selectObjs</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);<br><span class="hljs-comment">// 根据 wrapper 条件，查询全部记录（并翻页）</span><br>IPage&lt;T&gt; <span class="hljs-title function_">selectPage</span><span class="hljs-params">(IPage&lt;T&gt; page,<span class="hljs-meta">@Param</span> (Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);<br><span class="hljs-comment">// 根据 wrapper 条件，查询全部记录（并翻页）</span><br>IPage&lt;Map&lt;String, Object&gt;&gt;selectMapsPage(IPage&lt;T&gt; page,<span class="hljs-meta">@Param</span> (Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);<br><span class="hljs-comment">// 根据 Wrapper 条件，查询总记录数</span><br>Integer <span class="hljs-title function_">selectCount</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);<br></code></pre></td></tr></tbody></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"> Serializable</td><td align="center">id</td><td align="center"> 主键 ID</td></tr><tr><td align="center">Wrapper<t></t></td><td align="center">queryWrapper</td><td align="center"> 实体对象封装操作类（可以为 null）</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center"> 主键 ID 列表 (不能为 null 以及 empty)</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center"> 表字段 map 对象</td></tr><tr><td align="center"> IPage<t></t></td><td align="center">page</td><td align="center"> 分页查询条件（可以为 RowBounds.DEFAULT）</td></tr></tbody></table><hr><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试查询</span><br><span class="hljs-comment">//SELECT id,name,age,email,create_time,update_time,version FROM user WHERE id=?</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectById</span><span class="hljs-params">()</span>{<br>        User user=userMapper.selectById(<span class="hljs-number">1L</span>);<br>        System.out.println(user);<br>}<br><span class="hljs-comment">//测试批量查询</span><br><span class="hljs-comment">//SELECT id,name,age,email,create_time,update_time,version FROM user WHERE id IN ( ? , ? , ? )</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectBatchId</span><span class="hljs-params">()</span>{<br>        List&lt;User&gt; users=userMapper.selectBatchIds(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br>        users.forEach(System.out::println);<br>}<br><span class="hljs-comment">//按条件查询之--使用Map操作</span><br><span class="hljs-comment">//SELECT id,name,age,email,create_time,update_time,version FROM user WHERE name = ? AND age = ?</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectBatchIds</span><span class="hljs-params">()</span>{<br>        HashMap&lt;String, Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">"name"</span>,<span class="hljs-string">"AWEI"</span>);<br>        map.put(<span class="hljs-string">"age"</span>,<span class="hljs-number">21</span>);<br>        List&lt;User&gt; users=userMapper.selectByMap(map);<br>        users.forEach(System.out::println);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>分页在网站的使用十分之多！</p><p>1、原始的 limit 分页</p><p>2、pageHelper 第三方插件</p><p>3、MybatisPlus 其实也内置了分页插件！</p><p><strong>MybatisPlus 分页插件</strong></p><ol><li><p>配置拦截器组件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.mybatis_plus_study.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/2/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//自动管理事务</span><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisPlusConfig</span> {<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>      <span class="hljs-comment">//乐观锁</span><br>      interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInnerInterceptor</span>());<br>      <span class="hljs-comment">//分页插件</span><br>      interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>      <span class="hljs-keyword">return</span> interceptor;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>直接使用 page 对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-comment">//测试分页查询</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span>{<br>   <span class="hljs-comment">//参数一current：当前页   参数二size：页面大小</span><br>   <span class="hljs-comment">//使用了分页插件之后，所有的分页操作都变得简单了</span><br>   Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>   userMapper.selectPage(page,<span class="hljs-literal">null</span>);<br>   page.getRecords().forEach(System.out::println);<br>   System.out.println(<span class="hljs-string">"总条数==&gt;"</span>+page.getTotal());<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>结果</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png"></p></li></ol><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据 wrapper 条件，删除记录</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper);<br><span class="hljs-comment">// 删除（根据ID 批量删除）</span><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBatchIds</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.COLLECTION)</span> Collection&lt;?<span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span>&gt; idList);<br><span class="hljs-comment">// 根据 ID 删除</span><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Serializable id)</span>;<br><span class="hljs-comment">// 根据 columnMap 条件，删除记录</span><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">deleteByMap</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap);<br></code></pre></td></tr></tbody></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th align="center">类型</th><th align="center">参数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"> Wrapper<t></t></td><td align="center">wrapper</td><td align="center"> 实体对象封装操作类（可以为 null）</td></tr><tr><td align="center">Collection&lt;? extends Serializable&gt;</td><td align="center">idList</td><td align="center"> 主键 ID 列表 (不能为 null 以及 empty)</td></tr><tr><td align="center">Serializable</td><td align="center">id</td><td align="center"> 主键 ID</td></tr><tr><td align="center">Map&lt;String, Object&gt;</td><td align="center">columnMap</td><td align="center"> 表字段 map 对象</td></tr></tbody></table><hr><p>例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过ID删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span>{<br>        userMapper.deleteById(<span class="hljs-number">1487841570580455425L</span>);<br>}<br><span class="hljs-comment">//通过ID批量删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteBatchIds</span><span class="hljs-params">()</span>{<br>        userMapper.deleteBatchIds(Arrays.asList(<span class="hljs-number">1487841570580455426L</span>,<span class="hljs-number">1487841570580455427L</span>));<br>}<br><span class="hljs-comment">//通过Map集合批量删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testD</span><span class="hljs-params">()</span>{<br>        HashMap&lt;String, Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">"age"</span>,<span class="hljs-number">21</span>);<br>        map.put(<span class="hljs-string">"name"</span>,<span class="hljs-string">"AWEI"</span>);<br>        userMapper.deleteByMap(map);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><blockquote><p>物理删除：从数据库中直接删除</p><p>逻辑删除：在数据库中没有被删除，而是通过一个变量来使他失效！ deleted=0 ==&gt; deleted=1</p></blockquote><p><strong>管理员可以查看被删除的记录！防止数据的丢失，类似于回收站！</strong></p><ol><li><p>在数据表中增加一个 deleted 字段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br>    <span class="hljs-keyword">ADD</span> `deleted` <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>实体类中添加对应属性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span><span class="hljs-comment">//逻辑删除注解</span><br><span class="hljs-keyword">private</span> Integer deleted;<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-comment">#logic-delete-field: deleted # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值(默认为 1)</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值(默认为 0)</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试一下删除</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span>{<br>   userMapper.deleteById(<span class="hljs-number">1487841570580455430L</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>结果</p><p>发现： 记录还在，deleted 变为 1</p><p>再次测试查询被删除的用户，发现查询为空</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4.png"></p></li></ol><h1 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h1><p><strong>十分重要：Wrapper</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/MyBatis-Plus_wrapper.png"></p><ol><li><p>新建测试类 WrapperTest</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.mybatis_plus_study;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> com.zlw.mybatis_plus_study.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.zlw.mybatis_plus_study.pojo.User;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/2/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperTest</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> UserMapper userMapper;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试：查询 name 不为空，email 不为空，age 大于 18 的用户</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted=0 AND (name IS NOT NULL AND email IS NOT NULL AND age &gt;= ?)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrapper1</span><span class="hljs-params">()</span> {<br>   <span class="hljs-comment">//参数是一个wrapper ，条件构造器，和刚才的map对比学习！</span><br>   <span class="hljs-comment">//查询name不为空，email不为空，age大于18的用户</span><br>   QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>   wrapper<br>         .isNotNull(<span class="hljs-string">"name"</span>)<br>         .isNotNull(<span class="hljs-string">"email"</span>)<br>         .ge(<span class="hljs-string">"age"</span>,<span class="hljs-number">18</span>);<br>   List&lt;User&gt; userList = userMapper.selectList(wrapper);<br>   userList.forEach(System.out::println);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试：查询 name=AWEI 的用户</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted=0 AND (name = ?)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrapper2</span><span class="hljs-params">()</span> {<br><span class="hljs-comment">//查询 name=AWEI 的用户</span><br>QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>wrapper.eq(<span class="hljs-string">"name"</span>,<span class="hljs-string">"AWEI"</span>);<br><span class="hljs-comment">//查询一个数据selectOne，若查询出多个会报错</span><br><span class="hljs-comment">//Expected one result (or null) to be returned by selectOne(), but found: *</span><br><span class="hljs-comment">//若出现多个结果使用list或map</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<span class="hljs-comment">//查询一个数据，若出现多个结果使用list或map</span><br>System.out.println(user);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试：查询 age 在 10-20 之间的用户</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//SELECT COUNT( * ) FROM user WHERE deleted=0 AND (age BETWEEN ? AND ?)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrapper3</span><span class="hljs-params">()</span> {<br>   <span class="hljs-comment">//查询age在10-20之间的用户</span><br>   QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>   wrapper.between(<span class="hljs-string">"age"</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<span class="hljs-comment">//区间</span><br>   <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.selectCount(wrapper);<span class="hljs-comment">//输出查询的数量selectCount</span><br>   System.out.println(count);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试：模糊查询</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted=<span class="hljs-number">0</span> AND (name NOT LIKE ? AND email LIKE ?)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrapper4</span><span class="hljs-params">()</span> {<br>   <span class="hljs-comment">//模糊查询</span><br>   QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>   wrapper<br>         .notLike(<span class="hljs-string">"name"</span>,<span class="hljs-string">"s"</span>)<span class="hljs-comment">// not like '%s%'</span><br>         .likeRight(<span class="hljs-string">"email"</span>,<span class="hljs-string">"t"</span>);<span class="hljs-comment">// t%  likeRight %在右边</span><br>   List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);<br>   maps.forEach(System.out::println);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试：嵌套子查询</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// SELECT id,name,age,email,version,deleted,create_time,update_time FROM user WHERE deleted=0 AND id IN (select id from user where id&lt;5)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrapper5</span><span class="hljs-params">()</span> {<br>   <span class="hljs-comment">//模糊查询</span><br>   QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>   <span class="hljs-comment">//id 在子查询中查出来</span><br>   wrapper.inSql(<span class="hljs-string">"id"</span>,<span class="hljs-string">"select id from user where id&lt;5"</span>);<br>   List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);<br>   objects.forEach(System.out::println);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试：降序排序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted=0 ORDER BY id DESC</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrapper6</span><span class="hljs-params">()</span> {<br>   QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>   <span class="hljs-comment">//通过id进行降序排序</span><br>   wrapper.orderByDesc(<span class="hljs-string">"id"</span>);<br>   List&lt;User&gt; userList = userMapper.selectList(wrapper);<br>   userList.forEach(System.out::println);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试：fucn（if-else）的 lambda 表达式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted=0 AND (id = ?)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWrapper7</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>&gt;=<span class="hljs-number">1</span>;<br>   LambdaQueryWrapper&lt;User&gt; queryWrapper = Wrappers.&lt;User&gt;lambdaQuery()<br>         .func(i -&gt; {<br>            <span class="hljs-keyword">if</span> (flag) {<br>               i.eq(User::getId, <span class="hljs-number">1</span>);<br>            } <span class="hljs-keyword">else</span> {<br>               i.ne(User::getId, <span class="hljs-number">1</span>);<br>            }<br>         });<br>   userMapper.selectList(queryWrapper);<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Centos7 的 Zookeeper 安装</title>
    <link href="/posts/59309/"/>
    <url>/posts/59309/</url>
    
    <content type="html"><![CDATA[<h1 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h1><p><strong>本文假定你已经了解什么是 Linux，Centos7，zookeeper</strong></p><p><strong>本文假定你已经在 linux 系统上做好网络配置、关闭防火墙以及 jdk1.8 的环境</strong></p><p><strong>本文假定你已经上传 zookeeper 安装包到你的 linux 服务器</strong></p><h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><p>进入 zookeeper 安装包所在的路径，解压 zookeeper 到自定义目录，我这里选择 /opt/module</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入安装包所在目录</span><br>[root@localhost software]<span class="hljs-comment"># cd /opt/software/ </span><br><span class="hljs-comment">#解压zookeeper到/opt/module</span><br>[root@localhost software]<span class="hljs-comment"># tar -zxvf zookeeper-3.4.10.tar.gz -C /opt/module/</span><br></code></pre></td></tr></tbody></table></figure><h1 id="修改名称"><a href="#修改名称" class="headerlink" title="修改名称"></a>修改名称</h1><p>修改 zookeeper 的名称为 zookeeper</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost software]<span class="hljs-comment"># cd /opt/module/</span><br>[root@localhost module]<span class="hljs-comment"># mv zookeeper-3.4.10 zookeeper</span><br></code></pre></td></tr></tbody></table></figure><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><ol><li><p>将 /export/server/zookeeper/conf 这个路径下的 zoo_sample.cfg 拷贝一份并改名为 zoo.cfg；</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost module]<span class="hljs-comment"># cd zookeeper/conf/</span><br>[root@localhost conf]<span class="hljs-comment"># cp zoo_sample.cfg zoo.cfg</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>打开 zoo.cfg 文件，修改 dataDir 路径：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost conf]<span class="hljs-comment"># vim zoo.cfg</span><br></code></pre></td></tr></tbody></table></figure><p>修改如下内容：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#根据自己的路径修改</span><br>dataDir=/opt/module/zookeeper/zkData<br></code></pre></td></tr></tbody></table></figure></li><li><p>在 /opt/module/zookeeper/ 这个目录上创建 zkData 文件夹</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost conf]<span class="hljs-comment"># cd ..</span><br>[root@localhost zookeeper]<span class="hljs-comment"># mkdir zkData</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><ol><li><p>启动启动 zookeeper</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zookeeper]<span class="hljs-comment"># bin/zkServer.sh start</span><br>ZooKeeper JMX enabled by default<br>Using config: /opt/module/zookeeper/bin/../conf/zoo.cfg<br>Starting zookeeper ... STARTED<br></code></pre></td></tr></tbody></table></figure></li><li><p>检查是否启动</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zookeeper]<span class="hljs-comment"># jps</span><br>2819 Jps<br>2759 QuorumPeerMain<br></code></pre></td></tr></tbody></table></figure></li><li><p>查看状态</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zookeeper]<span class="hljs-comment"># bin/zkServer.sh status</span><br>ZooKeeper JMX enabled by default<br>Using config: /opt/module/zookeeper/bin/../conf/zoo.cfg<br>Mode: standalone<br></code></pre></td></tr></tbody></table></figure></li><li><p>启动客户端：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zookeeper]<span class="hljs-comment"># bin/zkCli.sh  </span><br></code></pre></td></tr></tbody></table></figure></li><li><p>退出客户端：</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zookeeper]<span class="hljs-comment"># quit </span><br></code></pre></td></tr></tbody></table></figure></li><li><p>停止 Zookeeper</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zookeeper]<span class="hljs-comment"># bin/zkServer.sh stop  </span><br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="配置参数解读"><a href="#配置参数解读" class="headerlink" title="配置参数解读"></a>配置参数解读</h1><p>Zookeeper 中的配置文件 zoo.cfg 中参数含义解读如下：</p><ol><li><p>tickTime =2000：通信心跳数，Zookeeper 服务器与客户端心跳时间，单位毫秒</p><p>Zookeeper 使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳，时间单位为毫秒。</p><p>它用于心跳机制，并且设置最小的 session 超时时间为两倍心跳时间。(session 的最小超时时间是 2*tickTime)</p></li><li><p>initLimit =10：LF 初始通信时限</p><p>集群中的 Follower 跟随者服务器与 Leader 领导者服务器之间初始连接时能容忍的最多心跳数（tickTime 的数量），用它来限定集群中的 Zookeeper 服务器连接到 Leader 的时限。</p></li><li><p>syncLimit =5：LF 同步通信时限</p><p>集群中 Leader 与 Follower 之间的最大响应时间单位，假如响应超过 syncLimit * tickTime，Leader 认为 Follwer 死掉，从服务器列表中删除 Follwer。</p><p>注意前面 3 个不需要修改。</p></li><li><p>dataDir：数据文件目录 + 数据持久化路径</p><p>主要用于保存 Zookeeper 中的数据。（这个需要修改）</p></li><li><p>clientPort =2181：客户端连接端口</p><p>监听客户端连接的端口。（这个想改就改）</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud</title>
    <link href="/posts/42622/"/>
    <url>/posts/42622/</url>
    
    <content type="html"><![CDATA[<h1 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>微服务 (Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p><p>究竟什么是微服务呢？我们在此引用 ThoughtWorks 公司的首席科学家 Martin Fowler 于 2014 年提出的一段话：</p><p>原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p><p>汉化：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p><ul><li> 就目前而言，对于微服务，业界并没有一个统一的，标准的定义。</li><li>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，<strong>它体长将单一的应用程序划分成一组小的服务</strong>，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制 (<strong>HTTP</strong>) 互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具 (<strong>Maven</strong>)<br>对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</li></ul><blockquote><p>用自己的话来说</p></blockquote><p>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p><h2 id="微服务和微服务架构"><a href="#微服务和微服务架构" class="headerlink" title="微服务和微服务架构"></a>微服务和微服务架构</h2><blockquote><p>微服务</p></blockquote><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题 / 提供落地对应服务的一个服务应用，狭义的看，可以看作是 IDEA 中的一个个微服务工程，或者 Moudel。IDEA 工具里面使用 Maven 开发的一个个独立的小<br>Moudel，它具体是使用 SpringBoot 开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p><blockquote><p>微服务架构</p></blockquote><p>一种新的架构形式，Martin Fowler 于 2014 年提出。</p><p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制 (<strong>如 HTTP</strong>) 互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具 (<strong>如 Maven</strong>) 对其进行构建。</p><h2 id="微服务的优点及缺点"><a href="#微服务的优点及缺点" class="headerlink" title="微服务的优点及缺点"></a>微服务的优点及缺点</h2><blockquote><p>优点</p></blockquote><ul><li>单一职责原则；</li><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li><li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li><li>微服务能够被小团队单独开发，这个团队只需 2-5 个开发人员组成；</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li><li>微服务能使用不同的语言开发；</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如 jenkins，Hudson，bamboo；</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li><li>微服务允许利用和融合最新技术；</li><li><strong>微服务只是业务逻辑的代码，不会和 HTML，CSS，或其他的界面混合；</strong></li><li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</strong></li></ul><blockquote><p>缺点</p></blockquote><ul><li>开发人员要处理分布式系统的复杂性；</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li><li>系统部署依赖问题；</li><li>服务间通信成本问题；</li><li>数据一致性问题；</li><li>系统集成测试问题；</li><li>性能和监控问题；</li></ul><h2 id="微服务的技术栈"><a href="#微服务的技术栈" class="headerlink" title="微服务的技术栈"></a>微服务的技术栈</h2><table><thead><tr><th>微服务技术条目</th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td> SpringBoot、Spring、SpringMVC 等</td></tr><tr><td>服务配置与管理</td><td> Netfix 公司的 Archaius、阿里的 Diamond 等</td></tr><tr><td>服务注册与发现</td><td> Eureka、Consul、Zookeeper 等</td></tr><tr><td>服务调用</td><td> Rest、PRC、gRPC</td></tr><tr><td> 服务熔断器</td><td> Hystrix、Envoy 等</td></tr><tr><td>负载均衡</td><td> Ribbon、Nginx 等</td></tr><tr><td>服务接口调用 (客户端调用服务的简化工具)</td><td>Fegin 等</td></tr><tr><td>消息队列</td><td> Kafka、RabbitMQ、ActiveMQ 等</td></tr><tr><td>服务配置中心管理</td><td> SpringCloudConfig、Chef 等</td></tr><tr><td>服务路由 (API 网关)</td><td>Zuul 等</td></tr><tr><td>服务监控</td><td> Zabbix、Nagios、Metrics、Specatator 等</td></tr><tr><td>全链路追踪</td><td> Zipkin、Brave、Dapper 等</td></tr><tr><td>数据流操作开发包</td><td> SpringCloud Stream (封装与 Redis，Rabbit，Kafka 等发送接收消息)</td></tr><tr><td> 时间消息总栈</td><td> SpringCloud Bus</td></tr><tr><td> 服务部署</td><td> Docker、OpenStack、Kubernetes 等</td></tr></tbody></table><h2 id="选择SpringCloud作为微服务架构的原因"><a href="#选择SpringCloud作为微服务架构的原因" class="headerlink" title="选择SpringCloud作为微服务架构的原因"></a>选择 SpringCloud 作为微服务架构的原因</h2><ol><li><p>选型依据</p><ul><li>整体解决方案和框架成熟度</li><li>社区热度</li><li>可维护性</li><li>学习曲线</li></ul></li><li><p>当前各大 IT 公司用的微服务架构有那些？</p><ul><li>阿里：dubbo+HFS</li><li> 京东：JFS</li><li> 新浪：Motan</li><li> 当当网：DubboX</li></ul></li><li><p> 各个微服务框架对比</p><table><thead><tr><th>功能点 / 服务框架</th><th> Netflix/SpringCloud</th><th>Motan</th><th>gRPC</th><th>Thri t</th><th>Dubbo/DubboX</th></tr></thead><tbody><tr><td> 功能定位</td><td>完整的微服务框架</td><td> RPC 框架，但整合了 ZK 或 Consul，实现集群环境的基本服务注册发现</td><td> RPC 框架</td><td> RPC 框架</td><td>服务框架</td></tr><tr><td>支持 Rest</td><td> 是，Ribbon 支持多种可拔插的序列号选择</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td>支持 RPC</td><td> 否</td><td>是 (Hession2)</td><td> 是</td><td>是</td><td>是</td></tr><tr><td>支持多语言</td><td>是 (Rest 形式)</td><td> 否</td><td>是</td><td>是</td><td>否</td></tr><tr><td>负载均衡</td><td>是 (服务端 zuul + 客户端 Ribbon)，zuul - 服务，动态路由，云端负载均衡 Eureka（针对中间层服务器）</td><td>是 (客户端)</td><td> 否</td><td>否</td><td>是 (客户端)</td></tr><tr><td> 配置服务</td><td> Netfix Archaius，Spring Cloud Config Server 集中配置</td><td>是 (Zookeeper 提供)</td><td> 否</td><td>否</td><td>否</td></tr><tr><td>服务调用链监控</td><td>是 (zuul)，zuul 提供边缘服务，API 网关</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td>高可用 / 容错</td><td>是 (服务端 Hystrix + 客户端 Ribbon)</td><td> 是 (客户端)</td><td> 否</td><td>否</td><td>是 (客户端)</td></tr><tr><td> 典型应用案例</td><td> Netflix</td><td>Sina</td><td>Google</td><td>Facebook</td><td></td></tr><tr><td> 社区活跃程度</td><td>高</td><td>一般</td><td>高</td><td>一般</td><td> 2017 年后重新开始维护，之前中断了 5 年</td></tr><tr><td>学习难度</td><td>中等</td><td>低</td><td>高</td><td>高</td><td>低</td></tr><tr><td>文档丰富程度</td><td>高</td><td>一般</td><td>一般</td><td>一般</td><td>高</td></tr><tr><td>其他</td><td> Spring Cloud Bus 为我们的应用程序带来了更多管理端点</td><td>支持降级</td><td> Netflix 内部在开发集成 gRPC</td><td>IDL 定义</td><td>实践的公司比较多</td></tr></tbody></table></li></ol><h1 id="SpringCloud概述"><a href="#SpringCloud概述" class="headerlink" title="SpringCloud概述"></a>SpringCloud 概述</h1><h2 id="什么是SpringCloud"><a href="#什么是SpringCloud" class="headerlink" title="什么是SpringCloud"></a>什么是 SpringCloud</h2><p>Spring 官网：<a href="https://spring.io/">https://spring.io/</a></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E4%BB%80%E4%B9%88%E6%98%AFSpringCloud.png"></p><p>结构图</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><p>SpringCloud, 基于 SpringBoot 提供了一套微服务解决方案， 包括服务注册与发现，配置中心，全链路监控，服务，网关，负载均衡，熔断器等组件，除了基于 NetFlix 的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。</p><h2 id="SpringCloud和SpringBoot的关系"><a href="#SpringCloud和SpringBoot的关系" class="headerlink" title="SpringCloud和SpringBoot的关系"></a>SpringCloud 和 SpringBoot 的关系</h2><ul><li>SpringBoot 专注于开苏方便的开发单个个体微服务；</li><li>SpringCloud 是关注全局的微服务协调整理治理框架，它将 SpringBoot<br>开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li><li>SpringBoot 可以离开 SpringCloud 独立使用，开发项目，但 SpringCloud 离不开 SpringBoot，属于依赖关系；</li><li>SpringBoot 专注于快速、方便的开发单个个体微服务，SpringCloud 关注全局的服务治理框架；</li></ul><h2 id="Dubbo和SpringCloud的技术选型"><a href="#Dubbo和SpringCloud的技术选型" class="headerlink" title="Dubbo和SpringCloud的技术选型"></a>Dubbo 和 SpringCloud 的技术选型</h2><h3 id="分布式-服务治理-Dubbo"><a href="#分布式-服务治理-Dubbo" class="headerlink" title="分布式 + 服务治理 Dubbo"></a>分布式 + 服务治理 Dubbo</h3><p>目前成熟的互联网架构，应用服务化拆分 + 消息中间件</p><h3 id="Dubbo-和-SpringCloud-对比"><a href="#Dubbo-和-SpringCloud-对比" class="headerlink" title="Dubbo 和 SpringCloud 对比"></a>Dubbo 和 SpringCloud 对比</h3><table><thead><tr><th></th><th>Dubbo</th><th>SpringCloud</th></tr></thead><tbody><tr><td> 服务注册中心</td><td> Zookeeper</td><td>Spring Cloud Netfilx Eureka</td></tr><tr><td> 服务调用方式</td><td> RPC</td><td>REST API</td></tr><tr><td> 服务监控</td><td> Dubbo-monitor</td><td>Spring Boot Admin</td></tr><tr><td> 断路器</td><td>不完善</td><td> Spring Cloud Netfilx Hystrix</td></tr><tr><td> 服务网关</td><td>无</td><td> Spring Cloud Netfilx Zuul</td></tr><tr><td> 分布式配置</td><td>无</td><td> Spring Cloud Config</td></tr><tr><td> 服务跟踪</td><td>无</td><td> Spring Cloud Sleuth</td></tr><tr><td> 消息总栈</td><td>无</td><td> Spring Cloud Bus</td></tr><tr><td> 数据流</td><td>无</td><td> Spring Cloud Stream</td></tr><tr><td> 批量任务</td><td>无</td><td> Spring Cloud Task</td></tr></tbody></table><p><strong>最大区别：Spring Cloud 抛弃了 Dubbo 的 RPC 通信，采用的是基于 HTTP 的 REST 方式</strong></p><p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生 RPC 带来的问题。而且 REST 相比 RPC<br>更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个优点在当下强调快速演化的微服务环境下，显得更加合适。</p><p><strong>二者解决的问题域不一样：Dubbo 的定位是一款 RPC 框架，而 SpringCloud 的目标是微服务架构下的一站式解决方案。</strong></p><h2 id="SpringCloud下载"><a href="#SpringCloud下载" class="headerlink" title="SpringCloud下载"></a>SpringCloud 下载</h2><p>官网：<a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a></p><p><strong>自学参考书：</strong></p><ul><li>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li><li>SpringCloud 中文 API 文档 (官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li><li>SpringCloud 中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></li><li>SpringCloud 中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li></ul><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Spring Cloud Version</th><th>Spring Boot Version</th></tr></thead><tbody><tr><td>2.2.6.RELEASE</td><td>Spring Cloud Hoxton.SR9</td><td>2.3.2.RELEASE</td></tr></tbody></table><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Sentinel Version</th><th>Nacos Version</th><th>RocketMQ Version</th><th>Dubbo Version</th><th>Seata Version</th></tr></thead><tbody><tr><td>2.2.6.RELEASE</td><td>1.8.1</td><td>1.4.2</td><td>4.4.0</td><td>2.7.8</td><td> 修改为 1.4.0</td></tr></tbody></table><h1 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h1><h2 id="父工程创建"><a href="#父工程创建" class="headerlink" title="父工程创建"></a>父工程创建</h2><p>我们创建一个 maven 框架的父工程</p><p>jdk 版本：1.8</p><p>maven 版本：3.6.3</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E7%88%B6%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA.png" alt="父工程"></p><h2 id="父工程pom文件"><a href="#父工程pom文件" class="headerlink" title="父工程pom文件"></a>父工程 pom 文件</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- FIXME change it to the project's website --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">inceptionYear</span>&gt;</span>2001<span class="hljs-tag">&lt;/<span class="hljs-name">inceptionYear</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">site</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>website<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>scp://webhost.company.com/www/website<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">site</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--统一jar包管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.16.18<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.spring.boot.version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.spring.boot.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.spring.boot.starter</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">druid.spring.boot.starter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bootstrap.version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">bootstrap.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--spring boot 2.3.2--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--spring cloud Hoxton.SR9--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--spring cloud alibaba 2.2.6.RELEASE--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${mysql.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${druid.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${mybatis.spring.boot.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${junit.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${log4j.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${lombok.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${bootstrap.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${druid.spring.boot.starter}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="支付模块（详细）"><a href="#支付模块（详细）" class="headerlink" title="支付模块（详细）"></a>支付模块（详细）</h1><h2 id="建立module"><a href="#建立module" class="headerlink" title="建立module"></a>建立 module</h2><p>新建 maven 模块（也可以是 springboot，省去创建启动类）</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E6%96%B0%E5%BB%BAmodule.png"></p><h2 id="改pom"><a href="#改pom" class="headerlink" title="改pom"></a>改 pom</h2><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql-connector-java--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jdbc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="写yaml"><a href="#写yaml" class="headerlink" title="写yaml"></a>写 yaml</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-payment-service</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="hljs-comment"># 当前数据源操作类型</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>              <span class="hljs-comment"># mysql驱动包</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springcloudStudy?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapperLocations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.zlw.springcloud.pojo</span>    <span class="hljs-comment"># 所有实体类所在包</span><br></code></pre></td></tr></tbody></table></figure><h2 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h2><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain8001</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>        SpringApplication.run(PaymentMain8001.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h2><h3 id="建表sql"><a href="#建表sql" class="headerlink" title="建表sql"></a>建表 sql</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `springcloudstudy`;<br><br>USE `springcloudstudy`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `payment`<br>(<br>    `id`     <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'ID'</span>,<br>    `serial` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> payment<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">123</span>, <span class="hljs-string">'asdfg'</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><p>建立实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Payment</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> {<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String serial;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="JSON-封装体"><a href="#JSON-封装体" class="headerlink" title="JSON 封装体"></a>JSON 封装体</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonResult</span>&lt;T&gt; {<br>    <span class="hljs-comment">//例如404 not_found</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-comment">//传入的数据</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-comment">//假如数据为空，使用这个构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommonResult</span> <span class="hljs-params">(Integer code, String message)</span> {<br>        <span class="hljs-built_in">this</span>(code, message, <span class="hljs-literal">null</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.dao;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentDao</span> {<br>    <span class="hljs-comment">//写</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">create</span> <span class="hljs-params">(Payment payment)</span>;<br><br>    <span class="hljs-comment">//读</span><br>    Payment <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">"id"</span>)</span> Long id);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.springcloud.dao.PaymentDao"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"create"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"Payment"</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">"id"</span>&gt;</span><br>        INSERT INTO<br>        Payment(Serial)<br>        VALUES<br>        (#{serial});<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"BaseResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Payment"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"serial"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"serial"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"VARCHAR"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getPaymentById"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"long"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"BaseResultMap"</span>&gt;</span><br>        SELECT *<br>        FROM<br>        Payment<br>        WHERE<br>        Id = #{id};<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><h4 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentService</span> {<br>    <span class="hljs-comment">//写</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">create</span> <span class="hljs-params">(Payment payment)</span>;<br><br>    <span class="hljs-comment">//读</span><br>    Payment <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">"id"</span>)</span> Long id);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.dao.PaymentDao;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentService</span> {<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentDao paymentDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">create</span> <span class="hljs-params">(Payment payment)</span> {<br>        <span class="hljs-keyword">return</span> paymentDao.create(payment);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Payment <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(Long id)</span> {<br>        <span class="hljs-keyword">return</span> paymentDao.getPaymentById(id);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentServiceImpl;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> {<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentServiceImpl paymentServiceImpl;<br><br>    <span class="hljs-meta">@PostMapping</span> (<span class="hljs-string">"/payment/create"</span>)<br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">create</span> <span class="hljs-params">(Payment payment)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentServiceImpl.create(payment);<br>        log.info(<span class="hljs-string">"****插入结果："</span> + result + <span class="hljs-string">"****"</span>);<br>        <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">"插入数据库成功"</span>, result);<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">444</span>, <span class="hljs-string">"插入数据库失败"</span>, <span class="hljs-literal">null</span>);<br>        }<br>    }<br><br>    <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/get/{id}"</span>)<br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id) {<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> paymentServiceImpl.getPaymentById(id);<br>        log.info(<span class="hljs-string">"****查询结果："</span> + payment + <span class="hljs-string">"****"</span>);<br>        <span class="hljs-keyword">if</span> (payment != <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">"查询成功"</span>, payment);<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">444</span>, <span class="hljs-string">"没有对应记录，查询ID"</span> + id, <span class="hljs-literal">null</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>create 请求</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97create%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C.png"></p><p>getById 请求</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97getById%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C.png"></p><h1 id="消费者订单模块"><a href="#消费者订单模块" class="headerlink" title="消费者订单模块"></a>消费者订单模块</h1><ol><li><p>新建 module</p><p>如前文，建立 module：<code>cloud-consumer-order80</code></p></li><li><p>修改 pom</p><p>这个微服务的本质作用为用户下订单，用户不操作数据库，只使用 controller，所以不用导入 sql 相关依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumer-order80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order80</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(Order80.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类</p><ul><li><p>pojo</p><p>这里的实体类沿用上一个模块</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Payment</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> {<br>   <span class="hljs-keyword">private</span> Long id;<br>   <span class="hljs-keyword">private</span> String serial;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>JSON 封装体</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonResult</span>&lt;T&gt; {<br>   <span class="hljs-keyword">private</span> Integer code;<br>   <span class="hljs-keyword">private</span> String message;<br>   <span class="hljs-keyword">private</span> T data;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommonResult</span> <span class="hljs-params">(Integer code, String message)</span> {<br>      <span class="hljs-built_in">this</span>(code, message, <span class="hljs-literal">null</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PAYMENT_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://localhost:8001"</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-comment">//通过自测调用8001端口的"/payment/create"</span><br>    <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/create"</span>)<br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">create</span> <span class="hljs-params">(Payment payment)</span> {<br>        <span class="hljs-comment">//参数：url，录入数据的类型，返回类型</span><br>        <span class="hljs-comment">//RestTemplate的post方式传参 后端需要加上@RequestBody实现json字符串-》对象</span><br>        <span class="hljs-keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="hljs-string">"/payment/create"</span>, payment, CommonResult.class);<br>    }<br><br>    <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/get/{id}"</span>)<br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPayment</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id) {<br>        <span class="hljs-comment">//参数：url，返回类型</span><br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="hljs-string">"/payment/get/"</span> + id, CommonResult.class);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>注意</strong></p><p>由于 RestTemplate 的 post 方式传参会自动封装成 <code>json字符串</code>格式，在支付模块的写操作中形参需要加上 <code>@RequestBody</code> 注解，使 <code>json字符串</code>格式转换为对象格式</p></li><li><p>运行结果</p><p>读操作</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9D%97%E8%AF%BB%E6%93%8D%E4%BD%9C.png" alt="读操作"></p><p>写操作</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9D%97%E5%86%99%E6%93%8D%E4%BD%9C.png" alt="写操作"></p></li></ol><h1 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h1><p>由于上面两个工程有重复性代码（pojo 实体类），所以我们需要进行工程重构</p><h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>根据上面两个模块的步骤创建新模块 cloud-api-commons</p><h2 id="修改pom"><a href="#修改pom" class="headerlink" title="修改pom"></a>修改 pom</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--工具类包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="把实体类代码复制到对应的包内"><a href="#把实体类代码复制到对应的包内" class="headerlink" title="把实体类代码复制到对应的包内"></a>把实体类代码复制到对应的包内</h2><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_%E5%B7%A5%E7%A8%8B%E9%87%8D%E6%9E%84.png"></p><h2 id="执行maven命令并删除重复代码"><a href="#执行maven命令并删除重复代码" class="headerlink" title="执行maven命令并删除重复代码"></a>执行 maven 命令并删除重复代码</h2><p>执行 maven 的 <code>clena</code> 和 <code>install</code> 命令</p><p>然后删除原来模块的重复代码</p><h2 id="引入坐标"><a href="#引入坐标" class="headerlink" title="引入坐标"></a>引入坐标</h2><p>在上面两个模块的 pom 文件里添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>完成实体的引入</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用浏览器或者 postman 测试</p><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><h2 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h2><p>Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理</p><p>在传统的 RPC 远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p><h2 id="什么是服务注册与发现"><a href="#什么是服务注册与发现" class="headerlink" title="什么是服务注册与发现"></a>什么是服务注册与发现</h2><p>Eureka 采用了 CS 的设计架构，Eureka Sever 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka 的客户端连接到 Eureka Server 并维持心跳连接。这样系统的维护人员就可以通过<br>Eureka Server 来监控系统中各个微服务是否正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方 (消费者服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地 RPC 调用<br>RPC 远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系 (服务治理概念)。在任何 RPC 远程框架中，都会有一个注册中心存放服务地址相关信息 (接口地址)</p><h2 id="Eureka的组件"><a href="#Eureka的组件" class="headerlink" title="Eureka的组件"></a>Eureka 的组件</h2><p><strong>Eureka 包含两个组件：Eureka Server 和 Eureka Client</strong></p><ul><li><p><strong>Eureka Server 提供服务注册服务</strong></p><p>各个微服务节点通过配置启动后，会在 EurekaServer 中进行注册，这样 EurekaServer 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p></li><li><p><strong>EurekaClient 通过注册中心进行访问</strong></p><p>它是一个 Java 客户端，用于简化 Eureka Server 的交互，客户端同时也具备一个内置的、使用轮询 (round-robin) 负载算法的负载均衡器。在应用启动后，将会向 Eureka Server 发送心跳 (默认周期为<br>30 秒)。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，EurekaServer 将会从服务注册表中把这个服务节点移除（默认 90 秒)</p></li></ul><h2 id="Eureka服务端安装（注册中心）"><a href="#Eureka服务端安装（注册中心）" class="headerlink" title="Eureka服务端安装（注册中心）"></a>Eureka 服务端安装（注册中心）</h2><ol><li><p>创建名为 cloud-eureka-server7001 的 Maven 模块</p></li><li><p>修改 pom.xml</p><p>添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--引入自己的api实体类包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumer-order80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Eureka--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">locathost</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">#设置与Eureka server交互的地址查询服务和注册服务都需要依赖这个地址。</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://${eureka.instance.hostname}:${server.port}/eureka/</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaMain7001</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(EurekaMain7001.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>访问：<a href="http://localhost:7001/">http://localhost:7001/</a></p><p>出现以下画面即安装成功，当前并无服务注册进来</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png"></p></li></ol><h2 id="支付微服务-8001-入驻进-Eureka"><a href="#支付微服务-8001-入驻进-Eureka" class="headerlink" title="支付微服务 8001 入驻进 Eureka"></a>支付微服务 8001 入驻进 Eureka</h2><ol><li><p>修改 8001 的 pom.xml，添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>yaml 添加</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#表示是否将自己注册进Eurekaserver默认为true。</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain8001</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(PaymentMain8001.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><ul><li><p>首先启动 EurekaServer（注册中心）</p></li><li><p>然后启动 8001EurekaClient（客户端）</p></li><li><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka8001%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%85%A5%E9%A9%BB.png" alt="入驻成功"></p></li><li><p>yaml 里面的</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span><br></code></pre></td></tr></tbody></table></figure><p>即是入驻客户端的名字</p></li></ul></li></ol><h2 id="订单微服务-80-入驻进-EurekaServer"><a href="#订单微服务-80-入驻进-EurekaServer" class="headerlink" title="订单微服务 80 入驻进 EurekaServer"></a>订单微服务 80 入驻进 EurekaServer</h2><ol><li><p>修改 pom.xml，添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-order-service</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#表示是否将自己注册进Eurekaserver默认为true。</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderMain80</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(OrderMain80.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka80%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%85%A5%E9%A9%BB.png"></p></li></ol><h2 id="Eureka-集群原理说明"><a href="#Eureka-集群原理说明" class="headerlink" title="Eureka 集群原理说明"></a>Eureka 集群原理说明</h2><p>服务注册：将服务信息注册进注册中心</p><p>服务发现：从注册中心上获取服务信息</p><p>实质：存 key 服务名取 value 调用地址</p><ol><li><p>先启动 eureka 注主册中心</p></li><li><p>启动服务提供者 payment 支付服务</p></li><li><p>支付服务启动后会把自身信息 (比服务地址 L 以别名方式注朋进 eureka</p></li><li><p>消费者 order 服务在需要调用接口时，使用服务别名去注册中心获取实际的 RPC 远程调用地址</p></li><li><p>消去者导调用地址后，底屋实际是利用 HttpClient 技术实现远程调用</p></li><li><p>消费者实癸导服务地址后会缓存在本地 jvm 内存中，默认每间隔 30 秒更新 — 次服务调用地址</p></li></ol><p><strong>问题：微服务 RPC 远程服务调用最核心的是什么？</strong><br>高可用，试想你的注册中心只有一个 only one，万一它出故障了，会导致整个为服务环境不可用。</p><p>解决办法：搭建 Eureka 注册中心集群，实现负载均衡 + 故障容错。</p><p><strong>实现互相注册</strong></p><h2 id="Eureka集群搭建"><a href="#Eureka集群搭建" class="headerlink" title="Eureka集群搭建"></a>Eureka 集群搭建</h2><ol><li><p>创建 cloud-eureka-server7002 工程，过程参考上面的注册中心，完成启动类，pom.xml，yaml 的修改与创建</p></li><li><p>修改 hosts 文件，在底部添加</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 eureka7001.com<br>127.0.0.1 eureka7002.com<br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 7001 的 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">#集群指向其它eureka</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7002/eureka/</span><br>      <span class="hljs-comment">#单机就是7001自己</span><br>      <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 7002 的 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7002</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7002.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">#集群指向其它eureka</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka/</span><br>      <span class="hljs-comment">#单机就是7002自己</span><br>      <span class="hljs-comment">#defaultZone: http://localhost:7002/eureka/</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>访问：<a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a></p><p>​            <a href="http://eureka7002.com:7002/">http://eureka7002.com:7002/</a></p><p>结果为：</p><p>7001:</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E9%9B%86%E7%BE%A47001.png"></p><p>7002:</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E9%9B%86%E7%BE%A47002.png"></p></li></ol><h2 id="将两个微服务注册进Eureka集群"><a href="#将两个微服务注册进Eureka集群" class="headerlink" title="将两个微服务注册进Eureka集群"></a>将两个微服务注册进 Eureka 集群</h2><p>修改两个微服务的 yaml 文件：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#表示是否将自己注册进Eurekaserver默认为true。</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,</span> <span class="hljs-string">http://localhost:7002/eureka</span><br></code></pre></td></tr></tbody></table></figure><h2 id="支付微服务集群配置"><a href="#支付微服务集群配置" class="headerlink" title="支付微服务集群配置"></a>支付微服务集群配置</h2><ol><li><p>参考支付微服务 8001 建立支付微服务 8002，只需修改端口和主启动类 <code>8001</code> 为 <code>8002</code></p></li><li><p>修改两个微服务的 controller，添加端口号，默认负载均衡方式是轮询</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentServiceImpl;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> {<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentServiceImpl paymentServiceImpl;<br><br>    <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@PostMapping</span> (<span class="hljs-string">"/payment/create"</span>)<br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">create</span> <span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Payment payment)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentServiceImpl.create(payment);<br>        log.info(<span class="hljs-string">"****插入结果："</span> + result + <span class="hljs-string">"****"</span>);<br>        <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">"插入数据库成功,端口："</span>+serverPort, result);<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">444</span>, <span class="hljs-string">"插入数据库失败"</span>, <span class="hljs-literal">null</span>);<br>        }<br>    }<br><br>    <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/get/{id}"</span>)<br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id) {<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> paymentServiceImpl.getPaymentById(id);<br>        log.info(<span class="hljs-string">"****查询结果："</span> + payment + <span class="hljs-string">"****"</span>);<br>        <span class="hljs-keyword">if</span> (payment != <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">"查询成功,端口："</span>+serverPort, payment);<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">444</span>, <span class="hljs-string">"没有对应记录，查询ID"</span> + id, <span class="hljs-literal">null</span>);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>修改订单服务 controller，并在 80 的配置类添加 <code>@LoadBalanced</code> 注解实现负载均衡</p><p>controller 修改：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对外暴露微服务名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PAYMENT_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://CLOUD-PAYMENT-SERVICE"</span>;<br><span class="hljs-comment">//public static final String PAYMENT_URL = "http://localhost:8001";</span><br></code></pre></td></tr></tbody></table></figure><p>配置类修改：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> {<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span><br>   <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>支付微服务集群</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E9%9B%86%E7%BE%A4%E6%94%AF%E4%BB%98%E5%BE%AE%E6%9C%8D%E5%8A%A1.png"></p><p>访问测试：</p><p>8001 端口:</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E9%9B%86%E7%BE%A4%E6%94%AF%E4%BB%98%E5%BE%AE%E6%9C%8D%E5%8A%A18001%E6%B5%8B%E8%AF%95.png"></p><p>8002 端口：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E9%9B%86%E7%BE%A4%E6%94%AF%E4%BB%98%E5%BE%AE%E6%9C%8D%E5%8A%A18002%E6%B5%8B%E8%AF%95.png"></p><p>轮询负载均衡测试：</p><p>8001：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E9%9B%86%E7%BE%A4%E8%AE%A2%E5%8D%95%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%958001.png"></p><p>8002：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E9%9B%86%E7%BE%A4%E8%AE%A2%E5%8D%95%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%958002.png"></p></li></ol><h2 id="actuator-微服务信息完善"><a href="#actuator-微服务信息完善" class="headerlink" title="actuator 微服务信息完善"></a>actuator 微服务信息完善</h2><ol><li><p>修改 8001 和 8002 的 yaml，添加</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment800X</span> <span class="hljs-comment">#（自定义id）微服务名称</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示ip地址</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>同理修改 80</p></li></ol><h2 id="服务发现-Discovery"><a href="#服务发现-Discovery" class="headerlink" title="服务发现 Discovery"></a>服务发现 Discovery</h2><p>对于注册进 eureka 里面的微服务，可以通过服务发现来获得该服务的信息</p><ol><li><p>修改 controller，添加</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br><span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/discovery"</span>)<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">discovery</span> <span class="hljs-params">()</span> {<br>    List&lt;String&gt; services = discoveryClient.getServices();<br>    <span class="hljs-keyword">for</span> (String element : services) {<br>        log.info(<span class="hljs-string">"*****element:"</span> + element);<br>    }<br>    <span class="hljs-comment">//CLOUD-PAYMENT-SERVICE可以换成你想要的微服务别名，也就是spring.application.name</span><br>    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">"CLOUD-PAYMENT-SERVICE"</span>);<br>    <span class="hljs-keyword">for</span> (ServiceInstance instance : instances) {<br>        log.info(instance.getServiceId() + <span class="hljs-string">"\t"</span> + instance.getHost() + <span class="hljs-string">"\t"</span> + instance.getPort() + <span class="hljs-string">"\t"</span> + instance.getUri());<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.discoveryClient;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类加注解 <code>@EnableDiscoveryClient</code></p></li><li><p>测试</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%BB%88%E7%AB%AF%E6%97%A5%E5%BF%97%E6%B5%8B%E8%AF%95.png" alt="终端日志"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Eureka%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%BD%91%E9%A1%B5%E6%B5%8B%E8%AF%95.png" alt="网页测试"></p></li></ol><h2 id="Eureka-自我保护"><a href="#Eureka-自我保护" class="headerlink" title="Eureka 自我保护"></a>Eureka 自我保护</h2><ul><li><p>概述</p><p>保护模式主要用于一组客户端和 Eureka Server 之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server 将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p><p>如果在 Eureka Server 的首页看到以下这段提示，则说明 Eureka 进入了保护模式:</p><p><code>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THANTHRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUSTTO BE SAFE</code></p></li><li><p><strong>导致原因</strong></p><p>一句话：某时刻某一个微服务不可用了，Eureka 不会立刻清理，依旧会对该微服务的信息进行保存。</p><p>属于 CAP 里面的 AP 分支。</p></li><li><p><strong>为什么会产生 Eureka 自我保护机制？</strong></p><p>为了 EurekaClient 可以正常运行，防止与 EurekaServer 网络不通情况下，EurekaServer 不会立刻将 EurekaClient 服务剔除</p></li><li><p><strong>什么是自我保护模式？</strong></p><p>默认情况下，如果 EurekaServer 在一定时间内没有接收到某个微服务实例的心跳，EurekaServer 将会注销该实例 (默认 90 秒)。但是当网络分区故障发生 (延时、卡顿、拥挤) 时，微服务与 EurekaServer<br>之间无法正常通信，以上行为可能变得非常危险了 —— 因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka 通过 “自我保护模式” 来解决这个问题 —— 当 EurekaServer 节点在短时间内丢失过多客户端时 (<br>可能发生了网络分区故障)，那么这个节点就会进入自我保护模式。</p></li><li><p><strong>自我保护机制∶默认情况下 EurekaClient 定时向 EurekaServer 端发送心跳包</strong></p><p>如果 Eureka 在 server 端在一定时间内 (默认 90 秒) 没有收到 EurekaClient 发送心跳包，便会直接从服务注册列表中剔除该服务，但是在短时间 ( 90 秒中) 内丢失了大量的服务实例心跳，这时候<br>Eurekaserver 会开启自我保护机制，不会剔除该服务（该现象可能出现在如果网络不通但是 EurekaClient<br>为出现宕机，此时如果换做别的注册中心如果一定时间内没有收到心跳会将剔除该服务，这样就出现了严重失误，因为客户端还能正常发送心跳，只是网络延迟问题，而保护机制是为了解决此问题而产生的)。</p></li><li><p><strong>在自我保护模式中，Eureka Server 会保护服务注册表中的信息，不再注销任何服务实例。</strong></p><p>它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解：好死不如赖活着。</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目注销任何健康的微服务。使用自我保护模式，可以让 Eureka 集群更加的健壮、稳定。</p></li></ul><h2 id="禁止Eureka自我保护"><a href="#禁止Eureka自我保护" class="headerlink" title="禁止Eureka自我保护"></a>禁止 Eureka 自我保护</h2><p>以 7001、8001 为例子:</p><ul><li><p>7001</p><p>出厂默认，自我保护机制是开启的</p><p>使用 eureka.server.enable-self-preservation = false 可以禁用自我保护模式</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-comment">#关闭自我保护机制，保证不可用服务被及时踢除</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">2000</span><br></code></pre></td></tr></tbody></table></figure><p>关闭效果：</p><p>spring-eureka 主页会显示出一句：</p><p><code>THE SELF PRESERVATION MODE IS TURNED OFF. THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</code></p></li><li><p>8001</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>    <span class="hljs-attr">instance:</span><br>      <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment8001</span><br>      <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment">#心跳检测与续约时间</span><br>      <span class="hljs-comment">#开发时没置小些，保证服务关闭后注册中心能即使剔除服务</span><br>      <span class="hljs-comment">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)</span><br>      <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务</span><br>      <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="Eureka-停更说明"><a href="#Eureka-停更说明" class="headerlink" title="Eureka 停更说明"></a>Eureka 停更说明</h2><p><a href="https://github.com/Netflix/eureka/wiki">https://github.com/Netflix/eureka/wiki</a></p><blockquote><p>Eureka 2.0 (Discontinued)</p><p>The existing open source work on eureka 2.0 is discontinued. The code base and artifacts that were released as part of the existing repository of work on the 2.x branch is considered use at your own risk.</p><p>Eureka 1.x is a core part of Netflix’s service discovery system and is still an active project.</p></blockquote><p>我们用 ZooKeeper 代替 Eureka 功能。</p><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><p>zookeeper 是一个分布式协调工具，可以实现注册中心功能</p><p>关闭 Linux 服务器防火墙后，启动 zookeeper 服务器</p><p>用到的 Linux 命令行：</p><p><code>systemctl stop firewalld</code> 关闭防火墙<br><code>systemctl status firewalld</code> 查看防火墙状态<br><code>ipconfig</code> 查看 IP 地址<br><code>ping</code> 查验结果 zookeeper 服务器取代 Eureka 服务器，zookeeper 作为服务注册中心</p><h2 id="支付微服务入驻zookeeper"><a href="#支付微服务入驻zookeeper" class="headerlink" title="支付微服务入驻zookeeper"></a>支付微服务入驻 zookeeper</h2><ol><li><p>参考上面建立 cloud-provider-payment8004 工程</p></li><li><p>修改 pom.xml，把 Eureka 的依赖替换成 zookeeper（测试是否能连接到 zookeeper，不进行数据库操作了，所以没有引入数据库相关依赖）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--zookeeper--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#8004表示注册到zookeeper服务器的支付服务提供者端口号</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8004</span><br><br><span class="hljs-comment">#服务别名----注册zookeeper到注册中心名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-provider-payment</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">zookeeper:</span><br>      <span class="hljs-comment">#此处为虚拟机上的zookeeper</span><br>      <span class="hljs-attr">connect-string:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.173</span><span class="hljs-number">.167</span><span class="hljs-string">:2181</span> <br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain8004</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(PaymentMain8004.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> {<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>   <span class="hljs-keyword">private</span> String serverPort;<br><br>   <span class="hljs-meta">@RequestMapping("/payment/zk")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentzk</span><span class="hljs-params">()</span> {<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">"springcloud with zookeeper:"</span>+serverPort+<span class="hljs-string">"\t"</span>+ UUID.randomUUID().toString();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><ul><li><p>启动 zookeeper 以及 zookeeper 客户端</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zookeeper]<span class="hljs-comment"># bin/zkServer.sh start</span><br>[root@localhost zookeeper]<span class="hljs-comment"># cd bin/</span><br>[root@localhost bin]<span class="hljs-comment"># ./zkCli.sh </span><br></code></pre></td></tr></tbody></table></figure></li><li><p>启动 8004 发现 zookeeper 版本冲突，修改 pom.xml 排除自带 zookeeper</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--zookeeper--&gt;</span><br><span class="hljs-comment">&lt;!--修改--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--添加linux上对应版本的zookeeper--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>入驻成功</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Zookeeper8004%E5%85%A5%E9%A9%BB%E6%B5%8B%E8%AF%95.png"></p></li><li><p>网页测试</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Zookeeper8004%E7%BD%91%E9%A1%B5%E6%B5%8B%E8%AF%95.png"></p></li><li><p>继续深挖，发现 zookeeper 节点信息 json 串，表明微服务已经成功入驻进 zookeeper</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Zookeeper8004%E8%8A%82%E7%82%B9json%E4%BF%A1%E6%81%AF%E4%B8%B2%E8%A7%A3%E6%9E%90.png"></p></li></ul></li></ol><h2 id="Zookeeper的节点性质"><a href="#Zookeeper的节点性质" class="headerlink" title="Zookeeper的节点性质"></a>Zookeeper 的节点性质</h2><p>ZooKeeper 的服务节点是<strong>临时节点</strong>，没有自我保护机制。</p><h2 id="订单微服务入驻zookeeper"><a href="#订单微服务入驻zookeeper" class="headerlink" title="订单微服务入驻zookeeper"></a>订单微服务入驻 zookeeper</h2><ol><li><p>参考上文新建 cloud-consumerzk-order80 工程</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumerzk-order80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--先排除自带的zookeeper--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--添加zookeeper3.4.10版本--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#8004表示注册到zookeeper服务器的支付服务提供者端口号</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment">#服务别名----注册zookeeper到注册中心名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-consumer-order</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">zookeeper:</span><br>      <span class="hljs-comment">#此处为虚拟机上的zookeeper</span><br>      <span class="hljs-attr">connect-string:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.173</span><span class="hljs-number">.167</span><span class="hljs-string">:2181</span> <br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderZKMain80</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(OrderZKMain80.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置 Bean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.config;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> {<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span><br>   <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderZKController</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INVOKE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://cloud-provider-payment"</span>;<br><br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/zk"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="hljs-string">"/payment/zk"</span>, String.class);<br>      <span class="hljs-keyword">return</span> result;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Zookeeper80%E7%BD%91%E9%A1%B5%E6%B5%8B%E8%AF%95.png"></p></li></ol><h1 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们可以访问 <a href="https://www.consul.io/">Consul 官网</a>了解一下 Consul</p><p>这个是 <a href="https://www.springcloud.cc/spring-cloud-consul.html">Consul 中文文档</a></p><blockquote><p>What is Consul?</p><p>Consul is a service mesh solution providing a full featured control plane with service discovery, configuration, and segmentation functionality. Each of these features can be used individually as needed, or they can be used together to build a full service mesh. Consul requires a data plane and supports both a proxy and native integration model. Consul ships with a simple built-in proxy so that everything works out of the box, but also supports 3rd party proxy integrations such as Envoy.</p><p>Consul 是一个服务网格解决方案，它提供了一个功能齐全的控制平面，具有服务发现、配置和分段功能。这些特性中的每一个都可以根据需要单独使用，也可以一起用于构建全服务网格。Consul 需要一个数据平面，并支持代理和本机集成模型。Consul 船与一个简单的内置代理，使一切工作的开箱即用，但也支持第三方代理集成，如 Envoy。</p></blockquote><p>Consul 是一套开源的分布式服务发现和配置管理系统，由 HashiCorp 公司用 Go 语言开发。</p><p>提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之 Consul 提供了一种完整的服务网格解决方案。</p><p>它具有很多优点。包括：基于 raft 协议，比较简洁；支持健康检查，同时支持 HTTP 和 DNS 协议支持跨数据中心的 WAN 集群提供图形界面跨平台，支持 Linux、Mac、Windows。</p><h2 id="Consul能干什么？"><a href="#Consul能干什么？" class="headerlink" title="Consul能干什么？"></a>Consul 能干什么？</h2><ul><li>服务发现 - 提供 HTTP 和 DNS 两种发现方式。</li><li>健康监测 - 支持多种方式，HTTP、TCP、Docker、Shell 脚本定制化</li><li> KV 存储 - Key、Value 的存储方式</li><li>多数据中心 - Consul 支持多数据中心</li><li>可视化 Web 界面</li></ul><h2 id="安装并运行-Consul"><a href="#安装并运行-Consul" class="headerlink" title="安装并运行 Consul"></a>安装并运行 Consul</h2><p>这个是 <a href="https://www.consul.io/downloads">Consul 下载地址</a></p><p>windows 版解压缩后，得 consul.exe，<strong>在 consul 文件夹内</strong>打开 cmd</p><ul><li><p>输入 <code>consul -v</code> 查看版本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\stduy\consul_1.11.1_windows_amd64&gt;consul -v<br>Consul v1.11.1<br>Revision 2c56447e<br>Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol &gt;2 when speaking to compatible agents)<br></code></pre></td></tr></tbody></table></figure></li><li><p>开发模式启动 <code>consul agent -dev</code></p></li><li><p>浏览器输入 : <a href="http://localhost:8500/">http://localhost:8500/</a> , 打开 Consul 控制页。</p></li></ul><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><ol><li><p>参考上文新建 cloud-providerconsul-payment8006 工程</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-providerconsul-payment8006<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--   consul--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">###consul服务端口号</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8006</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">consul-provider-payment</span><br>  <span class="hljs-comment">####consul注册中心地址</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">consul:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment">#hostname: 127.0.0.1</span><br>        <span class="hljs-attr">service-name:</span> <span class="hljs-string">${spring.application.name}</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain8006</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(PaymentMain8006.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentConsulController</span> {<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>   <span class="hljs-keyword">private</span> String serverPort;<br><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/payment/consul"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentzk</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"springcloud with consul:"</span> + serverPort + <span class="hljs-string">"\t"</span> + UUID.randomUUID().toString();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>访问：<a href="http://localhost:8500/">http://localhost:8500/</a> 和 <a href="http://localhost:8006/payment/consul%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://localhost:8006/payment/consul 进行测试</a></p></li></ol><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><ol><li><p>新建 Module 消费服务 cloud-consumerconsul-order80</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumerconsul-order80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--   consul--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">###consul服务端口号</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-consumer-order</span><br>  <span class="hljs-comment">####consul注册中心地址</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">consul:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment">#hostname: 127.0.0.1</span><br>        <span class="hljs-attr">service-name:</span> <span class="hljs-string">${spring.application.name}</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderConsulMain80</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(OrderConsulMain80.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置 Bean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.config;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> {<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span><br>   <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderConsulController</span><br>{<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INVOKE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://consul-provider-payment"</span>;<br><br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>   <span class="hljs-meta">@GetMapping</span> (value = <span class="hljs-string">"/consumer/payment/consul"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo</span><span class="hljs-params">()</span><br>   {<br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(INVOKE_URL+<span class="hljs-string">"/payment/consul"</span>,String.class);<br>      <span class="hljs-keyword">return</span> result;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>访问：<a href="http://localhost:8500/">http://localhost:8500/</a> 和 <a href="http://localhost/consumer/payment/consul">http://localhost/consumer/payment/consul</a> 进行测试</p></li></ol><h1 id="三个注册中心异同点"><a href="#三个注册中心异同点" class="headerlink" title="三个注册中心异同点"></a>三个注册中心异同点</h1><table><thead><tr><th>组件名</th><th>语言 CAP</th><th> 服务健康检查</th><th>对外暴露接口</th><th> Spring Cloud 集成</th></tr></thead><tbody><tr><td> Eureka</td><td>Java</td><td>AP</td><td> 可配支持</td><td> HTTP</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td> 支持</td><td> HTTP/DNS</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td> 支持客户端</td><td>已集成</td></tr></tbody></table><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p>C：Consistency (强一致性)</p><p>A：Availability (可用性)</p><p>P：Partition tolerance （分区容错性)</p><p><strong>最多只能同时较好的满足两个。</strong></p><p>CAP 理论的核心是：<strong>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求。</strong></p><p>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类:</p><ul><li>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li><li>CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。</li><li>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li></ul><p>CP 与 AP 对立同一的矛盾关系。</p><h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><h2 id="入门介绍"><a href="#入门介绍" class="headerlink" title="入门介绍"></a>入门介绍</h2><p>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</p><p>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。Ribbon 客户端组件提供一系列完善的配置项如连接超时，重试等。</p><p>简单的说，就是在配置文件中列出 Load Balancer (简称 LB) 后面所有的机器，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等）去连接这些机器。我们很容易使用 Ribbon 实现自定义的负载均衡算法。</p><p><a href="https://github.com/Netflix/ribbon/wiki/Getting-Started">Github - Ribbon</a></p><p>Ribbon 目前也进入维护模式。</p><p>Ribbon 未来可能被 Spring Cloud LoadBalacer 替代。</p><p><strong>LB 负载均衡 (Load Balance) 是什么</strong></p><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的 HA (高可用)。</p><p>常见的负载均衡有软件 Nginx，LVS，硬件 F5 等。</p><p><strong>Ribbon 本地负载均衡客户端 VS Nginx 服务端负载均衡区别</strong></p><p>Nginx 是服务器负载均衡，客户端所有请求都会交给 nginx，然后由 nginx 实现转发请求。即负载均衡是由服务端实现的。 Ribbon 本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到 JVM<br>本地，从而在本地实现 RPC 远程服务调用技术。</p><p><strong>集中式 LB</strong></p><p>即在服务的消费方和提供方之间使用独立的 LB 设施 (可以是硬件，如 F5, 也可以是软件，如 nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方；</p><p><strong>进程内 LB</strong></p><p>将 LB 逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><p><strong>Ribbon 就属于进程内 LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p><p><strong>一句话：负载均衡 + RestTemplate 调用</strong></p><h2 id="负载均衡和-Rest-调用"><a href="#负载均衡和-Rest-调用" class="headerlink" title="负载均衡和 Rest 调用"></a>负载均衡和 Rest 调用</h2><p><strong>架构说明</strong></p><p>总结：Ribbon 其实就是一个软负载均衡的客户端组件，它可以和其他所需请求的客户端结合使用，和 Eureka 结合只是其中的一个实例。</p><p><strong>Ribbon 在工作时分成两步：</strong></p><ul><li><p>第一步先选择 EurekaServer , 它优先选择在同一个区域内负载较少的 server。</p></li><li><p>第二步再根据用户指定的策略，在从 server 取到的服务注册列表中选择一个地址。</p></li></ul><p>其中 Ribbon 提供了多种策略：比如<strong>轮询</strong>、<strong>随机</strong>和<strong>根据响应时间加权</strong>。</p><h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactid</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>先前工程项目没有引入 <strong>spring-cloud-starter-ribbon</strong> 也可以使用 ribbon，这是因为 <strong>spring-cloud-starter-netflix-eureka-client</strong> 自带了 <strong>spring-cloud-starter-ribbon</strong> 引用。</p><h2 id="RestTamplate"><a href="#RestTamplate" class="headerlink" title="RestTamplate"></a>RestTamplate</h2><p><a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">RestTemplate Java Doc</a></p><p>getForObject () /getForEntity () - GET 请求方法</p><p>getForObject ()：返回对象为响应体中数据转化成的对象，基本上可以理解为 Json。</p><p>getForEntity ()：返回对象为 ResponseEntity 对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等。</p><p>postForObject () /postForEntity () - POST 请求方法</p><h2 id="Ribbon-默认自带的负载规则"><a href="#Ribbon-默认自带的负载规则" class="headerlink" title="Ribbon 默认自带的负载规则"></a>Ribbon 默认自带的负载规则</h2><p>lRule 接口：根据特定算法中从服务列表中选取一个要访问的服务</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Ribbon%E8%B4%9F%E8%BD%BD%E8%A7%84%E5%88%99.png"></p><ul><li>RoundRobinRule 轮询</li><li> RandomRule 随机</li><li> RetryRule 先按照 RoundRobinRule 的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用服务</li><li> WeightedResponseTimeRule 对 RoundRobinRule 的扩展，响应速度越快的实例选择权重越大，越容易被选择</li><li> BestAvailableRule 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li><li> AvailabilityFilteringRule 先过滤掉故障实例，再选择并发较小的实例</li><li> ZoneAvoidanceRule 默认规则，复合判断 server 所在区域的性能和 server 的可用性选择服务器</li></ul><h2 id="Ribbon-负载规则替换"><a href="#Ribbon-负载规则替换" class="headerlink" title="Ribbon 负载规则替换"></a>Ribbon 负载规则替换</h2><ol><li><p>修改 cloud-consumer-order80</p></li><li><p>注意配置细节</p><p>官方文档明确给出了警告：这个自定义配置类<strong>不能</strong>放在 @ComponentScan 所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的 Ribbon 客户端所共享，达不到特殊化定制的目的了。</p><p><strong>（也就是说不要将 Ribbon 配置类与主启动类同包）</strong></p></li><li><p>新建 package ： <strong>com.zlw.myrule</strong></p></li><li><p>编写自己的负载规则</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.myrule;<br><br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.IRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.RandomRule;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySelfRule</span> {<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">myRule</span><span class="hljs-params">()</span>{<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类加上 <code>@RibbonClient</code> 注解表明哪个微服务使用什么负载规则</p><p><code>@RibbonClient(name = "微服务名字",configuration = 自定义规则.class)</code></p><p>如果是多个微服务（或全部微服务）即使用：<code>@RibbonClients(value = {@RibbonClient(name = "微服务名字",configuration = 自定义规则.class)})</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> com.zlw.myrule.MySelfRule;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.ribbon.RibbonClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@RibbonClient(name = "CLOUD-PAYMENT-SERVICE",configuration = MySelfRule.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderMain80</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(OrderMain80.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>开启 cloud-eureka-server7001，cloud-consumer-order80，cloud-provider-payment8001，cloud-provider-payment8002</p><p>浏览器 - 输入 <a href="http://localhost/consumer/payment/get/124">http://localhost/consumer/payment/get/124</a></p><p>返回结果中的 serverPort 在 8001 与 8002 两种间反复横跳。</p></li></ol><h2 id="Ribbon-默认负载轮询算法原理"><a href="#Ribbon-默认负载轮询算法原理" class="headerlink" title="Ribbon 默认负载轮询算法原理"></a>Ribbon 默认负载轮询算法原理</h2><p>默认负载轮训算法: rest 接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标，每次服务重启动后 rest 接口计数从 1 开始。</p><p><code>List&lt;Servicelnstance&gt; instances = discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");</code></p><p>如:</p><ul><li>List [0] instances = 127.0.0.1:8002</li><li>List [1] instances = 127.0.0.1:8001</li></ul><p>8001+ 8002 组合成为集群，它们共计 2 台机器，集群总数为 2，按照轮询算法原理：</p><ul><li>当总请求数为 1 时：1%2=1 对应下标位置为 1，则获得服务地址为 127.0.0.1:8001</li><li> 当总请求数位 2 时：2%2=О对应下标位置为 0，则获得服务地址为 127.0.0.1:8002</li><li> 当总请求数位 3 时：3%2=1 对应下标位置为 1，则获得服务地址为 127.0.0.1:8001</li><li> 当总请求数位 4 时：4%2=О对应下标位置为 0，则获得服务地址为 127.0.0.1:8002</li><li> 如此类推…</li></ul><h1 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/#spring-cloud-openfeign">官方文档</a></p><p><a href="https://github.com/spring-cloud/spring-cloud-openfeign">Github 地址</a></p><blockquote><p>Feign is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring MVC annotations and for using the same <code>HttpMessageConverters</code> used by default in Spring Web. Spring Cloud integrates Ribbon and Eureka, as well as Spring Cloud LoadBalancer to provide a load-balanced http client when using Feign.</p><p>Feign 是一个声明式 WebService 客户端。使用 Feign 能让编写 Web Service 客户端更加简单。它的使用方法是<strong>定义一个服务接口然后在上面添加注解</strong>。Feign 也支持可拔插式的编码器和解码器。Spring Cloud 对 Feign 进行了封装，使其支持了 Spring MVC 标准注解和 HttpMessageConverters。Feign 可以与 Eureka 和 Ribbon 组合使用以支持负载均衡。</p></blockquote><p><strong>Feign 能干什么</strong></p><p>Feign 旨在使编写 Java Http 客户端变得更容易。</p><p>前面在使用 Ribbon+RestTemplate 时，利用 RestTemplate 对 http 请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign 在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在 Feign 的实现下，我们只需创建一个接口并使用注解的方式来配置它 (以前是 Dao 接口上面标注 Mapper 注解，现在是一个微服务接口上面标注一个 Feign<br>注解即可)，即可完成对服务提供方的接口兜底方法，简化了使用 Spring cloud Ribbon 时，自动封装服务调用客户端的开发量。</p><p><strong>Feign 集成了 Ribbon</strong></p><p>利用 Ribbon 维护了 Payment 的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与 Ribbon 不同的是，<strong>通过 feign 只需要定义服务兜底方法接口且以声明式的方法</strong>，优雅而简单的实现了服务调用。</p><p><strong>Feign 和 OpenFeign 两者区别</strong></p><p><strong>Feign</strong> 是 Spring Cloud 组件中的一个轻量级 RESTful 的 HTTP 服务客户端 Feign 内置了 Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign 的使用方式是：使用 Feign 的注解定义接口，调用这个接口，就可以调用服务注册中心的服务。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><hr><p><strong>OpenFeign</strong> 是 Spring Cloud 在 Feign 的基础上支持了 SpringMVC 的注解，如 @RequesMapping 等等。OpenFeign 的 @Feignclient 可以解析 SpringMVc 的<br>@RequestMapping 注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="OpenFeign-服务调用"><a href="#OpenFeign-服务调用" class="headerlink" title="OpenFeign 服务调用"></a>OpenFeign 服务调用</h2><ol><li><p>新建 cloud-consumer-feign-order80</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumer-feign-order80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    openFeign--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    Eureka--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka/,http://localhost:7002/eureka/</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderOpenFeignMain80</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(OrderOpenFeignMain80.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>业务接口 <code>@FeignClient(value = "微服务名字")</code> 调用 8001 的服务接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = "CLOUD-PAYMENT-SERVICE")</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentFeignService</span> {<br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/get/{id}"</span>)<br>   CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentFeignService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderFeignController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> PaymentFeignService paymentFeignService;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/get/{id}"</span>)<br>   CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id){<br>      <span class="hljs-keyword">return</span> paymentFeignService.getPaymentById(id);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>先启动 2 个 eureka 集群 7001/7002</p><p>再启动 2 个微服务 8001/8002</p><p>启动 OpenFeign 启动</p><p><a href="http://localhost/consumer/payment/get/124">http://localhost/consumer/payment/get/124</a></p><p>Feign 自带负载均衡配置项</p></li></ol><h2 id="OpenFeign-超时控制"><a href="#OpenFeign-超时控制" class="headerlink" title="OpenFeign 超时控制"></a>OpenFeign 超时控制</h2><p><strong>超时设置，故意设置超时演示出错情况</strong></p><ol><li><p>服务提供方 8001/8002 故意写暂停程序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//故意暂停3秒钟</span><br><span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/feign/timeout"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentFeignTimeout</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-keyword">try</span> {<br>      TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>   } <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>      e.printStackTrace();<br>   }<br>   <span class="hljs-keyword">return</span> serverPort;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>服务消费方 80 添加超时方法 PaymentFeignService</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = "CLOUD-PAYMENT-SERVICE")</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentFeignService</span> {<br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/get/{id}"</span>)<br>   CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id);<br><br>   <span class="hljs-comment">//添加这里</span><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/feign/timeout"</span>)<br>   String <span class="hljs-title function_">paymentFeignTimeout</span> <span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>服务消费方 80 添加 controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentFeignService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderFeignController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> PaymentFeignService paymentFeignService;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/get/{id}"</span>)<br>   <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">getPaymentById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id){<br>      <span class="hljs-keyword">return</span> paymentFeignService.getPaymentById(id);<br>   }<br><br>   <span class="hljs-comment">//添加这里</span><br>   <span class="hljs-comment">// OpenFeign客户端一般默认等待1秒钟</span><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/feign/timeout"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentFeignTimeout</span> <span class="hljs-params">()</span>{<br>      <span class="hljs-keyword">return</span> paymentFeignService.paymentFeignTimeout();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>多次刷新 <a href="http://localhost/consumer/payment/feign/timeout">http://localhost/consumer/payment/feign/timeout</a></p><p>将会跳出错误 Spring Boot 默认错误页面，主要异常：<code>feign.RetryableException:Read timed out executing GET http://CLOUD-PAYMENT-SERVCE/payment/feign/timeout</code>。</p><p><strong>OpenFeign 默认等待 1 秒钟，超过后报错</strong></p><p><strong>我们需要在 YML 文件里需要开启 OpenFeign 客户端超时控制</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)(单位：毫秒)</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">5000</span><br>  <span class="hljs-comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">5000</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="OpenFeign-日志增强"><a href="#OpenFeign-日志增强" class="headerlink" title="OpenFeign 日志增强"></a>OpenFeign 日志增强</h2><p><strong>日志打印功能</strong></p><p>Feign 提供了日志打印功能，我们可以通过配置来调整日恙级别，从而了解 Feign 中 Http 请求的细节。</p><p>说白了就是对 Feign 接口的调用情况进行监控和输出</p><p><strong>日志级别</strong></p><ul><li>NONE：默认的，不显示任何日志；</li><li>BASIC：仅记录请求方法、URL、响应状态码及执行时间；</li><li>HEADERS：除了 BASIC 中定义的信息之外，还有请求和响应的头信息；</li><li>FULL：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。</li></ul><p><strong>配置日志 bean</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.config;<br><br><span class="hljs-keyword">import</span> feign.Logger;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignConfig</span> {<br>    <span class="hljs-meta">@Bean</span><br>    Logger.Level <span class="hljs-title function_">feignLoggerLevel</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>YML 文件里需要开启日志的 Feign 客户端</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-comment"># feign日志以什么级别监控哪个接口</span><br>    <span class="hljs-attr">com.zlw.springcloud.service.PaymentFeignService:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><p>访问：<a href="http://localhost/consumer/payment/get/124">http://localhost/consumer/payment/get/124</a></p><p>可以看到后台输出：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">2022-01-11 18:54:43.977 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] &lt;--- HTTP/1.1 200 (534ms)</span><br>2022-01-11 18:54:43.978 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] connection: keep-alive</span><br>2022-01-11 18:54:43.978 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] content-type: application/json</span><br>2022-01-11 18:54:43.978 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] date: Tue, 11 Jan 2022 10:54:43 GMT</span><br>2022-01-11 18:54:43.978 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] keep-alive: timeout=60</span><br>2022-01-11 18:54:43.978 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] transfer-encoding: chunked</span><br>2022-01-11 18:54:43.978 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] </span><br>2022-01-11 18:54:43.979 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] {"code":200,"message":"查询成功,端口：8001","data":{"id":124,"serial":"awei"}}</span><br>2022-01-11 18:54:43.979 DEBUG 29400 --- [p-nio-80-exec-1] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="hljs-comment">#getPaymentById] &lt;--- END HTTP (85-byte body)</span><br></code></pre></td></tr></tbody></table></figure><h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><h2 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h2><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</p><p><strong>服务雪崩</strong></p><p>多个微服务之间调用的时候，假设微服务 A 调用微服务 B 和微服务 C，微服务 B 和微服务 C 又调用其它的微服务，这就是所谓的 “扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务 A 的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的 “雪崩效应”.<br>对于高流量的应用来说，单一的后避依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><p>所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</p><h2 id="Hystrix简介"><a href="#Hystrix简介" class="headerlink" title="Hystrix简介"></a>Hystrix 简介</h2><p><a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">Hystrix 官网</a></p><p>Hystrix 是一个用于处理分布式系统的<strong>延迟和容错</strong>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix 能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</strong>。</p><p>“断路器” 本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（<strong>类似熔断保险丝</strong>)，向调用方返回一个符合预期的、可处理的备选响应（FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h2 id="Hystrix能干嘛"><a href="#Hystrix能干嘛" class="headerlink" title="Hystrix能干嘛"></a>Hystrix 能干嘛</h2><ul><li>服务降级</li><li>服务熔断</li><li>接近实对的监控</li><li>…</li></ul><h2 id="Hystrix-的服务降级熔断限流概念"><a href="#Hystrix-的服务降级熔断限流概念" class="headerlink" title="Hystrix 的服务降级熔断限流概念"></a>Hystrix 的服务降级熔断限流概念</h2><p><strong>服务端熔断，客户端降级。</strong></p><p><strong>服务降级</strong></p><p>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</p><p><strong>哪些情况会出发降级</strong></p><ul><li>程序运行导常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池 / 信号量打满也会导致服务降级</li></ul><p><strong>服务熔断</strong></p><p>类比<strong>保险丝</strong>达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示。</p><p>服务的降级 -&gt; 进而熔断 -&gt; 恢复调用链路</p><p><strong>服务限流</strong></p><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟 N 个，有序进行。</p><h2 id="Hystrix-支付微服务构建"><a href="#Hystrix-支付微服务构建" class="headerlink" title="Hystrix 支付微服务构建"></a>Hystrix 支付微服务构建</h2><ol><li><p>新建 cloud-provider-hygtrix-payment8001</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-provider-hygtrix-payment8001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--   hystrix--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--   Eureka--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-provider-hystrix-payment</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br>      <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringCloudApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentHystrixMain8001</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(PaymentHystrixMain8001.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentService</span> {<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_OK</span> <span class="hljs-params">(Integer id)</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池:"</span> + Thread.currentThread().getName() + <span class="hljs-string">",paymentInfo_OK,id:"</span> + id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"O(∩_∩)O哈哈~"</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOut</span> <span class="hljs-params">(Integer id)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">timeNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">try</span> {<br>            TimeUnit.SECONDS.sleep(timeNumber);<br>        } <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>            e.printStackTrace();<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池:"</span> + Thread.currentThread().getName() + <span class="hljs-string">",paymentInfo_TimeOut,id:"</span> + id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"/(ㄒoㄒ)/~~"</span> + <span class="hljs-string">"耗时(秒):"</span>+timeNumber;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> PaymentService paymentService;<br><br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>   <span class="hljs-keyword">private</span> String serverPort;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/hystrix/ok/{id}"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_OK</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id)<br>   {<br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentService.paymentInfo_OK(id);<br>      log.info(<span class="hljs-string">"*****result: "</span>+result);<br>      <span class="hljs-keyword">return</span> result;<br>   }<br><br>   <span class="hljs-meta">@GetMapping("/payment/hystrix/timeout/{id}")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOut</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Integer id)</span><br>   {<br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentService.paymentInfo_TimeOut(id);<br>      log.info(<span class="hljs-string">"*****result: "</span>+result);<br>      <span class="hljs-keyword">return</span> result;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>先启动 2 个 eureka 集群 7001/7002</p><p>再启动 Hystrix 微服务 cloud-provider-hygtrix-payment8001</p><p>访问 success 的方法 - <a href="http://localhost:8001/payment/hystrix/ok/1">http://localhost:8001/payment/hystrix/ok/1</a><br>每次调用耗费 5 秒钟 - <a href="http://localhost:8001/payment/hystrix/timeout/1">http://localhost:8001/payment/hystrix/timeout/1</a></p><p>以上述为根基平台，开始测试从正确 -&gt; 错误 -&gt; 降级熔断 -&gt; 恢复的过程。</p></li></ol><h2 id="JMeter-高并发压力测试"><a href="#JMeter-高并发压力测试" class="headerlink" title="JMeter 高并发压力测试"></a>JMeter 高并发压力测试</h2><p>上述在非高并发情形下，还能勉强满足</p><p>所以进行 <strong>Jmeter 压测测试</strong></p><p><a href="https://jmeter.apache.org/index.html">JMeter 官网</a></p><blockquote><p>The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions.</p></blockquote><p>开启 Jmeter，来 20000 个并发压死 8001，20000 个请求都去访问 <strong>paymentInfo_TimeOut</strong> 服务</p><ol><li><p>测试计划中右键添加 -》线程 -》线程组（线程组 202201，线程数：40000，循环数：100，其他参数默认）也就是 400w 线程</p></li><li><p>刚刚新建线程组 202201，右键它 -》添加 -》取样器 -》Http 请求默认值 -》输入基本的协议、ip、端口、URL： <a href="http://localhost:8001/payment/hystrix/ok/1">http://localhost:8001/payment/hystrix/ok/1</a></p></li><li><p> 点击绿色三角形图标启动。</p></li></ol><p>看演示结果：拖慢，原因：tomcat 的默认的工作线程数被打满了，没有多余的线程来分解压力和处理。</p><p><strong>Jmeter 压力测试结论</strong></p><p>上面还是服务提供者 8001 自己测试，假如此时外部的消费者 80 也来访问，那消费者只能干等，最终导致消费端 80 不满意，服务端 8001 直接被拖慢。</p><h2 id="Hystrix-消费微服务构建"><a href="#Hystrix-消费微服务构建" class="headerlink" title="Hystrix 消费微服务构建"></a>Hystrix 消费微服务构建</h2><ol><li><p>新建 cloud-consumer-feign-hystrix-order80</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumer-feign-hystrix-order80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--   hystrix--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--   Eureka--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--openFeign--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka/,http://localhost:7002/eureka/</span><br><br><span class="hljs-comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)(单位：毫秒)</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">7000</span><br>  <span class="hljs-comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">7000</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringCloudApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderHystrixMain80</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(OrderHystrixMain80.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>业务接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = "CLOUD-PROVIDER-HYSTRIX-PAYMENT")</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentHystrixService</span> {<br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/hystrix/ok/{id}"</span>)<br>   String <span class="hljs-title function_">paymentInfo_OK</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id);<br><br>   <span class="hljs-meta">@GetMapping("/payment/hystrix/timeout/{id}")</span><br>   String <span class="hljs-title function_">paymentInfo_TimeOut</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Integer id)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentHystrixService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderHystrixController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> PaymentHystrixService paymentHystrixService;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/hystrix/ok/{id}"</span>)<br>   String <span class="hljs-title function_">paymentInfo_OK</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id){<br>      <span class="hljs-keyword">return</span> paymentHystrixService.paymentInfo_OK(id);<br>   };<br><br>   <span class="hljs-meta">@GetMapping("/consumer/payment/hystrix/timeout/{id}")</span><br>   String <span class="hljs-title function_">paymentInfo_TimeOut</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Integer id)</span>{<br>      <span class="hljs-keyword">return</span> paymentHystrixService.paymentInfo_TimeOut(id);<br>   };<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>正常测试</p><p>访问:</p><p><a href="http://localhost:8001/payment/hystrix/ok/1">http://localhost:8001/payment/hystrix/ok/1</a></p><p><a href="http://localhost:8001/payment/hystrix/timeout/1">http://localhost:8001/payment/hystrix/timeout/1</a></p><p>进行测试</p></li><li><p>高并发测试</p><p>使用 jmeter 压 8001 端 1000w 线程，感觉消费者 80 端明显变卡</p><p>原因：8001 同一层次的其它接口服务被困死，因为 tomcat 线程池里面的工作线程已经被挤占完毕。</p><p>正因为有上述故障或不佳表现才有我们的降级 / 容错 / 限流等技术诞生。</p></li></ol><h2 id="降级容错解决的维度要求"><a href="#降级容错解决的维度要求" class="headerlink" title="降级容错解决的维度要求"></a>降级容错解决的维度要求</h2><p>超时导致服务器变慢 (转圈) - 超时不再等待</p><p>出错 (宕机或程序运行出错) - 出错要有兜底</p><p>解决：</p><ul><li>对方服务 (8001) 超时了，调用者 (80) 不能一直卡死等待，必须有服务降级。</li><li>对方服务 (8001) down 机了，调用者 (80) 不能一直卡死等待，必须有服务降级。</li><li>对方服务 (8001) OK，调用者 (80) 自己出故障或有自我要求 (自己的等待时间小于服务提供者)，自己处理降级。</li></ul><h2 id="Hystrix-之服务降级支付侧-fallback"><a href="#Hystrix-之服务降级支付侧-fallback" class="headerlink" title="Hystrix 之服务降级支付侧 fallback"></a>Hystrix 之服务降级支付侧 fallback</h2><p>降级配置  <code>@HystrixCommand</code></p><p><strong>8001 先从自身找问题</strong></p><p>设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处埋，作服务降级 fallback。</p><p><strong>业务类启用 <code>@HystrixCommand</code> 报异常后如何处理</strong></p><p>一旦调用服务方法失败并抛出了错误信息后，会自动调用 @HystrixCommand 标注好的 fallbackMethod 调用类中的指定的兜底方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentService</span> {<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_OK</span> <span class="hljs-params">(Integer id)</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池:"</span> + Thread.currentThread().getName() + <span class="hljs-string">",paymentInfo_OK,id:"</span> + id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"O(∩_∩)O哈哈~"</span>;<br>    }<br><br>    <span class="hljs-meta">@HystrixCommand</span> (fallbackMethod = <span class="hljs-string">"paymentInfo_TimeOutHandler"</span>, commandProperties = {<br>            <span class="hljs-meta">@HystrixProperty</span> (name = <span class="hljs-string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="hljs-string">"3000"</span>)<br>    })<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOut</span> <span class="hljs-params">(Integer id)</span> {<br>        <span class="hljs-type">int</span> <span class="hljs-variable">timeNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">try</span> {<br>            TimeUnit.SECONDS.sleep(timeNumber);<br>        } <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>            e.printStackTrace();<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池:"</span> + Thread.currentThread().getName() + <span class="hljs-string">",paymentInfo_TimeOut,id:"</span> + id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"/(ㄒoㄒ)/~~"</span> + <span class="hljs-string">"耗时(秒):"</span> + timeNumber;<br>    }<br><br>    <span class="hljs-comment">//兜底方法fallbackMethod</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOutHandler</span> <span class="hljs-params">(Integer id)</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池:"</span> + Thread.currentThread().getName() + <span class="hljs-string">",8001系统繁忙,请稍后再试,id:"</span> + id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"o(╥﹏╥)o"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>上面的异常为两种：</p><ol><li>int age = 10/0，计算异常</li><li>我们能接受 3 秒钟，它运行 5 秒钟，超时异常。</li></ol><p>当前服务不可用了，做服务降级，兜底的方案都是 paymentInfo_TimeOutHandler</p><p><strong>主启动类激活</strong></p><p>添加新注解 <code>@EnableCircuitBreaker</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringCloudApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableCircuitBreaker</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentHystrixMain8001</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>        SpringApplication.run(PaymentHystrixMain8001.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Hystrix-之服务降级订单侧-fallback"><a href="#Hystrix-之服务降级订单侧-fallback" class="headerlink" title="Hystrix 之服务降级订单侧 fallback"></a>Hystrix 之服务降级订单侧 fallback</h2><p>80 订单微服务，也可以更好的保护自己，自己也依样画葫芦进行客户端降级保护</p><p><strong>在使用了 Openfeign 的 80 客户端中需要在 yaml 中开启 Hystrix</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka/,http://localhost:7002/eureka/</span><br><br><span class="hljs-comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)(单位：毫秒)</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">7000</span><br>  <span class="hljs-comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">7000</span><br><br><span class="hljs-comment">#开启</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure><p><strong>主启动类需要开启 Hystrix</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringCloudApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@EnableHystrix</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderHystrixMain80</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>        SpringApplication.run(OrderHystrixMain80.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>修改 8001 的降级规则</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@HystrixCommand</span> (fallbackMethod = <span class="hljs-string">"paymentInfo_TimeOutHandler"</span>, commandProperties = {<br>        <span class="hljs-meta">@HystrixProperty</span> (name = <span class="hljs-string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="hljs-string">"5000"</span>)<br>})<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOut</span><span class="hljs-params">(Integer id)</span>{<br>        <span class="hljs-type">int</span> timeNumber=<span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">try</span>{<br>        TimeUnit.SECONDS.sleep(timeNumber);<br>        }<span class="hljs-keyword">catch</span>(InterruptedException e){<br>        e.printStackTrace();<br>        }<br>        <span class="hljs-keyword">return</span><span class="hljs-string">"线程池:"</span>+Thread.currentThread().getName()+<span class="hljs-string">",paymentInfo_TimeOut,id:"</span>+id+<span class="hljs-string">"\t"</span>+<span class="hljs-string">"/(ㄒoㄒ)/~~"</span>+<span class="hljs-string">"耗时(秒):"</span>+timeNumber;<br>        }<br></code></pre></td></tr></tbody></table></figure><p><strong>启动测试</strong></p><p>访问：</p><p><a href="http://localhost/consumer/payment/hystrix/timeout/1">http://localhost/consumer/payment/hystrix/timeout/1</a></p><p>和</p><p><a href="http://localhost:8001/payment/hystrix/timeout/1">http://localhost:8001/payment/hystrix/timeout/1</a></p><p>可以发现由于降级规则 80 端访问返回 fallback，</p><p>8001 端返回正常</p><h2 id="Hystrix之全局服务降级-DefaultProperties"><a href="#Hystrix之全局服务降级-DefaultProperties" class="headerlink" title="Hystrix之全局服务降级 DefaultProperties"></a>Hystrix 之全局服务降级 DefaultProperties</h2><p><strong>目前问题</strong></p><p>每个业务方法对应一个兜底的方法，代码膨胀。</p><p><strong>解决方法</strong></p><ul><li><p>1:1 每个方法配置一个服务降级方法，技术上可以，但是不聪明</p></li><li><p>1:N 除了个别重要核心业务有专属，其它普通的可以通过 <code>@DefaultProperties(defaultFallback = "") </code>统一跳转到统一处理结果页面</p></li><li><p>通用的和独享的各自分开，避免了代码膨胀，合理减少了代码量</p></li></ul><p><strong>实现方式</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentHystrixService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@DefaultProperties</span> (defaultFallback = <span class="hljs-string">"payment_Global_FallbackMethod"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderHystrixController</span> {<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentHystrixService paymentHystrixService;<br><br>    <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/hystrix/ok/{id}"</span>)<br>    String <span class="hljs-title function_">paymentInfo_OK</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id) {<br>        <span class="hljs-keyword">return</span> paymentHystrixService.paymentInfo_OK(id);<br>    }<br><br>    ;<br><br>    <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/hystrix/timeout/{id}"</span>)<br>    <span class="hljs-comment">//@HystrixCommand (fallbackMethod = "paymentTimeOutFallbackMethod",commandProperties = {</span><br>    <span class="hljs-comment">//    @HystrixProperty (name="execution.isolation.thread.timeoutInMilliseconds",value="1500")</span><br>    <span class="hljs-comment">//})</span><br>    <span class="hljs-meta">@HystrixCommand</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOut</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id) {<br>        <span class="hljs-comment">//int age = 10/0;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentHystrixService.paymentInfo_TimeOut(id);<br>        <span class="hljs-keyword">return</span> result;<br>    }<br><br>    <span class="hljs-comment">//指定fallback方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentTimeOutFallbackMethod</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(╥﹏╥)o"</span>;<br>    }<br><br>    <span class="hljs-comment">// 下面是全局fallback方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">payment_Global_FallbackMethod</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Global异常处理信息，请稍后再试，/(ㄒoㄒ)/~~"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Hystrix-之通配服务降级-FeignFallback"><a href="#Hystrix-之通配服务降级-FeignFallback" class="headerlink" title="Hystrix 之通配服务降级 FeignFallback"></a>Hystrix 之通配服务降级 FeignFallback</h2><p><strong>目前问题</strong></p><p>统一和自定义的分开，代码混乱</p><p><strong>服务降级，客户端去调用服务端，碰上服务端宕机或关闭</strong></p><p>本次案例服务降级处理是在客户端 80 实现完成的，与服务端 8001 没有关系，只需要为 Feign 客户端定义的接口添加一个服务降级处理的实现类即可实现解耦</p><p>未来我们要面对的异常</p><ul><li><p>运行</p></li><li><p>超时</p></li><li><p>宕机</p></li></ul><p><strong>修改 cloud-consumer-feign-hystrix-order80</strong></p><p>根据 cloud-consumer-feign-hystrix-order80 已经有的 PaymentHystrixService 接口， 重新新建一个类 (<strong>PaymentFallbackService</strong>)<br>实现该接口，统一为接口里面的方法进行异常处理</p><ol><li><p>PaymentFallbackService 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentFallbackService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentHystrixService</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_OK</span><span class="hljs-params">(Integer id)</span><br>   {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"-----PaymentFallbackService fall back-paymentInfo_OK ,o(╥﹏╥)o"</span>;<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOut</span><span class="hljs-params">(Integer id)</span><br>   {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"-----PaymentFallbackService fall back-paymentInfo_TimeOut ,o(╥﹏╥)o"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>yaml</p><p><strong>新版的 hystris 一定要加 Feign.circuitbreaker.enabled: true</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#开启</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>配置到接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = "CLOUD-PROVIDER-HYSTRIX-PAYMENT",fallback = PaymentFallbackService.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentHystrixService</span> {<br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/payment/hystrix/ok/{id}"</span>)<br>   String <span class="hljs-title function_">paymentInfo_OK</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id);<br><br>   <span class="hljs-meta">@GetMapping("/payment/hystrix/timeout/{id}")</span><br>   String <span class="hljs-title function_">paymentInfo_TimeOut</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Integer id)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller 取消之前的 fallback 方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentHystrixService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderHystrixController</span> {<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentHystrixService paymentHystrixService;<br><br>    <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/consumer/payment/hystrix/ok/{id}"</span>)<br>    String <span class="hljs-title function_">paymentInfo_OK</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id){<br>        <span class="hljs-keyword">return</span> paymentHystrixService.paymentInfo_OK(id);<br>    }<br><br>    <span class="hljs-meta">@GetMapping("/consumer/payment/hystrix/timeout/{id}")</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo_TimeOut</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Integer id)</span> {<br>        <span class="hljs-comment">//int age = 10/0;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentHystrixService.paymentInfo_TimeOut(id);<br>        <span class="hljs-keyword">return</span> result;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>启动 7001，7002，80，8001</p><p>访问：</p><p><a href="http://localhost/consumer/payment/hystrix/ok/1">http://localhost/consumer/payment/hystrix/ok/1</a> 显示正常</p><p><a href="http://localhost/consumer/payment/hystrix/timeout/1">http://localhost/consumer/payment/hystrix/timeout/1</a> 进入上述 fallback 方法</p><p>关闭 8001 模拟宕机</p><p>访问两个 url 都进入 fallback 方法</p></li></ol><h2 id="Hystrix-之服务熔断理论"><a href="#Hystrix-之服务熔断理论" class="headerlink" title="Hystrix 之服务熔断理论"></a>Hystrix 之服务熔断理论</h2><p>断路器，相当于保险丝。</p><p><strong>熔断机制概述</strong></p><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。<strong>当检测到该节点微服务调用响应正常后，恢复调用链路。</strong></p><p>在 Spring Cloud 框架里，熔断机制通过 Hystrix 实现。Hystrix 会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是 5 秒内 20 次调用失败，就会启动熔断机制。熔断机制的注解是<br>@HystrixCommand。</p><h2 id="降级与熔断"><a href="#降级与熔断" class="headerlink" title="降级与熔断"></a>降级与熔断</h2><ol><li><strong>调用失败会触发降级，而降级会调用 fallback 方法</strong></li><li><strong>但无论如何降级的流程一定会先调用正常方法再调用 fallback 方法</strong></li><li><strong>假如单位时间内调用失败次数过多，也就是降级次数过多，则触发熔断</strong></li><li><strong>熔断以后就会跳过正常方法直接调用 fallback 方法</strong></li><li><strong>所谓 “熔断后服务不可用” 就是因为跳过了正常方法直接执行 fallback</strong></li></ol><h2 id="Hystrix-之服务熔断案例"><a href="#Hystrix-之服务熔断案例" class="headerlink" title="Hystrix 之服务熔断案例"></a>Hystrix 之服务熔断案例</h2><p>首先在之前的自定义 maven 依赖中引入了 hutool 工具包</p><p><a href="https://hutool.cn/">Hutool 官网</a></p><ol><li><p>修改 cloud-provider-hystrix-payment8001 的业务类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.IdUtil;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentService</span> {<br>   ...<br><br>   <span class="hljs-comment">//服务熔断</span><br>   <span class="hljs-meta">@HystrixCommand(fallbackMethod = "paymentCircuitBreaker_fallback",commandProperties = {</span><br><span class="hljs-meta">         @HystrixProperty(name = "circuitBreaker.enabled",value = "true"),// 是否开启断路器</span><br><span class="hljs-meta">         @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value = "10"),// 请求次数</span><br><span class="hljs-meta">         @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds",value = "10000"), // 时间窗口期</span><br><span class="hljs-meta">         @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage",value = "50"),// 失败率达到多少后跳闸</span><br><span class="hljs-meta">   })</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentCircuitBreaker</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id) {<br>      <span class="hljs-keyword">if</span>(id &lt; <span class="hljs-number">0</span>) {<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">"******id 不能负数"</span>);<br>      }<br>      <span class="hljs-type">String</span> <span class="hljs-variable">serialNumber</span> <span class="hljs-operator">=</span> IdUtil.simpleUUID();<br><br>      <span class="hljs-keyword">return</span> Thread.currentThread().getName()+<span class="hljs-string">"\t"</span>+<span class="hljs-string">"调用成功，流水号: "</span> + serialNumber;<br>   }<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentCircuitBreaker_fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Integer id)</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: "</span> +id;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 cloud-provider-hystrix-payment8001 的 controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.PaymentService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> PaymentService paymentService;<br><br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>   <span class="hljs-keyword">private</span> String serverPort;<br><br>   ...<br><br>   <span class="hljs-comment">//服务熔断</span><br>   <span class="hljs-meta">@GetMapping("/payment/circuit/{id}")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentCircuitBreaker</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Integer id)</span><br>   {<br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> paymentService.paymentCircuitBreaker(id);<br>      log.info(<span class="hljs-string">"****result: "</span>+result);<br>      <span class="hljs-keyword">return</span> result;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>自测 cloud-provider-hystrix-payment8001</p><p>访问：</p><p>正确 <a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a></p><p>和</p><p>错误 <a href="http://localhost:8001/payment/circuit/-1">http://localhost:8001/payment/circuit/-1</a></p><p>在多次错误之后，再来访问一次正确地址，但是会得到错误的显示</p><p>在多次错误之后，然后慢慢访问正确的地址，发现刚开始不满足条件，就算是正确的访问地址也不能进行正确的显示，在窗口期过后，访问正确地址就会返回正确的显示</p></li></ol><h2 id="Hystrix-之服务熔断总结"><a href="#Hystrix-之服务熔断总结" class="headerlink" title="Hystrix 之服务熔断总结"></a>Hystrix 之服务熔断总结</h2><p><strong>熔断类型</strong></p><ul><li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为 MTTR (平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态。</li><li>熔断关闭：熔断关闭不会对服务进行熔断。</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">@HystrixCommand(fallbackMethod = <span class="hljs-string">"paymentCircuitBreaker_fallback"</span>,commandProperties = {<br>      @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.enabled"</span>,value = <span class="hljs-string">"true"</span>),// 是否开启断路器<br>      @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.requestVolumeThreshold"</span>,value = <span class="hljs-string">"10"</span>),// 请求次数<br>      @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value = <span class="hljs-string">"10000"</span>), // 时间窗口期<br>      @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.errorThresholdPercentage"</span>,value = <span class="hljs-string">"50"</span>),// 失败率达到多少后跳闸<br>})<br></code></pre></td></tr></tbody></table></figure><p>涉及到断路器的三个重要参数：</p><ol><li><strong>快照时间窗</strong>：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的 10 秒。</li><li><strong>请求总数阈值</strong>：在快照时间窗内，必须满足请求总数阈值才有资格熔断。默认为 20，意味着在 10 秒内，如果该 hystrix 命令的调用次数不足 20 次 7, 即使所有的请求都超时或其他原因失败，断路器都不会打开。</li><li><strong>错误百分比阈值</strong>：当请求总数在快照时间窗内超过了阈值，比如发生了 30 次调用，如果在这 30 次调用中，有 15 次发生了超时异常，也就是超过 50% 的错误百分比，在默认设定 50% 阈值情况下，这时候就会将断路器打开。</li></ol><p><strong>断路器开启或者关闭的条件</strong></p><ul><li>到达以下阈值，断路器将会开启：<ul><li>当满足一定的阈值的时候（默认 10 秒内超过 20 个请求次数)</li><li> 当失败率达到一定的时候（默认 10 秒内超过 50% 的请求失败)</li></ul></li><li> 当开启的时候，所有请求都不会进行转发</li><li>一段时间之后（默认是 5 秒)，这个时候断路器是半开状态，会让 - - 其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。</li></ul><p><strong>断路器打开之后</strong></p><ol><li><p>再有请求调用的时候，将不会调用主逻辑，而是直接调用降级 fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</p></li><li><p>原来的主逻辑要如何恢复呢？</p><p>对于这一问题，hystrix 也为我们实现了自动恢复功能。</p><p>当断路器打开，对主逻辑进行熔断之后，hystrix<br>会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p></li></ol><p><strong>断路器全部配置</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash">@HystrixCommand(fallbackMethod = <span class="hljs-string">"fallbackMethod"</span>, <br>                groupKey = <span class="hljs-string">"strGroupCommand"</span>, <br>                commandKey = <span class="hljs-string">"strCommand"</span>, <br>                threadPoolKey = <span class="hljs-string">"strThreadPool"</span>,<br><br>                commandProperties = {<br>                    // 设置隔离策略，THREAD 表示线程池 SEMAPHORE：信号池隔离<br>                    @HystrixProperty(name = <span class="hljs-string">"execution.isolation.strategy"</span>, value = <span class="hljs-string">"THREAD"</span>),<br>                    // 当隔离策略选择信号池隔离的时候，用来设置信号池的大小（最大并发数）<br>                    @HystrixProperty(name = <span class="hljs-string">"execution.isolation.semaphore.maxConcurrentRequests"</span>, value = <span class="hljs-string">"10"</span>),<br>                    // 配置命令执行的超时时间<br>                    @HystrixProperty(name = <span class="hljs-string">"execution.isolation.thread.timeoutinMilliseconds"</span>, value = <span class="hljs-string">"10"</span>),<br>                    // 是否启用超时时间<br>                    @HystrixProperty(name = <span class="hljs-string">"execution.timeout.enabled"</span>, value = <span class="hljs-string">"true"</span>),<br>                    // 执行超时的时候是否中断<br>                    @HystrixProperty(name = <span class="hljs-string">"execution.isolation.thread.interruptOnTimeout"</span>, value = <span class="hljs-string">"true"</span>),<br><br>                    // 执行被取消的时候是否中断<br>                    @HystrixProperty(name = <span class="hljs-string">"execution.isolation.thread.interruptOnCancel"</span>, value = <span class="hljs-string">"true"</span>),<br>                    // 允许回调方法执行的最大并发数<br>                    @HystrixProperty(name = <span class="hljs-string">"fallback.isolation.semaphore.maxConcurrentRequests"</span>, value = <span class="hljs-string">"10"</span>),<br>                    // 服务降级是否启用，是否执行回调函数<br>                    @HystrixProperty(name = <span class="hljs-string">"fallback.enabled"</span>, value = <span class="hljs-string">"true"</span>),<br>                    // 是否启用断路器<br>                    @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.enabled"</span>, value = <span class="hljs-string">"true"</span>),<br>                    // 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为 20 的时候，如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。<br>                    @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.requestVolumeThreshold"</span>, value = <span class="hljs-string">"20"</span>),<br><br>                    // 该属性用来设置在滚动时间窗中，表示在滚动时间窗中，在请求数量超过 circuitBreaker.requestVolumeThreshold 的情况下，如果错误请求数的百分比超过50, 就把断路器设置为 <span class="hljs-string">"打开"</span> 状态，否则就设置为 <span class="hljs-string">"关闭"</span> 状态。<br>                    @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.errorThresholdPercentage"</span>, value = <span class="hljs-string">"50"</span>),<br>                    // 该属性用来设置当断路器打开之后的休眠时间窗。 休眠时间窗结束之后，会将断路器置为 <span class="hljs-string">"半开"</span> 状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为 <span class="hljs-string">"打开"</span> 状态，如果成功就设置为 <span class="hljs-string">"关闭"</span> 状态。<br>                    @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.sleepWindowinMilliseconds"</span>, value = <span class="hljs-string">"5000"</span>),<br>                    // 断路器强制打开<br>                    @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.forceOpen"</span>, value = <span class="hljs-string">"false"</span>),<br>                    // 断路器强制关闭<br>                    @HystrixProperty(name = <span class="hljs-string">"circuitBreaker.forceClosed"</span>, value = <span class="hljs-string">"false"</span>),<br>                    // 滚动时间窗设置，该时间用于断路器判断健康度时需要收集信息的持续时间<br>                    @HystrixProperty(name = <span class="hljs-string">"metrics.rollingStats.timeinMilliseconds"</span>, value = <span class="hljs-string">"10000"</span>),<br><br>                    // 该属性用来设置滚动时间窗统计指标信息时划分<span class="hljs-string">"桶"</span>的数量，断路器在收集指标信息的时候会根据设置的时间窗长度拆分成多个 <span class="hljs-string">"桶"</span> 来累计各度量值，每个<span class="hljs-string">"桶"</span>记录了一段时间内的采集指标。<br>                    // 比如 10 秒内拆分成 10 个<span class="hljs-string">"桶"</span>收集这样，所以 timeinMilliseconds 必须能被 numBuckets 整除。否则会抛异常<br>                    @HystrixProperty(name = <span class="hljs-string">"metrics.rollingStats.numBuckets"</span>, value = <span class="hljs-string">"10"</span>),<br>                    // 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为 <span class="hljs-literal">false</span>, 那么所有的概要统计都将返回 -1。<br>                    @HystrixProperty(name = <span class="hljs-string">"metrics.rollingPercentile.enabled"</span>, value = <span class="hljs-string">"false"</span>),<br>                    // 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。<br>                    @HystrixProperty(name = <span class="hljs-string">"metrics.rollingPercentile.timeInMilliseconds"</span>, value = <span class="hljs-string">"60000"</span>),<br>                    // 该属性用来设置百分位统计滚动窗口中使用 “ 桶 ”的数量。<br>                    @HystrixProperty(name = <span class="hljs-string">"metrics.rollingPercentile.numBuckets"</span>, value = <span class="hljs-string">"60000"</span>),<br>                    // 该属性用来设置在执行过程中每个 “桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，<br>                    // 就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个 “桶 ”中发生了500次执行，<br>                    // 那么该 “桶” 中只保留 最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。<br>                    @HystrixProperty(name = <span class="hljs-string">"metrics.rollingPercentile.bucketSize"</span>, value = <span class="hljs-string">"100"</span>),<br><br>                    // 该属性用来设置采集影响断路器状态的健康快照（请求的成功、 错误百分比）的间隔等待时间。<br>                    @HystrixProperty(name = <span class="hljs-string">"metrics.healthSnapshot.intervalinMilliseconds"</span>, value = <span class="hljs-string">"500"</span>),<br>                    // 是否开启请求缓存<br>                    @HystrixProperty(name = <span class="hljs-string">"requestCache.enabled"</span>, value = <span class="hljs-string">"true"</span>),<br>                    // HystrixCommand的执行和事件是否打印日志到 HystrixRequestLog 中<br>                    @HystrixProperty(name = <span class="hljs-string">"requestLog.enabled"</span>, value = <span class="hljs-string">"true"</span>),<br><br>                },<br>                threadPoolProperties = {<br>                    // 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量<br>                    @HystrixProperty(name = <span class="hljs-string">"coreSize"</span>, value = <span class="hljs-string">"10"</span>),<br>                    // 该参数用来设置线程池的最大队列大小。当设置为 -1 时，线程池将使用 SynchronousQueue 实现的队列，否则将使用 LinkedBlockingQueue 实现的队列。<br>                    @HystrixProperty(name = <span class="hljs-string">"maxQueueSize"</span>, value = <span class="hljs-string">"-1"</span>),<br>                    // 该参数用来为队列设置拒绝阈值。 通过该参数， 即使队列没有达到最大值也能拒绝请求。<br>                    // 该参数主要是对 LinkedBlockingQueue 队列的补充,因为 LinkedBlockingQueue 队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。<br>                    @HystrixProperty(name = <span class="hljs-string">"queueSizeRejectionThreshold"</span>, value = <span class="hljs-string">"5"</span>),<br>                }<br>               )<br>public String <span class="hljs-function"><span class="hljs-title">doSomething</span></span>() {<br>    ...<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Hystrix-图形化-Dashboard-搭建"><a href="#Hystrix-图形化-Dashboard-搭建" class="headerlink" title="Hystrix 图形化 Dashboard 搭建"></a>Hystrix 图形化 Dashboard 搭建</h2><p>除了隔离依赖服务的调用以外，Hystrix 还提供了准实时的调用监控 (Hystrix Dashboard)，Hystrix 会持续地记录所有通过 Hystrix<br>发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。</p><p>Netflix 通过 hystrix-metrics-event-stream 项目实现了对以上指标的监控。Spring Cloud 也提供了 Hystrix Dashboard 的整合，对监控内容转化成可视化界面。</p><ol><li><p>新建 cloud-consumer-hystrix-dashboard9001</p></li><li><p>修改 pom</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumer-hystrix-dashboard9001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写主启动类，加注解 <code>@EnableHystrixDashboard</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringCloudApplication</span><br><span class="hljs-meta">@EnableHystrixDashboard</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HystrixDashboardMain9001</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      SpringApplication.run(HystrixDashboardMain9001.class, args);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>所有的微服务需要监控依赖来显示 dashboard</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>监控页面测试</p><p>访问: <a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p></li><li><p> 修改 8001 主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringCloudApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableCircuitBreaker</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentHystrixMain8001</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      SpringApplication.run(PaymentHystrixMain8001.class, args);<br>   }<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span><br><span class="hljs-comment">    * ServletRegistrationBean因为springboot的默认路径不是"/hystrix.stream"，</span><br><span class="hljs-comment">    * 只要在自己的项目里配置上下面的servlet就可以了</span><br><span class="hljs-comment">    * 否则，Unable to connect to Command Metric Stream 404</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">getServlet</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">HystrixMetricsStreamServlet</span> <span class="hljs-variable">streamServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HystrixMetricsStreamServlet</span>();<br>      <span class="hljs-type">ServletRegistrationBean</span> <span class="hljs-variable">registrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(streamServlet);<br>      registrationBean.setLoadOnStartup(<span class="hljs-number">1</span>);<br>      registrationBean.addUrlMappings(<span class="hljs-string">"/hystrix.stream"</span>);<br>      registrationBean.setName(<span class="hljs-string">"HystrixMetricsStreamServlet"</span>);<br>      <span class="hljs-keyword">return</span> registrationBean;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>监控测试</p><p>启动 7001，7002，8001，9001</p><p>9001 监控 8001 - 填写监控地址  <a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a> 到 <a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a> 页面的输入框。</p><p>测试地址</p><p><a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a></p><p><a href="http://localhost:8001/payment/circuit/-1">http://localhost:8001/payment/circuit/-1</a></p><p>测试正确和错误的请求</p><p>先访问正确地址，再访问错误地址，再正确地址，会发现图示断路器都是慢慢放开的。</p><p><strong>断路器关闭</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Hystrix%E7%9B%91%E6%8E%A7%E6%96%AD%E8%B7%AF%E5%99%A8%E5%85%B3%E9%97%AD.png" alt="断路器关闭"></p><p><strong>断路器打开</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Hystrix%E7%9B%91%E6%8E%A7%E6%96%AD%E8%B7%AF%E5%99%A8%E6%96%AD%E5%BC%80.png" alt="断路器断开"></p></li></ol><h1 id="GateWay"><a href="#GateWay" class="headerlink" title="GateWay"></a>GateWay</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p><a href="https://spring.io/projects/spring-cloud-gateway">Gateway 官网</a></p><p><strong>概述</strong></p><p>Cloud 全家桶中有个很重要的组件就是网关，在 1.x 版本中都是采用的 Zuul 网关；</p><p>但在 2.x 版本中，zuul 的升级一直跳票，SpringCloud 最后自己研发了一个网关替代 Zuul，那就是 SpringCloud</p><p>Gateway 一句话就是：<strong>gateway 是原 zuul1.x 版的替代</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Gateway.png"></p><p>Gateway 是在 Spring 生态系统之上构建的 API 网关服务，基于 Spring 5，Spring Boot 2 和 Project Reactor 等技术。</p><p>Gateway 旨在提供一种简单而有效的方式来对 API 进行路由，以及提供一些强大的过滤器功能，例如：熔断、限流、重试等。</p><p>SpringCloud Gateway 是 Spring Cloud 的一个全新项目，基于 Spring 5.0+Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供 —<br>种简单有效的统一的 API 路由管理方式。</p><p>SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在 Spring Cloud 2.0 以上版本中，没有对新版本的 Zul 2.0 以上最新高性能版本进行集成，仍然还是使用的<br>Zuul 1.x 非 Reactor 模式的老版本。而为了提升网关的性能，<strong>SpringCloud Gateway 是基于 WebFlux 框架实现的，而 WebFlux 框架底层则使用了高性能的 Reactor 模式通信框架 Netty</strong>。</p><p>Spring Cloud Gateway 的目标提供统一的路由方式且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控 / 指标，和限流。</p><p><strong>作用</strong></p><ul><li>方向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li><li>…</li></ul><h2 id="GateWay-非阻塞异步模型"><a href="#GateWay-非阻塞异步模型" class="headerlink" title="GateWay 非阻塞异步模型"></a>GateWay 非阻塞异步模型</h2><p><strong>有 Zuul 了怎么又出来 Gateway？我们为什么选择 Gateway?</strong></p><ol><li>netflix 不太靠谱，zuul2.0 一直跳票，迟迟不发布。</li><li>一方面因为 Zuul1.0 已经进入了维护阶段，而且 Gateway 是 SpringCloud 团队研发的，是亲儿子产品，值得信赖。而且很多功能 Zuul 都没有用起来也非常的简单便捷。</li><li>Gateway 是基于异步非阻塞模型上进行开发的，性能方面不需要担心。虽然 Netflix 早就发布了最新的 Zuul 2.x，但 Spring Cloud 貌似没有整合计划。而且 Netflix 相关组件都宣布进入维护期；不知前景如何？</li><li>多方面综合考虑 Gateway 是很理想的网关选择。</li></ol><p><strong>SpringCloud Gateway 具有如下特性</strong></p><ul><li><p>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0 进行构建；</p></li><li><p>动态路由：能够匹配任何请求属性；</p></li><li><p>可以对路由指定 Predicate (断言) 和 Filter (过滤器)；</p></li><li><p>集成 Hystrix 的断路器功能；</p></li><li><p>集成 Spring Cloud 服务发现功能；</p></li><li><p>易于编写的 Predicate (断言) 和 Filter (过滤器)；</p></li><li><p>请求限流功能；</p></li><li><p>支持路径重写。</p></li></ul><p><strong>SpringCloud Gateway 与 Zuul 的区别</strong></p><ol><li>在 SpringCloud Finchley 正式版之前，Spring Cloud 推荐的网关是 Netflix 提供的 Zuul。</li><li>Zuul 1.x，是一个基于阻塞 I/O 的 API Gateway。</li><li>Zuul 1.x 基于 Servlet 2.5 使用阻塞架构它不支持任何长连接 (如 WebSocket) Zuul 的设计模式和 Nginx 较像，每次<br>I/О操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是 Nginx 用 C++ 实现，Zuul 用 Java 实现，而 JVM 本身会有第 - 次加载较慢的情况，使得 Zuul 的性能相对较差。</li><li>Zuul 2.x 理念更先进，想基于 Netty 非阻塞和支持长连接，但 SpringCloud 目前还没有整合。Zuul .x 的性能较 Zuul 1.x 有较大提升。在性能方面，根据官方提供的基准测试，Spring Cloud Gateway 的 RPS (每秒请求数) 是 Zuul 的 1.6 倍。</li><li>Spring Cloud Gateway 建立在 Spring Framework 5、Project Reactor 和 Spring Boot2 之上，使用非阻塞 API。</li><li>Spring Cloud Gateway 还支持 WebSocket，并且与 Spring 紧密集成拥有更好的开发体验</li></ol><p><strong>Zuul1.x 模型</strong></p><p>Springcloud 中所集成的 Zuul 版本，采用的是 Tomcat 容器，使用的是传统的 Serviet IO 处理模型。</p><p><strong>Servlet 的生命周期？</strong></p><ul><li>servlet 由 servlet container 进行生命周期管理。</li><li>container 启动时构造 servlet 对象并调用 servlet init () 进行初始化；</li><li>container 运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用 service)；</li><li>container 关闭时调用 servlet destory () 销毁 servlet。</li></ul><p><strong>上述模式的缺点：</strong></p><p>Servlet 是一个简单的网络 IO 模型，当请求进入 Servlet container 时，Servlet container 就会为其兜底方法一个线程，在并发不高的场景下这种模型是适用的。但是一旦高并发 (如抽风用 Jmeter 压)，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单业务场景下，不希望为每个 request 分配一个线程，只需要 1 个或几个线程就能应对极大并发的请求，这种业务场景下 servlet 模型没有优势。</p><p>所以 Zuul 1.X 是基于 servlet 之上的一个阻塞式处理模型，即 Spring 实现了处理所有 request 请求的一个 servlet (DispatcherServlet) 并由该 servlet 阻塞式处理处理。所以 SpringCloud Zuul 无法摆脱 servlet 模型的弊端。</p><p><strong>Gateway 模型</strong></p><p>WebFlux 是什么？</p><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux">WebFlux 官方文档</a></p><p>传统的 Web 框架，比如说: Struts2，SpringMVC 等都是基于 Servlet APl 与 Servlet 容器基础之上运行的。</p><p>但是在 Servlet3.1 之后有了异步非阻塞的支持。而 WebFlux 是一个典型非阻塞异步的框架，它的核心是基于 Reactor 的相关 API 实现的。相对于传统的 web 框架来说，它可以运行在诸如 Netty，Undertow<br>及支持 Servlet3.1 的容器上。非阻塞式 + 函数式编程 (Spring 5 必须让你使用 Java 8)。</p><p>Spring WebFlux 是 Spring 5.0 引入的新的响应式框架，区别于 Spring MVC，它不需要依赖 Servlet APl，它是完全异步非阻塞的，并且基于 Reactor 来实现响应式流规范。</p><h2 id="Gateway三大核心和工作流程"><a href="#Gateway三大核心和工作流程" class="headerlink" title="Gateway三大核心和工作流程"></a>Gateway 三大核心和工作流程</h2><p><strong>三大核心概念</strong></p><ol><li>Route (路由) - 路由是构建网关的基本模块，它由 ID, 目标 URI, 一系列的断言和过滤器组成，如断言为 true 则匹配该路由；</li><li>Predicate (断言) - 参考的是 Java8 的 java.util.function.Predicate，开发人员可以匹配 HTTP 请求中的所有内容 (例如请求头或请求参数), 如果请求与断言相匹配则进行路由；</li><li>Filter (过滤) - 指的是 Spring 框架中 GatewayFilter 的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</li></ol><p><strong>Gateway 工作流程</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Gateway%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="工作流程"></p><p>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 GatewayWeb Handler。</p><p>Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前 (“pre”) 或之后 (“post”）执行业务逻辑。</p><p>Filter 在 “pre” 类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在 “post” 类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><p><strong>核心逻辑</strong>：路由转发 + 执行过滤器链。</p><h2 id="Gateway9527-路由网关搭建"><a href="#Gateway9527-路由网关搭建" class="headerlink" title="Gateway9527 路由网关搭建"></a>Gateway9527 路由网关搭建</h2><ol><li><p>新建工程 cloud-gateway-gateway9527</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-gateway-gateway9527<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--gateway--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--eureka-client--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9527</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-gateway</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">cloud-gateway-service</span><br>  <span class="hljs-attr">client:</span> <span class="hljs-comment">#服务提供者provider注册进eureka服务列表内</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GateWayMain9527</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(GateWayMain9527.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>9527 网关做路由映射</p><p>不想暴露 8001 端口，希望在 8001 外面套一层 9527</p><p><strong>修改 yaml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9527</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-gateway</span><br>  <span class="hljs-comment">#############################新增网关配置###########################</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8001</span>          <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>        <span class="hljs-comment">#uri: lb://cloud-payment-service #匹配后提供服务的路由地址</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/get/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8001</span>          <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>        <span class="hljs-comment">#uri: lb://cloud-payment-service #匹配后提供服务的路由地址</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/discovery/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br>  <span class="hljs-comment">####################################################################</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">cloud-gateway-service</span><br>  <span class="hljs-attr">client:</span> <span class="hljs-comment">#服务提供者provider注册进eureka服务列表内</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><ul><li>启动 7001，7002</li><li> 启动 8001 cloud-provider-payment8001</li><li> 启动 9527 网关</li></ul><p><strong>访问说明</strong></p><p>添加网关前  <a href="http://localhost:8001/payment/get/1">http://localhost:8001/payment/get/1</a><br>添加网关后  <a href="http://localhost:9527/payment/get/1">http://localhost:9527/payment/get/1</a><br>两者访问成功，返回相同结果</p></li></ol><h2 id="Gateway动态路由"><a href="#Gateway动态路由" class="headerlink" title="Gateway动态路由"></a>Gateway 动态路由</h2><p>默认情况下 Gateway 会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建<strong>动态路由进行转发，从而实现动态路由的功能</strong>（不写死一个地址）。</p><ol><li><p>修改 yaml</p><p>需要注意的是 uri 的协议为 lb，表示启用 Gateway 的负载均衡功能。</p><p>lb://serviceName 是 spring cloud gateway 在微服务中自动为我们创建的负载均衡 uri。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9527</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-gateway</span><br>  <span class="hljs-comment">#############################新增网关配置###########################</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>        <span class="hljs-comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/get/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>        <span class="hljs-comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/discovery/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span><br>  <span class="hljs-comment">####################################################################</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">cloud-gateway-service</span><br>  <span class="hljs-attr">client:</span> <span class="hljs-comment">#服务提供者provider注册进eureka服务列表内</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p><strong>启动</strong></p><ul><li><p>eureka7001</p></li><li><p>payment8001/8002</p></li><li><p>访问：<a href="http://localhost:9527/payment/get/124">http://localhost:9527/payment/get/124</a></p><p>不停刷新页面，可以看到 8001/8002 两个端口切换。</p></li></ul></li></ol><h2 id="GateWay-常用的-Predicate"><a href="#GateWay-常用的-Predicate" class="headerlink" title="GateWay 常用的 Predicate"></a>GateWay 常用的 Predicate</h2><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories">官方文档</a></p><p><strong>Route Predicate Factories 是什么</strong></p><p>Spring Cloud Gateway 将路由匹配作为 Spring WebFlux HandlerMapping 基础架构的一部分。</p><p>Spring Cloud Gateway 包括许多内置的 Route Predicate 工厂。所有这些 Predicate 都与 HTTP 请求的不同属性匹配。多个 RoutePredicate 工厂可以进行组合。</p><p>Spring Cloud Gateway 创建 Route 对象时，使用 RoutePredicateFactory 创建 Predicate 对象，Predicate 对象可以赋值给 Route。Spring Cloud Gateway<br>包含许多内置的 Route Predicate Factories。 所有这些谓词都匹配 HTTP 请求的不同属性。多种谓词工厂可以组合，并通过逻辑 and。</p><p><strong>常用的 Route Predicate Factory</strong></p><p><a href="https://blog.csdn.net/fu_huo_1993/article/details/109405439#348a610d-fb8c-b767-99ed-5e23294eb977">参考文章</a></p><ul><li><p><strong> The After Route Predicate Factory</strong></p><p>在某个时间之后给予访问</p></li><li><p><strong>The Before Route Predicate Factory</strong></p><p>在某个时间之前给予访问</p></li><li><p><strong>The Between Route Predicate Factory</strong></p><p>在某个时间段之间给予访问</p></li><li><p><strong>The Cookie Route Predicate Factory</strong></p><p>当前请求中的 cookie 值匹配配置的 cookie 参数值时生效</p></li><li><p><strong>The Header Route Predicate Factory</strong></p><p>当前请求中的 header 值匹配配置的 header 参数值时生效</p></li><li><p><strong>The Host Route Predicate Factory</strong></p><p>匹配请求头中的 <code>Host</code> 的值</p></li><li><p><strong>The Method Route Predicate Factory</strong></p><p>匹配请求头中的 <code>Method</code> 的值</p></li><li><p><strong>The Path Route Predicate Factory</strong></p><p>匹配请求路径。</p></li><li><p><strong>The Query Route Predicate Factory</strong></p><p>匹配请求参数。</p></li><li><p><strong>The RemoteAddr Route Predicate Factory</strong></p><p>匹配请求的 ip 地址，支持 ipv4 和 ipv6。</p></li><li><p><strong>The weight Route Predicate Factory</strong></p><p>根据<code>权重</code>来分发请求，权重是根据 <code>group</code> 来计算的。</p></li></ul><p><strong>示例几个断言</strong></p><p><strong>The After Route Predicate Factory</strong></p><p>在某个时间之后给予访问</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">after_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-comment"># 这个时间后才能起效</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">After=2022-01-14T15:51:37.485+08:00[Asia/Shanghai]</span><br></code></pre></td></tr></tbody></table></figure><p><strong>The Between Route Predicate Factory</strong></p><p>在某个时间段之间给予访问</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">between_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>          <span class="hljs-comment"># 两个时间点之间</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Between=2022-01-14T05:51:37.485+08:00[Asia/Shanghai],</span> <span class="hljs-number">2022-01-14T15:51:37.485+08:00</span>[<span class="hljs-string">Asia/Shanghai</span>]<br></code></pre></td></tr></tbody></table></figure><p><strong>The Cookie Route Predicate Factory</strong></p><p>测试</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 该命令相当于发get请求，且没带cookie</span><br>curl http://localhost:9527/payment/lb<br><br><span class="hljs-comment"># 带cookie的</span><br>curl http://localhost:9527/payment/lb --cookie <span class="hljs-string">"chocolate=chip"</span><br></code></pre></td></tr></tbody></table></figure><p>对应的配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">cookie_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-comment">#需要带有的键值对</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Cookie=chocolate,</span> <span class="hljs-string">chip</span><br></code></pre></td></tr></tbody></table></figure><p><strong>The Header Route Predicate Factory</strong></p><p>测试</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 带指定请求头的参数的CURL命令</span><br>curl http://localhost:9527/payment/lb -H <span class="hljs-string">"X-Request-Id:123"</span><br></code></pre></td></tr></tbody></table></figure><p>对应的配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">header_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://example.org</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-comment">#请求头的属性以及值的正则表达式</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Header=X-Request-Id,</span> <span class="hljs-string">\d+</span><br></code></pre></td></tr></tbody></table></figure><h2 id="GateWay-的-Filter"><a href="#GateWay-的-Filter" class="headerlink" title="GateWay 的 Filter"></a>GateWay 的 Filter</h2><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories">官方文档</a></p><p>路由过滤器可用于修改进入的 HTTP 请求和返回的 HTTP 响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway 内置了多种路由过滤器，他们都由 GatewayFilter 的工厂类来产生。</p><p>Spring Cloud Gateway 的 Filter:</p><ul><li>生命周期：<ul><li>pre</li><li>post</li></ul></li><li> 种类（具体看官方文档）：<ul><li>GatewayFilter - 有 31 种</li><li> GlobalFilter - 有 10 种</li></ul></li></ul><p>常用的 GatewayFilter：AddRequestParameter GatewayFilter</p><p>自定义全局 GlobalFilter： 两个主要接口介绍：</p><ol><li>GlobalFilter</li><li>Ordered</li></ol><p>能干什么：</p><ol><li>全局日志记录</li><li>统一网关鉴权</li><li>…</li></ol><p><strong>示例</strong></p><p>例如下面的</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-gateway</span><br>  <span class="hljs-comment">#############################新增网关配置###########################</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span><br>          <span class="hljs-attr">filter:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestParameter=X-Request-Id,1024</span> <span class="hljs-comment">#过滤器工厂会在匹配的请求上加上一对请求头，名称为X-Request-Id值为1024</span><br>  <span class="hljs-comment">####################################################################</span><br></code></pre></td></tr></tbody></table></figure><p><strong>自定义过滤器</strong></p><p>GateWay9527 项目添加 MyLogGateWayFilter 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.config;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLogGateWayFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered {<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span> <span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> {<br>        log.info(<span class="hljs-string">"***********come in MyLogGateWayFilter:  "</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uname</span> <span class="hljs-operator">=</span> exchange.getRequest().getQueryParams().getFirst(<span class="hljs-string">"uname"</span>);<br><br>        <span class="hljs-keyword">if</span> (uname == <span class="hljs-literal">null</span>) {<br>            log.info(<span class="hljs-string">"*******用户名为null，非法用户，o(╥﹏╥)o"</span>);<br>            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);<br>            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>        }<br><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><p>启动：</p><ul><li>EurekaMain7001</li><li>PaymentMain8001</li><li>GateWayMain9527</li><li>PaymentMain8002</li></ul><p>浏览器输入：</p><ul><li><a href="http://localhost:9527/payment/get/124">http://localhost:9527/payment/get/124</a> - 访问异常 </li><li><a href="http://localhost:9527/payment/get/124?uname=abc">http://localhost:9527/payment/get/124?uname=abc</a> - 正常访问</li></ul><h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><h2 id="Config-分布式配置中心介绍"><a href="#Config-分布式配置中心介绍" class="headerlink" title="Config 分布式配置中心介绍"></a>Config 分布式配置中心介绍</h2><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/">官网</a></p><p><strong>分布式系统面临的配置问题</strong></p><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p><p>SpringCloud 提供了 ConfigServer 来解决这个问题，我们每一个微服务自己带着一个 application.yml，上百个配置文件的管理.……</p><p><strong>是什么</strong></p><p>SpringCloud Config 为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</p><p><strong>怎么用</strong></p><p>SpringCloud Config 分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p><ul><li>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密 / 解密信息等访问接口。</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用 git 来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过 git<br>客户端工具来方便的管理和访问配置内容。</li></ul><p><strong>能干嘛</strong></p><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如 dev/test/prod/beta/release</li><li> 运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以 REST 接口的形式暴露 - post/crul 访问刷新即可…</li></ul><p><strong>与 GitHub 整合配置</strong></p><p>由于 SpringCloud Config 默认使用 Git 来存储配置文件 (也有其它方式，比如支持 SVN 和本地文件)，但最推荐的还是 Git，而且使用的是 http/https 访问的形式。</p><h2 id="Config-配置总控中心搭建"><a href="#Config-配置总控中心搭建" class="headerlink" title="Config 配置总控中心搭建"></a>Config 配置总控中心搭建</h2><ol><li><p>用你自己的账号在 GitHub 上新建一个名为 springcloud-config 的新 Repository。</p></li><li><p>由上一步获得刚新建的 git 地址 <code>git@github.com:AWeiIsCoding/springcloud-config.git</code>。</p></li><li><p>本地硬盘目录上新建 git 仓库并 clone。</p><ul><li>工作目录为 D:\SpringCloud2021</li><li> 执行 <code>git clone git@github.com:AWeiIsCoding/springcloud-config.git</code></li><li>此时在工作目录会创建名为 springcloud-config 的文件夹。</li></ul></li><li><p>在 springcloud-config 的文件夹种创建三个配置文件，随后 <code>git add .</code>，<code>git commit -m "提交信息" </code>，<code>git push -u origin master</code> 等一系列上传操作上传到<br>springcloud-config 的新 Repository。</p><p><strong>config-dev.yml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">config:</span><br>  <span class="hljs-attr">info:</span> <span class="hljs-string">"master branch,springcloud-config/config-dev.yml version=7"</span><br></code></pre></td></tr></tbody></table></figure><p><strong>config-prod.yml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">config:</span><br>  <span class="hljs-attr">info:</span> <span class="hljs-string">"master branch,springcloud-config/config-prod.yml version=1"</span><br></code></pre></td></tr></tbody></table></figure><p><strong>config-test.yml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">config:</span><br>  <span class="hljs-attr">info:</span> <span class="hljs-string">"master branch,springcloud-config/config-test.yml version=1"</span> <br></code></pre></td></tr></tbody></table></figure></li><li><p>新建 Module 模块 cloud-config-center-3344，它即为 Cloud 的配置中心模块 CloudConfig Center</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-config-center-3344<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3344</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-config-center</span> <span class="hljs-comment">#注册进Eureka服务器的微服务名</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://github.com/AWeiIsCoding/springcloud-config.git</span> <span class="hljs-comment">#GitHub上面的git仓库名字</span><br>          <span class="hljs-comment">####搜索目录</span><br>          <span class="hljs-attr">search-paths:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">springcloud-config</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">AWeiIsCoding</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">zlw20010803github</span><br>          <span class="hljs-attr">force-pull:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#实时拉取</span><br>      <span class="hljs-comment">####读取分支</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableConfigServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigCenterMain3344</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(ConfigCenterMain3344.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 hosts</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 config3344.com<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试通过 Config 微服务是否可以从 GitHub 上获取配置内容</p><ul><li><p>启动 ConfigCenterMain3344</p></li><li><p>浏览器防问 - <a href="http://config3344.com:3344/master/config-dev.yml">http://config3344.com:3344/master/config-dev.yml</a></p><p>显示结果：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">config:<br>  info: master branch,springcloud-config/config-dev.yml version=7<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><h2 id="Config-客户端配置与测试"><a href="#Config-客户端配置与测试" class="headerlink" title="Config 客户端配置与测试"></a>Config 客户端配置与测试</h2><ol><li><p>新建 cloud-config-client-3355</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-config-client-3355<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 bootstrap.yaml</p><p><strong>bootstrap.yml</strong></p><p>applicaiton.yml 是用户级的资源配置项</p><p>bootstrap.yml 是系统级的，优先级更加高</p><p>Spring Cloud 会创建一个 Bootstrap Context，作为 Spring 应用的 Application Context 的父上下文。</p><p>初始化的时候，BootstrapContext 负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的 Environment。</p><p>Bootstrap 属性有高优先级，默认情况下，它们不会被本地配置覆盖。Bootstrap context 和 Application Context 有着不同的约定，所以新增了一个 bootstrap.yml 文件，保证<br>Bootstrap Context 和 Application Context 配置的分离。</p><p>要将 Client 模块下的 application.yml 文件改为 bootstrap.yml, 这是很关键的，因为 bootstrap.yml 是比 application.yml 先加载的。bootstrap.yml<br>优先级高于 application.yml。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3355</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment">#Config客户端配置</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#分支名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment">#配置文件名称</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:3344</span> <span class="hljs-comment">#配置中心地址k</span><br></code></pre></td></tr></tbody></table></figure><h1 id="服务注册到eureka地址"><a href="#服务注册到eureka地址" class="headerlink" title="服务注册到eureka地址"></a>服务注册到 eureka 地址</h1><p>eureka:<br>client:<br>service-url:<br>defaultZone: <a href="http://eureka7001.com:7001,http://eureka7002.com:7002">http://eureka7001.com:7001,http://eureka7002.com:7002</a></p></li></ol><figure class="highlight aspectj"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-number">4.</span> 主启动类<br><br>​```java<br><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigClientMain3355</span> </span>{<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<br>         SpringApplication.run(ConfigClientMain3355.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="5"><li><p>业务类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span><br>{<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${config.info}"</span>)<br>   <span class="hljs-keyword">private</span> String configInfo;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/configInfo"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigInfo</span><span class="hljs-params">()</span><br>   {<br>      <span class="hljs-keyword">return</span> configInfo;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><ul><li>启动 Config 配置中心 3344 微服务并自测 <ul><li><a href="http://config3344.com:3344/master/config-prod.yml">http://config3344.com:3344/master/config-prod.yml</a></li><li><a href="http://config3344.com:3344/master/config-dev.yml">http://config3344.com:3344/master/config-dev.yml</a></li></ul></li><li> 启动 3355 作为 Client 准备访问 <ul><li><a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></li></ul></li></ul></li></ol><h2 id="Config-动态刷新之手动版"><a href="#Config-动态刷新之手动版" class="headerlink" title="Config 动态刷新之手动版"></a>Config 动态刷新之手动版</h2><p>避免每次更新配置都要重启客户端微服务 3355</p><p><strong>动态刷新步骤</strong>：</p><ol><li><p>修改 3355 模块</p><p>POM 引入 actuator 监控</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 yaml，添加</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 暴露监控端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">"*"</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>对 controller 修改</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br>...<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RefreshScope</span><span class="hljs-comment">//&lt;-----</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span><br>{<br>...<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>发送 Post 请求刷新 3355</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X POST "http://localhost:3355/actuator/refresh"<br></code></pre></td></tr></tbody></table></figure><p>再次测试</p><p><a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p>成功实现了客户端 3355 刷新到最新配置内容，避免了服务重启</p></li><li><p>还存在的问题</p><ul><li>假如有多个微服务客户端 3355/3366/3377</li><li> 每个微服务都要执行 — 次 post 请求，手动刷新？</li><li>可否广播，一次通知，处处生效？</li><li>想大范围的自动刷新</li></ul></li></ol><h1 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p><strong>是什么</strong></p><p>Spring Cloud Bus 配合 Spring Cloud Config 使用可以实现配置的动态刷新。</p><p>Spring Cloud Bus 是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了 Java 的事件处理机制和消息中间件的功能。Spring Clud Bus 目前支持 RabbitMQ 和 Kafka。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Bus%E5%8E%9F%E7%90%86.png"></p><p><strong>能干什么</strong></p><p>Spring Cloud Bus 能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p><p><strong>为何被称为总线</strong></p><ul><li><p><strong>什么是总线</strong></p><p>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p></li><li><p><strong>基本原理</strong></p><p>ConfigClient 实例都监听 MQ 中同一个 topic (默认是 Spring Cloud Bus)。当一个服务刷新数据的时候，它会把这个信息放入到 Topic 中，这样其它监听同一 Topic<br>的服务就能得到通知，然后去更新自身的配置。</p></li></ul><h2 id="Bus-之-RabbitMQ-环境配置"><a href="#Bus-之-RabbitMQ-环境配置" class="headerlink" title="Bus 之 RabbitMQ 环境配置"></a>Bus 之 RabbitMQ 环境配置</h2><ol><li><p>安装 Erlang，下载地址：<a href="http://erlang.org/download/otp_win64_21.3.exe">http://erlang.org/download/otp_win64_21.3.exe</a></p></li><li><p> 安装 RabbitMQ，下载地址：<a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.3/rabbitmq-server-3.8.3.exe">https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.3/rabbitmq-server-3.8.3.exe</a></p></li><li><p> 打开 cmd 进入 RabbitMQ 安装目录下的 sbin 目录，如：D:\devSoft\RabbitMQ Scrverk\rabbitmq_server-3.7.14\sbin</p></li><li><p>输入以下命令启动管理功能</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rabbitmq-plugins enable rabbitmq_management<br></code></pre></td></tr></tbody></table></figure><p>这样就可以添加可视化插件。</p><ul><li>访问地址查看是否安装成功：<a href="http://localhost:15672/">http://localhost:15672/</a></li><li> 输入账号密码并登录：guest guest</li></ul></li></ol><h2 id="Bus-动态刷新全局广播的设计思想和选型"><a href="#Bus-动态刷新全局广播的设计思想和选型" class="headerlink" title="Bus 动态刷新全局广播的设计思想和选型"></a>Bus 动态刷新全局广播的设计思想和选型</h2><p>必须先具备良好的 RabbitMQ 环境</p><p>演示广播效果，增加复杂度，再以 3355 为模板再制作一个 3366</p><ol><li><p>新建 cloud-config-client-3366</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-config-client-3366<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 bootstrap.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3366</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment">#Config客户端配置</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#分支名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment">#配置文件名称</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:3344</span> <span class="hljs-comment">#配置中心地址</span><br><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001,http://eureka7002.com:7002</span><br><br><span class="hljs-comment"># 暴露监控端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">"*"</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientMain3366</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(ConfigClientMain3366.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span><br>{<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>   <span class="hljs-keyword">private</span> String serverPort;<br><br>   <span class="hljs-meta">@Value("${config.info}")</span><br>   <span class="hljs-keyword">private</span> String configInfo;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/configInfo"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">configInfo</span><span class="hljs-params">()</span><br>   {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"serverPort: "</span>+serverPort+<span class="hljs-string">"\t\n\n configInfo: "</span>+configInfo;<br>   }<br><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>设计思想</p><ol><li><p>利用消息总线触发一个客户端 /bus/refresh, 而刷新所有客户端的配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Bus%E5%B9%BF%E6%92%AD%E6%96%B9%E5%BC%8F%E4%B8%80.png"></p></li><li><p>利用消息总线触发一个服务端 ConfigServer 的 /bus/refresh 端点，而刷新所有客户端的配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Bus%E5%B9%BF%E6%92%AD%E6%96%B9%E5%BC%8F%E4%BA%8C.png"></p></li></ol><p>图二的架构显然更加适合，图一不适合的原因如下：</p></li></ol><ul><li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责。</li><li>破坏了微服务各节点的对等性。</li><li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改。</li></ul><h2 id="Bus-动态刷新全局广播配置实现"><a href="#Bus-动态刷新全局广播配置实现" class="headerlink" title="Bus 动态刷新全局广播配置实现"></a>Bus 动态刷新全局广播配置实现</h2><ol><li><p>给 cloud-config-center-3344 配置中心服务端添加消息总线支持</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加消息总线RabbitNQ支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 3344 的 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3344</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-config-center</span> <span class="hljs-comment">#注册进Eureka服务器的微服务名</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://github.com/AWeiIsCoding/springcloud-config.git</span> <span class="hljs-comment">#GitHub上面的git仓库名字</span><br>          <span class="hljs-comment">####搜索目录</span><br>          <span class="hljs-attr">search-paths:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">springcloud-config</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">xxx</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">xxx</span><br>          <span class="hljs-attr">force-pull:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#实时拉取</span><br>      <span class="hljs-comment">####读取分支</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br>  <span class="hljs-comment">#rabbitmq相关配置&lt;--------------------------</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br><br><span class="hljs-comment">##rabbitmq相关配置,暴露bus刷新配置的端点&lt;--------------------------</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span> <span class="hljs-comment">#暴露bus刷新配置的端点</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">'bus-refresh'</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>给 cloud-config-center-3355 配置中心服务端添加消息总线支持</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加消息总线RabbitNQ支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 3355 的 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3355</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment">#Config客户端配置</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#分支名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment">#配置文件名称</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:3344</span> <span class="hljs-comment">#配置中心地址k</span><br>  <span class="hljs-comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口&lt;----------------------</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br><br><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br>      <br><span class="hljs-comment"># 暴露监控端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">"*"</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>给 cloud-config-center-3366 配置中心服务端添加消息总线支持</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加消息总线RabbitNQ支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 3366 的 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3366</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-comment">#Config客户端配置</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#分支名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment">#配置文件名称</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:3344</span> <span class="hljs-comment">#配置中心地址</span><br><br>  <span class="hljs-comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br><br><span class="hljs-comment">#服务注册到eureka地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br><br><span class="hljs-comment"># 暴露监控端点</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">"*"</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p><strong>启动</strong></p><ul><li>EurekaMain7001</li><li>ConfigcenterMain3344</li><li>ConfigclientMain3355</li><li>ConfigclicntMain3366</li></ul><p><strong>运维工程师</strong></p><ul><li>修改 Github 上配置文件内容，增加版本号</li><li>发送 POST 请求<ul><li><code>curl -X POST "http://localhost:3344/actuator/bus-refresh"</code></li><li>— 次发送，处处生效</li></ul></li></ul><p><strong>配置中心</strong></p><ul><li><a href="http://config3344.com:3344/config-dev.yml">http://config3344.com:3344/config-dev.yml</a></li></ul><p><strong>客户端</strong></p><ul><li><a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></li><li><a href="http://localhost:3366/configInfo">http://localhost:3366/configInfo</a></li><li> 获取配置信息，发现都已经刷新了</li></ul></li></ol><p><strong>— 次修改，广播通知，处处生效</strong></p><h2 id="Bus-动态刷新定点通知"><a href="#Bus-动态刷新定点通知" class="headerlink" title="Bus 动态刷新定点通知"></a>Bus 动态刷新定点通知</h2><p>不想全部通知，只想定点通知</p><ul><li>只通知 3355</li><li> 不通知 3366</li></ul><p>简单一句话就是<strong>指定具体某一个实例生效而不是全部</strong></p><p>公式：<code>http://localhost:3344/actuator/bus-refresh/{destination}</code></p><p>/bus-refresh 请求不再发送到具体的服务实例上，而是发给 config server 通过 destination 参数类指定需要更新配置的服务或实例</p><p><strong>案例</strong></p><p>这里以刷新运行在 3355 端口上的 config-client（配置文件中设定的应用名称）为例，只通知 3355，不通知 3366<br><code>curl -X POST "http://localhost:3344/actuator/bus-refresh/config-client:3355</code></p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><h2 id="Stream-为什么被引入"><a href="#Stream-为什么被引入" class="headerlink" title="Stream 为什么被引入"></a>Stream 为什么被引入</h2><p>常见 MQ (消息中间件)：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>有没有一种新的技术诞生，让我们不再关注具体 MQ 的细节，我们只需要用一种适配兜底方法的方式，自动的给我们在各种 MQ 内切换。（类似于 Hibernate）</p><p>Cloud Stream 是什么？屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型。</p><h2 id="Stream-是什么及-Binder-介绍"><a href="#Stream-是什么及-Binder-介绍" class="headerlink" title="Stream 是什么及 Binder 介绍"></a>Stream 是什么及 Binder 介绍</h2><p><a href="https://spring.io/projects/spring-cloud-stream#overview">Stream 官方文档 </a></p><p><a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">Cloud Stream 中文指导手册</a></p><p><strong>什么是 Spring Cloud Stream？</strong></p><p>官方定义 Spring Cloud Stream 是一个构建消息驱动微服务的框架。</p><p>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Stream 中 binder 对象交互。</p><p>通过我们配置来 binding (兜底方法)，而 Spring Cloud Stream 的 binder 对象负责与消息中间件交互。所以，我们只需要搞清楚如何与 Spring Cloud Stream 交互就可以方便使用消息驱动的方式。</p><p>通过使用 Spring Integration 来连接消息代理中间件以实现消息事件驱动。 Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布 - 订阅、消费组、分区的三个核心概念。</p><p>目前仅支持 RabbitMQ、 Kafka。</p><h2 id="Stream-的设计思想"><a href="#Stream-的设计思想" class="headerlink" title="Stream 的设计思想"></a>Stream 的设计思想</h2><p><strong>标准 MQ</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Stream%E6%A0%87%E5%87%86MQ.png"></p><ul><li>生产者 / 消费者之间靠消息媒介传递信息内容</li><li>消息必须走特定的通道 - 消息通道 Message Channel</li><li> 消息通道里的消息如何被消费呢，谁负责收发处理 - 消息通道 MessageChannel 的子接口 SubscribableChannel，由 MessageHandler 消息处理器所订阅。</li></ul><p><strong>为什么用 Cloud Stream？</strong></p><p>比方说我们用到了 RabbitMQ 和 Kafka，由于这两个消息中间件的架构上的不同，像 RabbitMQ 有 exchange，kafka 有 Topic 和 Partitions 分区。</p><p>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候<br>Spring Cloud Stream 给我们提供了 — 种解耦合的方式。</p><p><strong>Stream 凭什么可以统一底层差异？</strong></p><p>在没有兜底方法器这个概念的情况下，我们的 SpringBoot<br>应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性通过定义兜底方法器作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离。通过向应用程序暴露统一的 Channel<br>通道，使得应用程序不需要再考虑各种不同的消息中间件实现。</p><p><strong>通过定义兜底方法器 Binder 作为中间层，实现了应用程序与消息中间件细节之间的隔离</strong>。</p><p><strong>Binder</strong>：</p><ul><li>INPUT 对应于消费者</li><li> OUTPUT 对应于生产者</li></ul><p><strong>Stream 中的消息通信方式遵循了发布 - 订阅模式</strong></p><p>Topic 主题进行广播</p><ul><li>在 RabbitMQ 就是 Exchange</li><li> 在 Kakfa 中就是 Topic</li></ul><h2 id="Stream-编码常用注解简介"><a href="#Stream-编码常用注解简介" class="headerlink" title="Stream 编码常用注解简介"></a>Stream 编码常用注解简介</h2><p>编码 API 和常用注解</p><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td> Middleware</td><td> 中间件，目前只支持 RabbitMQ 和 Kafka</td></tr><tr><td>Binder</td><td>Binder 是应用与消息中间件之间的封装，目前实行了 Kafka 和 RabbitMQ 的 Binder，通过 Binder 可以很方便的连接中间件，可以动态的改变消息类型 (对应于 Kafka 的 topic,RabbitMQ 的 exchange)，这些都可以通过配置文件来实现</td></tr><tr><td> @Input</td><td> 注解标识输入通道，通过该输乎通道接收到的消息进入应用程序</td></tr><tr><td> @Output</td><td> 注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td> @StreamListener</td><td> 监听队列，用于消费者的队列的消息接收</td></tr><tr><td> @EnableBinding</td><td> 指信道 channel 和 exchange 兜底方法在一起</td></tr></tbody></table><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>准备 RabbitMQ 环境</p><p><strong>工程中新建三个子模块</strong></p><ul><li>cloud-stream-rabbitmq-provider8801，作为生产者进行发消息模块</li><li> cloud-stream-rabbitmq-consumer8802，作为消息接收模块</li><li> cloud-stream-rabbitmq-consumer8803，作为消息接收模块</li></ul><h2 id="Stream-消息驱动之生产者"><a href="#Stream-消息驱动之生产者" class="headerlink" title="Stream 消息驱动之生产者"></a>Stream 消息驱动之生产者</h2><ol><li><p>新建 Module：cloud-stream-rabbitmq-provider8801</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-provider8801<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--基础配置--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8801</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-stream-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">stream:</span><br>      <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在此处配置要兜底方法的rabbitmq的服务信息；</span><br>        <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于于binding整合</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span> <span class="hljs-comment"># 消息组件类型</span><br>          <span class="hljs-attr">environment:</span> <span class="hljs-comment"># 设置rabbitmq的相关的环境配置</span><br>            <span class="hljs-attr">spring:</span><br>              <span class="hljs-attr">rabbitmq:</span><br>                <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>                <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>                <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>                <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>      <span class="hljs-attr">bindings:</span> <span class="hljs-comment"># 服务的整合处理</span><br>        <span class="hljs-attr">output:</span> <span class="hljs-comment"># 这个名字是一个通道的名称</span><br>          <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span> <span class="hljs-comment"># 表示要使用的Exchange名称定义</span><br>          <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span> <span class="hljs-comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span><br>          <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span> <span class="hljs-comment"># 设置要兜底方法的消息服务的具体设置（这里可能会爆红，但不影响运行）</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span> <span class="hljs-comment"># 客户端进行Eureka注册的配置</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 设置心跳的时间间隔（默认是30秒）</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 如果现在超过了5秒的间隔（默认是90秒）</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">send-8801.com</span>  <span class="hljs-comment"># 在信息列表时显示主机名称</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 访问的路径变为IP地址</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamMQMain8801</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(StreamMQMain8801.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类</p><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMessageProvider</span> {<br>   String <span class="hljs-title function_">send</span> <span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.messaging.Source;<br><span class="hljs-keyword">import</span> org.springframework.integration.support.MessageBuilder; <span class="hljs-comment">//注意包</span><br><span class="hljs-keyword">import</span> org.springframework.messaging.MessageChannel;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableBinding(Source.class)</span> <span class="hljs-comment">//定义消息的推送管道</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IMessageProviderImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMessageProvider</span> {<br>   <span class="hljs-comment">//消息发送管道</span><br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> MessageChannel output;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">String</span> <span class="hljs-variable">serial</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>      output.send(MessageBuilder.withPayload(serial).build());<br>      System.out.println(<span class="hljs-string">"*****serial: "</span>+serial);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.IMessageProvider;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMessageController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> IMessageProvider messageProvider;<br><br>   <span class="hljs-meta">@GetMapping</span> (value = <span class="hljs-string">"/sendMessage"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> messageProvider.send();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><ul><li>启动 7001 7002 eureka</li><li> 启动 RabpitMq<ul><li>rabbitmq-plugins enable rabbitmq_management</li><li><a href="http://localhost:15672/">http://localhost:15672/</a></li></ul></li><li> 启动 8801</li><li> 访问 - <a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a><ul><li> 后台将打印 <code>serial: UUID</code> 字符串</li><li>在 <a href="http://localhost:15672/">http://localhost:15672/</a> 中可以看到波峰</li></ul></li></ul></li></ol><h2 id="Stream-消息驱动之消费者"><a href="#Stream-消息驱动之消费者" class="headerlink" title="Stream 消息驱动之消费者"></a>Stream 消息驱动之消费者</h2><ol><li><p>新建 Module：cloud-stream-rabbitmq-consumer8802</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-consumer8802<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--基础配置--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8802</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-stream-consumer</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">stream:</span><br>      <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在此处配置要兜底方法的rabbitmq的服务信息；</span><br>        <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于于binding整合</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span> <span class="hljs-comment"># 消息组件类型</span><br>          <span class="hljs-attr">environment:</span> <span class="hljs-comment"># 设置rabbitmq的相关的环境配置</span><br>            <span class="hljs-attr">spring:</span><br>              <span class="hljs-attr">rabbitmq:</span><br>                <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>                <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>                <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>                <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>      <span class="hljs-attr">bindings:</span> <span class="hljs-comment"># 服务的整合处理</span><br>        <span class="hljs-attr">input:</span> <span class="hljs-comment"># 这个名字是一个通道的名称</span><br>          <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span> <span class="hljs-comment"># 表示要使用的Exchange名称定义</span><br>          <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span> <span class="hljs-comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span><br>          <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span> <span class="hljs-comment"># 设置要兜底方法的消息服务的具体设置</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span> <span class="hljs-comment"># 客户端进行Eureka注册的配置</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka,http://localhost:7002/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 设置心跳的时间间隔（默认是30秒）</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 如果现在超过了5秒的间隔（默认是90秒）</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">receive-8802.com</span>  <span class="hljs-comment"># 在信息列表时显示主机名称</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 访问的路径变为IP地址</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamMQMain8802</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(StreamMQMain8802.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.messaging.Sink;<br><span class="hljs-keyword">import</span> org.springframework.messaging.Message;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableBinding(Sink.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveMessageListenerController</span> {<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>   <span class="hljs-keyword">private</span> String serverPort;<br>    <br>   <span class="hljs-meta">@StreamListener</span> (Sink.INPUT)<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">(Message&lt;String&gt; message)</span><br>   {<br>      System.out.println(<span class="hljs-string">"消费者1号,-----&gt;接受到的消息: "</span>+message.getPayload()+<span class="hljs-string">"\t  port: "</span>+serverPort);<br>   }<br><br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="6"><li>测试</li></ol><ul><li>启动 EurekaMain7001</li><li> 启动 StreamMQMain8801</li><li> 启动 StreamMQMain8802</li><li>8801 发送 8802 接收消息</li></ul><h2 id="Stream-之消息重复消费"><a href="#Stream-之消息重复消费" class="headerlink" title="Stream 之消息重复消费"></a>Stream 之消息重复消费</h2><ol><li><p>依照 8802，克隆出来一份运行 8803 - cloud-stream-rabbitmq-consumer8803。</p></li><li><p>启动</p></li></ol><ul><li>RabbitMQ</li><li> 服务注册 - 8801</li><li> 消息生产 - 8801</li><li> 消息消费 - 8802</li><li> 消息消费 - 8802</li></ul><ol start="3"><li><p> 存在问题</p></li><li><p>有重复消费问题</p><ul><li><a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></li><li> 目前是 8802/8803 同时都收到了，存在重复消费问题</li></ul></li><li><p>消息持久化问题</p></li><li><p>生产实际案例</p></li></ol><p>比如订单系统我们做集群部署，都会从 RabbitMQ 中获取订单信息，那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况。这时我们就可以<strong>使用 Stream 中的消息分组来解决</strong>。</p><p>注意在 Stream 中处于<strong>同一个 group 中的多个消费者是竞争关系</strong>，就能够保证消息只会被其中一个应用消费一次。** 不同组是可以全面消费的 (重复消费)**。</p><h2 id="Stream-之-group-解决消息重复消费"><a href="#Stream-之-group-解决消息重复消费" class="headerlink" title="Stream 之 group 解决消息重复消费"></a>Stream 之 group 解决消息重复消费</h2><p><strong>原理</strong></p><p>微服务应用放置于同一个 group 中，就能够保证消息只会被其中一个应用消费一次。</p><p><strong>不同的组</strong>是可以重复消费的，<strong>同一个组内</strong>会发生竞争关系，只有其中一个可以消费。</p><p><strong>8802/8803 都变成不同组，group 两个不同</strong></p><p>group: A_Group、B_Group</p><p>8802 修改 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-stream-provider</span><br>    <span class="hljs-attr">cloud:</span><br>      <span class="hljs-attr">stream:</span><br>        <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在此处配置要兜底方法的rabbitmq的服务信息；</span><br>          <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于于binding整合</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span> <span class="hljs-comment"># 消息组件类型</span><br>            <span class="hljs-attr">environment:</span> <span class="hljs-comment"># 设置rabbitmq的相关的环境配置</span><br>              <span class="hljs-attr">spring:</span><br>                <span class="hljs-attr">rabbitmq:</span><br>                  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>                  <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>                  <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>                  <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>        <span class="hljs-attr">bindings:</span> <span class="hljs-comment"># 服务的整合处理</span><br>          <span class="hljs-attr">output:</span> <span class="hljs-comment"># 这个名字是一个通道的名称</span><br>            <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span> <span class="hljs-comment"># 表示要使用的Exchange名称定义</span><br>            <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span> <span class="hljs-comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span><br>            <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span> <span class="hljs-comment"># 设置要兜底方法的消息服务的具体设置</span><br>            <span class="hljs-attr">group:</span> <span class="hljs-string">A_Group</span> <span class="hljs-comment">#&lt;----------------------------------------关键</span><br></code></pre></td></tr></tbody></table></figure><p>8803 修改 YML（与 8802 的类似位置 <code>group: B_Group</code>）</p><p>结论：<strong>还是重复消费</strong></p><p>我们需要 8802/8803 实现轮询分组，每次只有一个消费者，8801 模块的发的消息只能被 8802 或 8803 其中一个接收到，这样避免了重复消费。</p><p><strong>8802/8803 都变成相同组，group 两个相同</strong></p><p>group: A_Group</p><p>8802 修改 YML<code>group: A_Group</code></p><p>8803 修改 YML<code>group: A_Group</code></p><p>结论：同一个组的多个微服务实例，每次只会有一个拿到</p><h2 id="Stream-之消息持久化"><a href="#Stream-之消息持久化" class="headerlink" title="Stream 之消息持久化"></a>Stream 之消息持久化</h2><p>通过上述，解决了重复消费问题，再看看持久化。</p><p>停止 8802/8803 并<strong>去除掉</strong> 8802 的分组 <code>group: A_Group</code>，8803 的分组 <code>group: A_Group</code> 没有去掉。</p><p>8801 先发送 4 条消息到 RabbitMq。</p><p>先启动 8802，<strong>无分组属性配置</strong>，后台没有打出来消息。</p><p>再启动 8803，<strong>有分组属性配置</strong>，后台打出来了 MQ 上的消息。(消息持久化体现)</p><h1 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h1><h2 id="Sleuth-是什么"><a href="#Sleuth-是什么" class="headerlink" title="Sleuth 是什么"></a>Sleuth 是什么</h2><p><strong>为什么会出现这个技术？要解决哪些问题？</strong></p><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每一个前段请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p><p><strong>是什么</strong></p><ul><li><a href="https://github.com/spring-cloud/spring-cloud-sleuth">Sleuth 官网</a></li><li> Spring Cloud Sleuth 提供了一套完整的服务跟踪的解决方案</li><li>在分布式系统中提供追踪解决方案并且兼容支持了 zipkin</li></ul><h2 id="Sleuth-之-zipkin-搭建安装"><a href="#Sleuth-之-zipkin-搭建安装" class="headerlink" title="Sleuth 之 zipkin 搭建安装"></a>Sleuth 之 zipkin 搭建安装</h2><p><strong>下载</strong></p><ul><li>SpringCloud 从 F 版起已不需要自己构建 Zipkin Server 了，只需调用 jar 包即可 </li><li><a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">https://repo1.maven.org/maven2/io/zipkin/zipkin-server/</a></li><li>zipkin-server-2.23.9-exec.jar</li></ul><p><strong>运行 jar</strong></p><p><code>java -jar zipkin-server-2.23.9-exec.jar</code></p><p><strong>运行控制台</strong></p><p><a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a></p><p><strong>术语</strong></p><p>完整的调用链路</p><p>表示一请求链路，一条链路通过 Trace ld 唯一标识，Span 标识发起的请求信息，各 span 通过 parent id 关联起来</p><p>— 条链路通过 Trace ld 唯一标识，Span 标识发起的请求信息，各 span 通过 parent id 关联起来。</p><p>名词解释</p><ul><li>Trace：类似于树结构的 Span 集合，表示一条调用链路，存在唯一标识</li><li> span：表示调用链路来源，通俗的理解 span 就是一次请求信息</li></ul><h2 id="Sleuth-链路监控展现"><a href="#Sleuth-链路监控展现" class="headerlink" title="Sleuth 链路监控展现"></a>Sleuth 链路监控展现</h2><ol><li><p>服务提供者 cloud-provider-payment8001</p><ol><li><p>修改 pom.xml，添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--包含了sleuth+zipkin--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">application:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">cloud-payment-service</span><br><br><span class="hljs-attr">zipkin:</span> <span class="hljs-comment">#&lt;-------------------------------------关键 base-url: http://localhost:9411</span><br><span class="hljs-attr">sleuth:</span> <span class="hljs-comment">#&lt;-------------------------------------关键 sampler:</span><br><span class="hljs-comment">#采样率值介于 0 到 1 之间，1 则表示全部采集 probability: 1</span><br><br><span class="hljs-attr">datasource:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span> <span class="hljs-comment"># 当前数据源操作类型 driver-class-name: org.gjt.mm.mysql.Driver # mysql驱动包 url:</span><br><span class="hljs-string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span> <span class="hljs-attr">username: root password:</span><br><span class="hljs-number">123456</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping("/payment/zipkin")</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentZipkin</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"hi ,I'm paymentZipkin server fall back，welcome to here, O(∩_∩)O哈哈~"</span>;<br>    }<br></code></pre></td></tr></tbody></table></figure></li></ol></li><li><p>服务消费者 (调用方) cloud-consumer-order80</p><ol><li><p>修改 pom.xml，添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--包含了sleuth+zipkin--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-order-service</span><br>  <span class="hljs-attr">zipkin:</span><br>    <span class="hljs-attr">base-url:</span> <span class="hljs-string">http://localhost:9411</span><br>  <span class="hljs-attr">sleuth:</span><br>    <span class="hljs-attr">sampler:</span><br>      <span class="hljs-attr">probability:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类 OrderController</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ====================&gt; zipkin+sleuth</span><br><span class="hljs-meta">@GetMapping("/consumer/payment/zipkin")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentZipkin</span><span class="hljs-params">()</span><br>{<br>   <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(PAYMENT_URL+<span class="hljs-string">"/payment/zipkin/"</span>, String.class);<br>   <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol></li><li><p>依次启动 eureka7001/7002/8001/80</p><p>80 调用 8001 几次测试下</p></li><li><p>打开浏览器访问: <a href="http://localhost:9411/">http://localhost:9411</a></p><p>进行查看</p></li></ol><h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><h2 id="SpringCloud-Alibaba简介"><a href="#SpringCloud-Alibaba简介" class="headerlink" title="SpringCloud Alibaba简介"></a>SpringCloud Alibaba 简介</h2><p><strong>为什么会出现 SpringCloud Alibaba</strong></p><p>Spring Cloud Netflix 项目进入维护模式</p><p><a href="https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now">https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now</a></p><p><strong>什么是维护模式？</strong></p><p>将模块置于维护模式，意味着 Spring Cloud 团队将不会再向模块添加新功能。</p><p>他们将修复 block 级别的 bug 以及安全问题，他们也会考虑并审查社区的小型 pull request。</p><p><strong>SpringCloud alibaba 是什么</strong></p><p><a href="https://spring.io/projects/spring-cloud-alibaba">SpringCloud Alibaba 官网</a></p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">SpringCloud Alibaba 中文 github 官网</a></p><p><a href="https://github.com/alibaba/spring-cloud-alibaba">SpringCloud Alibaba 英文 github 官网</a></p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">SpringCloud Alibaba 英文文档</a></p><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><p>诞生：2018.10.31，Spring Cloud Alibaba 正式入驻了 Spring Cloud 官方孵化器，并在 Maven 中央库发布了第一个版本。</p><p><strong>能干嘛</strong></p><ul><li><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ<br>限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有<br>Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><p><strong>去哪下</strong></p><p>如果需要使用已发布的版本，在 <code>dependencyManagement</code> 中添加如下配置。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>然后在 <code>dependencies</code> 中添加自己所需使用的依赖即可使用。</p><p><strong>怎么用</strong></p><ul><li><a href="https://github.com/alibaba/Sentinel">Sentinel</a>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li><a href="https://github.com/alibaba/Nacos">Nacos</a>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li><a href="https://rocketmq.apache.org/">RocketMQ</a>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</li><li><a href="https://github.com/apache/dubbo">Dubbo</a>：Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li><a href="https://github.com/seata/seata">Seata</a>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li><a href="https://www.aliyun.com/product/oss">Alibaba Cloud OSS</a>: 阿里云对象存储服务（Object Storage Service，简称<br>OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><a href="https://help.aliyun.com/document_detail/43136.html">Alibaba Cloud SchedulerX</a>:<br>阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li><li><a href="https://www.aliyun.com/product/sms">Alibaba Cloud SMS</a>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><h2 id="Nacos-简介和下载"><a href="#Nacos-简介和下载" class="headerlink" title="Nacos 简介和下载"></a>Nacos 简介和下载</h2><p><strong>为什么叫 Nacos</strong></p><p>前四个字母分别为 Naming 和 Configuration 的前两个字母，最后的 s 为 Service。</p><p><strong>是什么</strong></p><ul><li>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li>Nacos: Dynamic Naming and Configuration Service</li><li>Nacos 就是注册中心＋配置中心的组合 -&gt; Nacos = Eureka+Config+Bus</li></ul><p><strong>能干嘛</strong></p><ul><li>替代 Eureka 做服务注册中心</li><li>替代 Config 做服务配置中心</li></ul><p><strong>去哪下</strong></p><ul><li><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></li><li><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring%20cloud%20alibaba%20nacos_discovery">官网文档</a></li></ul><p><strong>各中注册中心比较</strong></p><table><thead><tr><th>服务注册与发现框架</th><th> CAP 模型</th><th>控制台管理</th><th>社区活跃度</th></tr></thead><tbody><tr><td> Eureka</td><td>AP</td><td> 支持</td><td>低 (2.x 版本闭源)</td></tr><tr><td>Zookeeper</td><td>CP</td><td> 不支持</td><td>中</td></tr><tr><td> consul</td><td>CP</td><td> 支持</td><td>高</td></tr><tr><td> Nacos</td><td>AP</td><td> 支持</td><td>高</td></tr></tbody></table><h2 id="Nacos-安装"><a href="#Nacos-安装" class="headerlink" title="Nacos 安装"></a>Nacos 安装</h2><ul><li><p>本地 Java8+Maven 环境</p></li><li><p>从<a href="https://github.com/alibaba/nacos/releases">官网</a>下载 Nacos</p></li><li><p>解压安装包，直接在 bin 目录下运行 <code>.\startup.cmd -m standalone</code>，以单机方式启动</p></li><li><p>命令运行成功后直接访问 <a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p>默认账号密码都是 nacos</p></li><li><p>结果页面</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos.png">     </p></li></ul><h2 id="Nacos-之服务提供者注册"><a href="#Nacos-之服务提供者注册" class="headerlink" title="Nacos 之服务提供者注册"></a>Nacos 之服务提供者注册</h2><ol><li><p>新建 Module : cloudalibaba-provider-payment9001</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloudalibaba-provider-payment9001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud Alibaba nacos --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-payment-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#配置Nacos地址</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">'*'</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain9001</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(PaymentMain9001.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> {<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>   <span class="hljs-keyword">private</span> String serverPort;<br><br>   <span class="hljs-meta">@GetMapping</span> (value = <span class="hljs-string">"/payment/nacos/{id}"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPayment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Integer id) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"nacos registry, serverPort: "</span>+ serverPort+<span class="hljs-string">"\t id"</span>+id;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><ul><li><p>启动 nacos 控制台</p></li><li><p>启动 nacos 9001</p></li><li><p>访问</p><p><a href="http://localhost:9001/payment/nacos/1">http://localhost:9001/payment/nacos/1</a></p></li></ul></li><li><p> 最后根据这个工程新建一个生产者 9002</p></li></ol><h2 id="Nacos-之服务消费者注册和负载"><a href="#Nacos-之服务消费者注册和负载" class="headerlink" title="Nacos 之服务消费者注册和负载"></a>Nacos 之服务消费者注册和负载</h2><ol><li><p>新建 Module ：cloudalibaba-consumer-nacos-order83</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloudalibaba-consumer-nacos-order83<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">83</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-order-consumer</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br><br><span class="hljs-comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span><br><span class="hljs-attr">service-url:</span><br>  <span class="hljs-attr">nacos-user-service:</span> <span class="hljs-string">http://nacos-payment-provider</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderNacosMain83</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(OrderNacosMain83.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置类</p><p>因为 <code>spring-cloud-starter-alibaba-nacos-discovery</code> 内含 <code>netflix-ribbon</code> 包，所以需要 <code>RestTemplate</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.config;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span><br>{<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span><br>   <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span><br>   {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderNacosController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${service-url.nacos-user-service}"</span>)<br>   <span class="hljs-keyword">private</span> String serverURL;<br><br>   <span class="hljs-meta">@GetMapping</span> (value = <span class="hljs-string">"/consumer/payment/nacos/{id}"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">paymentInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id)<br>   {<br>      <span class="hljs-keyword">return</span> restTemplate.getForObject(serverURL+<span class="hljs-string">"/payment/nacos/"</span>+id,String.class);<br>   }<br><br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="Nacos-服务注册中心对比提升"><a href="#Nacos-服务注册中心对比提升" class="headerlink" title="Nacos 服务注册中心对比提升"></a>Nacos 服务注册中心对比提升</h2><p><strong>Nacos 全景图</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E5%85%A8%E6%99%AF%E5%9B%BE.png"></p><p><strong>Nacos 和 CAP</strong></p><p>Nacos 与其他注册中心特性对比</p><table><thead><tr><th></th><th>Nacos</th><th>Eureka</th><th>Consul</th><th>CoreDNS</th><th>Zookeeper</th></tr></thead><tbody><tr><td> 一致性协议</td><td> CP+AP</td><td>AP</td><td>CP</td><td>/</td><td>CP</td></tr><tr><td> 健康检查</td><td> TCP/HTTP/MySQL/Client Beat</td><td>Client Beat</td><td>TCP/HTTP/gRPC/Cmd</td><td>/</td><td>Client Beat</td></tr><tr><td> 负载均衡</td><td>权重 / DSL/metadata/CMDB</td><td>Ribbon</td><td>Fabio</td><td>RR</td><td>/</td></tr><tr><td> 雪崩保护</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>访问协议</td><td> HTTP/DNS/UDP</td><td>HTTP</td><td>HTTP/DNS</td><td>DNS</td><td>TCP</td></tr><tr><td> 监听支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>多数据中心</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>跨注册中心</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td> SpringCloud 集成</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td> Dubbo 集成</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td> K8s 集成</td><td>支持</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>Nacos 服务发现实例模型</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%AE%9E%E4%BE%8B%E6%A8%A1%E5%9E%8B.png"></p><p><strong>Nacos 支持 AP 和 CP 模式的切换</strong></p><p>C 是所有节点在同一时间看到的数据是一致的；而 A 的定义是所有的请求都会收到响应。</p><p><strong>何时选择使用何种模式？</strong></p><p>— 般来说，如果不需要存储服务级别的信息且服务实例是通过 nacos-client 注册，并能够保持心跳上报，那么就可以选择 AP 模式。当前主流的服务如 Spring cloud 和 Dubbo 服务，都适用于 AP 模式，AP<br>模式为了服务的可能性而减弱了一致性，因此 AP 模式下只支持注册临时实例。</p><p>如果需要在服务级别编辑或者存储配置信息，那么 CP 是必须，K8S 服务和 DNS 服务则适用于 CP 模式。CP 模式下则支持注册持久化实例，此时则是以 Raft<br>协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p><p>切换命令：</p><p><code>curl -X PUT '$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP</code></p><h2 id="Nacos-之服务配置中心"><a href="#Nacos-之服务配置中心" class="headerlink" title="Nacos 之服务配置中心"></a>Nacos 之服务配置中心</h2><ol><li><p>新建工程：cloudalibaba-config-nacos-client3377</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloudalibaba-config-nacos-client3377<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--nacos-config--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--nacos-discovery--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--web + actuator--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--一般基础配置--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>bootstrap.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># nacos配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3377</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos作为配置中心地址</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment">#指定yaml格式的配置</span><br><br><span class="hljs-comment"># 配置文件名字公式</span><br><span class="hljs-comment"># ${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</span><br><span class="hljs-comment"># nacos-config-client-dev.yaml</span><br><br><span class="hljs-comment"># nacos-config-client-test.yaml   ----&gt; config.info</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>application.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 表示开发环境</span><br>    <span class="hljs-comment">#active: test # 表示测试环境</span><br>    <span class="hljs-comment">#active: info</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosConfigClientMain3377</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(NacosConfigClientMain3377.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RefreshScope</span> <span class="hljs-comment">//支持Nacos的动态刷新功能。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigClientController</span><br>{<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${config.info}"</span>)<br>   <span class="hljs-keyword">private</span> String configInfo;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/config/info"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConfigInfo</span><span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> configInfo;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="在-Nacos-中添加配置信息"><a href="#在-Nacos-中添加配置信息" class="headerlink" title="在 Nacos 中添加配置信息"></a>在 Nacos 中添加配置信息</h2><p>Nacos 中的 dataid 的组成格式及与 SpringBoot 配置文件中的匹配规则</p><p><a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">官方文档</a></p><p>说明：之所以需要配置 spring.application.name，是因为它是构成 Nacos 配置管理 dataId 字段的一部分。</p><p>在 <code>bootstrap.properties</code> 中配置 Nacos server 的地址和应用名</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.cloud.nacos.config.server-addr</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8848</span><br><br><span class="hljs-attr">spring.application.name</span>=example<br></code></pre></td></tr></tbody></table></figure><p>说明：之所以需要配置 <code>spring.application.name</code> ，是因为它是构成 Nacos 配置管理 <code>dataId</code> 字段的一部分。</p><p>在 Nacos Spring Cloud 中，<code>dataId</code> 的完整格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">${prefix}-${spring.profiles.active}.${file-extension}<br></code></pre></td></tr></tbody></table></figure><ul><li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code> 来配置。</li><li><code>spring.profiles.active</code> 即为当前环境对应的<br>profile，详情可以参考 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles">Spring Boot 文档</a>。 **<br>注意：当 <code>spring.profiles.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>${prefix}.${file-extension}</code>**</li><li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li></ul><p>最后公式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ba">${spring.application.name)}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}<br></code></pre></td></tr></tbody></table></figure><p>例子:</p><p><strong>新增配置文件</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E6%96%B0%E5%A2%9E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%AD%A5%E9%AA%A4.png"></p><p><strong>设置配置文件</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">config:</span><br>  <span class="hljs-attr">info:</span> <span class="hljs-string">"config info for dev,from nacos config center."</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E6%96%B0%E5%A2%9E%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9.png"></p><p><strong>配置文件小结</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B0%8F%E7%BB%93.png"></p><p><strong>测试</strong></p><ul><li>启动前需要在 nacos 客户端 - 配置管理 - 配置管理栏目下有对应的 yaml 配置文件</li><li>运行 cloud-config-nacos-client3377 的主启动类</li><li>调用接口查看配置信息   <a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></li></ul><p><strong>自带动态刷新</strong></p><p>修改下 Nacos 中的 yaml 配置文件，再次调用查看配置的接口，就会发现配置已经刷新。</p><h2 id="Nacos-之命名空间分组和-DataID-三者关系"><a href="#Nacos-之命名空间分组和-DataID-三者关系" class="headerlink" title="Nacos 之命名空间分组和 DataID 三者关系"></a>Nacos 之命名空间分组和 DataID 三者关系</h2><p><strong>问题 - 多环境多项目管理</strong></p><p>问题 1:</p><p>实际开发中，通常一个系统会准备</p><ul><li>dev 开发环境</li><li> test 测试环境</li><li> prod 生产环境。</li></ul><p>如何保证指定环境启动时服务能正确读取到 Nacos 上相应环境的配置文件呢？</p><p>问题 2:</p><p>一个大型分布式微服务系统会有很多微服务子项目，每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境… 那怎么对这些微服务配置进行管理呢？</p><p><strong>Nacos 命名空间分组</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%88%86%E7%BB%84.png"></p><p><strong>命名空间</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png"></p><p><strong>Namespace+Group+Data lD 三者关系？为什么这么设计？</strong></p><ol><li><p>是什么</p><p>类似 Java 里面的 package 名和类名最外层的 namespace 是可以用于区分部署环境的，Group 和 DatalD 逻辑上区分两个目标对象</p></li><li><p>三者情况</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos_Namespace%2BGroup%2BData%20lD.png"></p><p>默认情况：Namespace=public，Group=DEFAULT_GROUP，默认 Cluster 是 DEFAULT</p><ul><li>Nacos 默认的 Namespace 是 public，Namespace 主要用来实现隔离。<ul><li>比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个 Namespace，不同的 Namespace 之间是隔离的。</li></ul></li><li>Group 默认是 DEFAULT_GROUP，Group 可以把不同的微服务划分到同一个分组里面去</li><li> Service 就是微服务：一个 Service 可以包含多个 Cluster (集群)，Nacos 默认 Cluster 是 DEFAULT，Cluster 是对指定微服务的一个虚拟划分。<ul><li>比方说为了容灾，将 Service 微服务分别部署在了杭州机房和广州机房，这时就可以给杭州机房的 Service 微服务起一个集群名称 (HZ) ，给广州机房的 Service 微服务起一个集群名称 (GZ)<br>，还可以尽量让同一个机房的微服务互相调用，以提升性能。</li></ul></li><li>最后是 Instance，就是微服务的实例。</li></ul></li></ol><h2 id="Nacos-之-DataID-配置"><a href="#Nacos-之-DataID-配置" class="headerlink" title="Nacos 之 DataID 配置"></a>Nacos 之 DataID 配置</h2><p><strong>指定 spring.profile.active 和配置文件的 DatalD 来使不同环境下读取不同的配置</strong></p><p>默认空间 + 默认分组 + 新建 dev 和 test 两个 DatalD</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos_Data%20lD%E6%B5%8B%E8%AF%95.png"></p><p><strong>通过 spring.profile.active 属性就能进行多环境下配置文件的读取</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment">#active: dev # 表示开发环境</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">test</span> <span class="hljs-comment"># 表示测试环境</span><br>    <span class="hljs-comment">#active: info</span><br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><ul><li><a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></li><li> 配置是什么就加载什么 test/dev</li></ul><h2 id="Nacos-之-Group-分组方案"><a href="#Nacos-之-Group-分组方案" class="headerlink" title="Nacos 之 Group 分组方案"></a>Nacos 之 Group 分组方案</h2><p>通过 Group 实现环境区分 - 新建 Group</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos_Group%E6%B5%8B%E8%AF%95.png"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos_Group%E6%B5%8B%E8%AF%952.png"></p><p><strong>Nacos 图形管理配置界面</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos_Group%E6%B5%8B%E8%AF%953.png"></p><p><strong>bootstrap+application</strong></p><p>在 config 下增加一条 group 的配置即可。可配置为 DEV_GROUP 或 TEST GROUP</p><p>bootstrap</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># nacos配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3377</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos作为配置中心地址</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment">#指定yaml格式的配置</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">TEST_GROUP</span><br><br><span class="hljs-comment"># 配置文件名字公式</span><br><span class="hljs-comment"># ${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</span><br><span class="hljs-comment"># nacos-config-client-dev.yaml</span><br><br><span class="hljs-comment"># nacos-config-client-test.yaml   ----&gt; config.info</span><br></code></pre></td></tr></tbody></table></figure><p>application</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment">#active: dev # 表示开发环境</span><br>    <span class="hljs-comment">#active: test # 表示测试环境</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">info</span><br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><p><a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><h2 id="Nacos-之-Namespace-空间方案"><a href="#Nacos-之-Namespace-空间方案" class="headerlink" title="Nacos 之 Namespace 空间方案"></a>Nacos 之 Namespace 空间方案</h2><p><strong>新建 dev/test 的 Namespace</strong></p><p>自动生成命名空间 ID</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%88%9B%E5%BB%BA.png"></p><p><strong>按照域名配置填写配置文件</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4ID%E5%88%86%E7%BB%84%E6%B5%8B%E8%AF%95.png"></p><p><strong>修改 3377bootstrap.yaml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># nacos配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">3377</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos作为配置中心地址</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment">#指定yaml格式的配置</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEV_GROUP</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">5fbbbd4b-fcdb-4ece-8523-6886d632cca5</span> <span class="hljs-comment">#&lt;------------指定namespace</span><br><br><br><span class="hljs-comment"># ${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</span><br><span class="hljs-comment"># nacos-config-client-dev.yaml</span><br><br><span class="hljs-comment"># nacos-config-client-test.yaml   ----&gt; config.info</span><br></code></pre></td></tr></tbody></table></figure><p><strong>修改 3377application.yaml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 表示开发环境</span><br>    <span class="hljs-comment">#active: test # 表示测试环境</span><br>    <span class="hljs-comment">#active: info</span><br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><ul><li><a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></li><li> 配置是什么就加载什么 test/dev</li></ul><h2 id="Nacos-集群-架构说明"><a href="#Nacos-集群-架构说明" class="headerlink" title="Nacos 集群_架构说明"></a>Nacos 集群_架构说明</h2><blockquote><p><a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">官方文档</a></p><p><strong>集群部署架构图</strong></p><p>因此开源的时候推荐用户把所有服务列表放到一个 vip 下面，然后挂到一个域名下面</p><p><a href="http://ip1:port/openAPI">http://ip1:port/openAPI</a> 直连 ip 模式，机器挂则需要修改 ip 才可以使用。</p><p><a href="http://VIP:port/openAPI">http://VIP:port/openAPI</a> 挂载 VIP 模式，直连 vip 即可，下面挂 server 真实 ip，可读性不好。</p><p><a href="http://nacos.com:port/openAPI">http://nacos.com:port/openAPI</a> 域名＋VIP（Virtual IP） 模式，可读性好，而且换 ip 方便，推荐模式</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%9B%BE.png"></p></blockquote><p>可以理解为：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Nacos%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%9B%BE2.png"></p><p>按照上述，<strong>我们需要 mysql 数据库</strong>。</p><blockquote><p><a href="https://nacos.io/zh-cn/docs/deployment.html">官网说明</a></p><p>默认 Nacos 使用嵌入式数据库实现数据的存储。所以，如果启动多个默认配置下的 Nacos 节点，数据存储是存在一致性问题的。为了解决这个问题，<strong>Nacos 采用了集中式存储的方式来支持集群化部署，目前只支持 MySQL 的存储</strong>。</p><p>Nacos 支持三种部署模式</p><ul><li>单机模式 - 用于测试和单机试用。</li><li>集群模式 - 用于生产环境，确保高可用。</li><li>多集群模式 - 用于多数据中心场景。</li></ul><p><strong>Windows</strong></p><p>cmd startup.cmd 或者双击 startup.cmd 文件</p><p>单机模式支持 mysql</p><p>在 0.7 版本之前，在单机模式时 nacos 使用嵌入式数据库实现数据的存储，不方便观察数据存储的基本情况。0.7 版本增加了支持 mysql 数据源能力，具体的操作步骤:</p><ol><li><p>安装数据库，版本要求：5.6.5+</p></li><li><p>初始化 mysq 数据库，数据库初始化文件: nacos-mysql.sql</p></li><li><p>修改 conf/application.properties 文件，增加支持 mysql 数据源配置（目前只支持 mysql)，添加 mysql 数据源的 url、用户名和密码。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br>            <span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">db.user.0</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.password.0</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></tbody></table></figure></li></ol><p>再以单机模式启动 nacos，nacos 所有写嵌入式数据库的数据都写到了 mysql。</p></blockquote><h2 id="Nacos-持久化切换配置"><a href="#Nacos-持久化切换配置" class="headerlink" title="Nacos 持久化切换配置"></a>Nacos 持久化切换配置</h2><p>Nacos 默认自带的是嵌入式数据库 derby，nacos 的 pom.xml 中可以看出。</p><p><strong>derby 到 mysql 切换配置步骤</strong></p><ol><li><p>nacos-server-2.0.3\nacos\conf 录下找到 nacos-mysql.sql 文件，执行 <code>CREATE DATABASE nacos_config;</code>，并执行脚本。</p></li><li><p>nacos-server-2.0.3\nacos\conf 目录下找到 application.properties，添加以下配置（按需修改对应值）。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">db.user.0</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.password.0</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>启动 Nacos，可以看到是个全新的空记录界面，以前是记录进 derby 数据库。</p></li></ol><h2 id="Nacos-之-Linux-版本安装"><a href="#Nacos-之-Linux-版本安装" class="headerlink" title="Nacos 之 Linux 版本安装"></a>Nacos 之 Linux 版本安装</h2><p>预计需要，1 个 Nginx+3 个 nacos 注册中心 + 1 个 mysql</p><blockquote><p>请确保是在环境中安装使用:</p><ol><li>64 bit OS Linux/Unix/Mac，推荐使用 Linux 系统。</li><li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载</a>. <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">配置</a>。</li><li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi">下载</a>. <a href="https://maven.apache.org/settings.html">配置</a>。</li><li>3 个或 3 个以上 Nacos 节点才能构成集群。</li></ol></blockquote><h2 id="Nacos-下载-Linux-版"><a href="#Nacos-下载-Linux-版" class="headerlink" title="Nacos 下载 Linux 版"></a>Nacos 下载 Linux 版</h2><ul><li><a href="https://github.com/alibaba/nacos/releases/tag/2.0.3">https://github.com/alibaba/nacos/releases/tag/2.0.3</a></li><li>nacos-server-2.0.3.tar.gz 解压后安装</li></ul><h2 id="Nacos集群"><a href="#Nacos集群" class="headerlink" title="Nacos集群"></a>Nacos 集群</h2><hr><p><strong>挖坑待填</strong></p><hr><h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><h2 id="Sentinel-是什么"><a href="#Sentinel-是什么" class="headerlink" title="Sentinel 是什么"></a>Sentinel 是什么</h2><p><a href="https://github.com/alibaba/Sentinel">官方 Github</a></p><p><a href="https://sentinelguard.io/zh-cn/docs/introduction.html">官方文档</a></p><blockquote><p><strong>Sentinel 是什么？</strong></p><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Sentinel 具有以下特征:</p><ul><li>丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li>完备的实时监控：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li>广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架 / 库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li>完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p>Sentinel 的主要特性：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%20%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7.png"></p></blockquote><p>Hystrix 与 Sentinel 比较：</p><ul><li>Hystrix<ol><li> 需要我们程序员自己手工搭建监控平台</li><li>没有一套 web 界面可以给我们进行更加细粒度化得配置流控、速率控制、服务熔断、服务降级</li></ol></li><li> Sentinel<ol><li> 单独一个组件，可以独立出来。</li><li>直接界面化的细粒度统一配置。</li></ol></li></ul><h2 id="Sentinel-下载安装运行"><a href="#Sentinel-下载安装运行" class="headerlink" title="Sentinel 下载安装运行"></a>Sentinel 下载安装运行</h2><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel">官方文档</a></p><p>服务使用中的各种问题：</p><ul><li>服务雪崩</li><li>服务降级</li><li>服务熔断</li><li>服务限流</li></ul><p>Sentinel 分为两个部分：</p><ul><li>核心库（Java 客户端）不依赖任何框架 / 库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul><p>安装步骤：</p><ul><li>下载 <ul><li><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></li><li> 下载到本地 sentinel-dashboard-1.8.3.jar</li></ul></li><li> 运行命令<ul><li>前提<ul><li> Java 8 环境</li><li> 8080 端口不能被占用</li></ul></li><li>命令<ul><li> java -jar sentinel-dashboard-1.7.0.jar</li></ul></li></ul></li><li> 访问 Sentinel 管理界面<ul><li> localhost:8080</li><li> 登录账号密码均为 sentinel</li></ul></li></ul><h2 id="Sentinel-初始化监控"><a href="#Sentinel-初始化监控" class="headerlink" title="Sentinel 初始化监控"></a>Sentinel 初始化监控</h2><ol><li><p>新建工程 - cloudalibaba-sentinel-service8401</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloudalibaba-sentinel-service8401<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--openfeign--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件+actuator --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8401</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloudalibaba-sentinel-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span> <span class="hljs-comment">#配置Sentinel dashboard地址</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8719</span> <span class="hljs-comment">#sentinel后台通信端口，被占用默认+1</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">'*'</span><br><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 激活Sentinel对Feign的支持</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApp8401</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(MainApp8401.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowLimitController</span> {<br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/testA"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testA</span><span class="hljs-params">()</span><br>   {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"------testA"</span>;<br>   }<br><br>   <span class="hljs-meta">@GetMapping("/testB")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testB</span><span class="hljs-params">()</span><br>   {<br>      log.info(Thread.currentThread().getName()+<span class="hljs-string">"\t"</span>+<span class="hljs-string">"...testB"</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"------testB"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><ul><li><p>启动 nacos 注册中心 8848-<code>startup.cmd -m standalone</code></p></li><li><p>启动 Sentinel8080 - <code>java -jar sentinel-dashboard-1.7.0.jar</code></p></li><li><p>启动 8401, 查看 sentienl 控制台，发现空空如也，这是因为 Sentinel 采用的懒加载，需要执行一次 controller 的路径</p><ul><li><a href="http://localhost:8401/testA">http://localhost:8401/testA</a></li><li><a href="http://localhost:8401/testB">http://localhost:8401/testB</a></li></ul></li><li><p> 然后可以发现 8080 正在监控 8401</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%208080%E7%9B%91%E6%8E%A7.png"></p></li></ul></li></ol><h2 id="Sentinel-流控规则简介"><a href="#Sentinel-流控规则简介" class="headerlink" title="Sentinel 流控规则简介"></a>Sentinel 流控规则简介</h2><p><strong>基本介绍</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99.png"></p><p><strong>进一步解释说明</strong></p><ul><li>资源名：唯一名称，默认请求路径。</li><li>针对来源：Sentinel 可以针对调用者进行限流，填写微服务名，默认 default（不区分来源）。</li><li>阈值类型 / 单机阈值：<ul><li>QPS (每秒钟的请求数量)︰当调用该 API 的 QPS 达到阈值的时候，进行限流。</li><li>线程数：当调用该 API 的线程数达到阈值的时候，进行限流。</li></ul></li><li>是否集群：不需要集群。</li><li>流控模式：<ul><li>直接：API 达到限流条件时，直接限流。</li><li>关联：当关联的资源达到阈值时，就限流自己。</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流)【API 级别的针对来源】。</li></ul></li><li>流控效果：<ul><li>快速失败：直接失败，抛异常。</li><li>Warm up：根据 Code Factor（冷加载因子，默认 3）的值，从阈值 /codeFactor，经过预热时长，才达到设置的 QPS 阈值。</li><li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为 QPS，否则无效。</li></ul></li></ul><h2 id="Sentinel-流控-QPS-直接快速失败"><a href="#Sentinel-流控-QPS-直接快速失败" class="headerlink" title="Sentinel 流控 - QPS 直接快速失败"></a>Sentinel 流控 - QPS 直接快速失败</h2><p><strong>直接 -&gt; 快速失败（系统默认）</strong></p><p><strong>配置及说明</strong></p><p>表示 1 秒钟内查询 1 次就是 OK，若超过次数 1，就直接 -&gt; 快速失败，报默认错误</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel_QPS%E6%B5%81%E6%8E%A7.png"></p><p><strong>测试</strong></p><p>快速多次点击访问 <a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p><strong>结果</strong></p><p>返回页面 Blocked by Sentinel (flow limiting)</p><p><strong>源码</strong></p><p>com.alibaba.csp.sentinel.slots.block.flow.controller.DefaultController</p><p><strong>思考</strong></p><p>直接调用默认报错信息，技术方面 OK，但是，是否应该有自己的后续处理？类似有个 fallback 的兜底方法？</p><h2 id="Sentinel-流控-线程数直接失败"><a href="#Sentinel-流控-线程数直接失败" class="headerlink" title="Sentinel 流控 - 线程数直接失败"></a>Sentinel 流控 - 线程数直接失败</h2><p>线程数：当调用该 API 的线程数达到阈值的时候，进行限流。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel_%E7%BA%BF%E7%A8%8B%E6%B5%81%E6%8E%A7_%E7%9B%B4%E6%8E%A5%E5%A4%B1%E8%B4%A5.png"></p><h2 id="Sentinel-流控-关联"><a href="#Sentinel-流控-关联" class="headerlink" title="Sentinel 流控 - 关联"></a>Sentinel 流控 - 关联</h2><p><strong>是什么？</strong></p><ul><li>当自己关联的资源达到阈值时，就限流自己</li><li>当与 A 关联的资源 B 达到阈值后，就限流 A 自己（B 惹事，A 挂了）</li></ul><p><strong>设置 testA</strong></p><p>当关联资源 /testB 的 QPS 阈值超过 1 时，就限流 /testA 的 Rest 访问地址，<strong>当关联资源到阈值后限制配置好的资源名</strong>。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel_%E5%85%B3%E8%81%94%E6%B5%81%E6%8E%A7_%E7%9B%B4%E6%8E%A5%E5%A4%B1%E8%B4%A5.png"></p><p><strong>使用压力测试工具测试</strong></p><p>大批量线程高并发访问 <code>/testB</code>，<strong>postman</strong> 运行后，点击访问 <a href="http://localhost:8401/testA%EF%BC%8C%E5%8F%91%E7%8E%B0">http://localhost:8401/testA，发现</a> <code>/testA</code><br>挂了，结果 <code>Blocked by Sentinel (flow limiting)</code></p><h2 id="Sentinel-流控-链路"><a href="#Sentinel-流控-链路" class="headerlink" title="Sentinel 流控 - 链路"></a>Sentinel 流控 - 链路</h2><p>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流)【API 级别的针对来源】</p><h2 id="Sentinel-流控-预热"><a href="#Sentinel-流控-预热" class="headerlink" title="Sentinel 流控 - 预热"></a>Sentinel 流控 - 预热</h2><blockquote><p>Warm Up</p><p>Warm Up（<code>RuleConstant.CONTROL_BEHAVIOR_WARM_UP</code>）方式，即预热 / 冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过 “冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。详细文档可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8">流量控制 - Warm Up 文档</a>，具体的例子可以参见 <a href="https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/flow/WarmUpFlowDemo.java">WarmUpFlowDemo</a>。</p><p>通常冷启动的过程系统允许通过的 QPS 曲线如下图所示：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E5%86%B7%E5%90%AF%E5%8A%A8%E7%9A%84%E8%BF%87%E7%A8%8B.png"></p><p><strong>默认 coldFactor 为 3，即请求 QPS 从 <code>阈值 / 3</code> 开始，经预热时长逐渐升至设定的 QPS 阈值。</strong></p></blockquote><p><strong>WarmUp 配置</strong></p><p>案例，阈值为 10 + 预热时长设置 5 秒。</p><p>系统初始化的阈值为 10/ 3 约等于 3, 即阈值刚开始为 3; 然后过了 5 秒后阈值才慢慢升高恢复到 10</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E5%86%B7%E5%90%AF%E5%8A%A8%E4%BE%8B%E5%AD%90.png"></p><p><strong>测试</strong></p><p>多次快速点击 <a href="http://localhost:8401/testB">http://localhost:8401/testB</a> - 刚开始不行，后续慢慢 OK</p><p><strong>应用场景</strong></p><p>如：秒杀系统在开启的瞬间，会有很多流量上来，很有可能把系统打死，预热方式就是把为了保护系统，可慢慢的把流量放进来，慢慢的把阀值增长到设置的阀值。</p><h2 id="Sentinel-流控-排队等待"><a href="#Sentinel-流控-排队等待" class="headerlink" title="Sentinel 流控 - 排队等待"></a>Sentinel 流控 - 排队等待</h2><blockquote><p><strong>匀速排队</strong></p><p>匀速排队（<code>RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER</code>）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。详细文档可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6-%E5%8C%80%E9%80%9F%E6%8E%92%E9%98%9F%E6%A8%A1%E5%BC%8F">流量控制 - 匀速器模式</a>，具体的例子可以参见 <a href="https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/flow/PaceFlowDemo.java">PaceFlowDemo</a>。</p><p>该方式的作用如下图所示：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85.png"></p><p>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p><p><strong>注意：匀速排队模式暂时不支持 QPS &gt; 1000 的场景。</strong></p></blockquote><p>匀速排队，让请求以均匀的速度通过，阀值类型必须设成 QPS，否则无效。</p><p>设置：/testA 每秒 1 次请求，超过的话就排队等待，等待的超时时间为 20000 毫秒。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85%E4%BE%8B%E5%AD%90.png"></p><p><strong>测试</strong></p><ul><li><p>添加日志记录代码到 FlowLimitController 的 testA 方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowLimitController</span> {<br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/testA"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testA</span> <span class="hljs-params">()</span> {<br>      log.info(Thread.currentThread().getName() + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"...testA"</span>);<span class="hljs-comment">//&lt;----</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"------testA"</span>;<br>   }<br>      <br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/testB"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testB</span> <span class="hljs-params">()</span> {<br>      log.info(Thread.currentThread().getName() + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"...testB"</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"------testB"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>postman</strong> 模拟并发密集访问 testA, 可以看到后台日志为一秒钟生成一条</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E6%8E%92%E9%98%9F%E7%AD%89%E5%BE%85%E6%97%A5%E5%BF%97.png"></p></li></ul><h2 id="Sentinel-降级简介"><a href="#Sentinel-降级简介" class="headerlink" title="Sentinel 降级简介"></a>Sentinel 降级简介</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">官方文档</a></p><blockquote><p><strong>熔断降级概述</strong></p><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p><p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p></blockquote><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E7%86%94%E6%96%AD%E8%A7%84%E5%88%99.png"></p><ul><li>慢调用比例（平均响应时间，秒级）<ul><li>调用：一个请求发送到服务器，服务器给与响应，一个响应就是一个调用。</li><li>RT：响应时间，指系统对请求作出响应的时间。</li><li>慢调用：当调用的时间（响应的实际时间）&gt; 设置的 RT 的时，这个调用叫做慢调用。</li><li>慢调用比例：在所以调用中，慢调用占有实际的比例，= 慢调用次数 / 调用次数</li><li>比例阈值：自己设定的 ， 慢调用次数 / 调用次数 = 比例阈值</li></ul></li><li>异常比列（秒级）<ul><li>QPS &gt;= 5 且异常比例（秒级统计）超过阈值时，触发降级；时间窗口结束后，关闭降级 。</li></ul></li><li>异常数 (分钟级)<ul><li> 异常数 (分钟统计）超过阈值时，触发降级；时间窗口结束后，关闭降级</li></ul></li></ul><p>Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高)，对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。</p><p>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）。</p><p>Sentinei 的断路器是没有类似 Hystrix 半开状态的。(Sentinei 1.8.0 已有半开状态)</p><p>半开的状态系统自动去检测是否请求有异常，没有异常就关闭断路器恢复使用，有异常则继续打开断路器不可用。</p><h2 id="Sentinel-降级-慢调用比例"><a href="#Sentinel-降级-慢调用比例" class="headerlink" title="Sentinel 降级 - 慢调用比例"></a>Sentinel 降级 - 慢调用比例</h2><blockquote><p>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断</p></blockquote><p><strong>进入熔断状态判断依据</strong></p><p>当统计时常内，实际请求数目大于最小请求数目，慢调用比例 &gt; 比例阈值 ，进入熔断状态</p><p><strong>熔断状态</strong>：在接下来的熔断时长内请求会自动被熔断</p><p><strong>探测恢复状态</strong>：熔断时长结束后进入探测恢复状态</p><p><strong>结束熔断</strong>：在探测恢复状态，如果接下来的一个请求响应时间小于设置的慢调用 RT，则结束熔断 否则继续熔断。</p><p><strong>测试</strong></p><ol><li><p>8401controller 添加代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping("/testD")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testD</span><span class="hljs-params">()</span> {<br>   <span class="hljs-keyword">try</span> {<br>      TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>   } <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>      e.printStackTrace();<br>   }<br>   log.info(<span class="hljs-string">"testD 测试慢调用"</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"------testD"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E6%85%A2%E8%B0%83%E7%94%A8%E6%AF%94%E4%BE%8B.png"></p></li><li><p>jmeter 压力测试</p><p>访问 <a href="http://localhost:8401/testD">http://localhost:8401/testD</a></p></li><li><p> 结论</p><p>按照配置，永远一秒钟打进来 10 个线程（大于 5 个了）调用 testD，我们希望 200 毫秒处理完本次任务，如果超过 200 毫秒还没处理完，且慢调用比例 &gt; 0.3，在未来 3<br>秒钟的时间窗口内，断路器打开（保险丝跳闸）微服务不可用，保险丝跳闸断电了后续停止 jmeter，没有这么大的访问量了，断路器关闭（保险丝恢复），微服务恢复 OK。</p></li></ol><h2 id="Sentinel-降级-异常比例"><a href="#Sentinel-降级-异常比例" class="headerlink" title="Sentinel 降级 - 异常比例"></a>Sentinel 降级 - 异常比例</h2><blockquote><p>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</p></blockquote><ol><li><p>修改 8401controller 代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping("/testD")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testD</span><span class="hljs-params">()</span> {<br>   log.info(<span class="hljs-string">"testD 异常比例"</span>);<br>   <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"------testD"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E5%BC%82%E5%B8%B8%E6%AF%94%E4%BE%8B.png"></p></li><li><p>测试</p><p>开启 jmeter ，访问 <a href="http://localhost:8401/testD">http://localhost:8401/testD</a> ，直接高并发发送请求，多次调用达到我们的配置条件了。断路器开启 (保险丝跳闸)，微服务不可用了，不再报错 error 而是服务降级了。</p></li></ol><h2 id="Sentinel-降级-异常数"><a href="#Sentinel-降级-异常数" class="headerlink" title="Sentinel 降级 - 异常数"></a>Sentinel 降级 - 异常数</h2><blockquote><p>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p></blockquote><ol><li><p>8401controller 添加代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping("/testE")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testE</span><span class="hljs-params">()</span><br>{<br>   log.info(<span class="hljs-string">"testE 测试异常数"</span>);<br>   <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"------testE 测试异常数"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E5%BC%82%E5%B8%B8%E6%AF%94%E4%BE%8B.png"></p></li><li><p>测试</p><p>访问 <a href="http://localhost:8401/testE">http://localhost:8401/testE</a> ，第一次访问绝对报错，因为除数不能为零，我们看到 error 窗口，但是达到 5 次报错后，进入熔断后降级。</p></li></ol><h2 id="Sentinel-热点-key"><a href="#Sentinel-热点-key" class="headerlink" title="Sentinel 热点 key"></a>Sentinel 热点 key</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">官方文档</a></p><blockquote><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E7%83%AD%E7%82%B9key%E8%A7%A3%E9%87%8A.png"></p><p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。热点参数限流支持集群模式。</p></blockquote><p><strong>自定义兜底方法</strong></p><p>兜底方法，分为<strong>系统默认</strong>和<strong>客户自定义</strong>两种</p><p>之前的 case，限流出问题后，都是用 sentinel 系统默认的提示: Blocked by Sentinel (flow limiting)</p><p>我们能不能自定？类似 hystrix，某个方法出问题了，就找对应的兜底降级方法？</p><p>结论 - 从 <code>@HystrixCommand</code> 到 <code>@SentinelResource</code></p><p><strong>源码：com.alibaba.csp.sentinel.slots.block.BlockException</strong></p><ol><li><p>8401controller 添加代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping("/testHotKey")</span><br><span class="hljs-meta">@SentinelResource</span> (value = <span class="hljs-string">"testHotKey"</span>,blockHandler<span class="hljs-comment">/*兜底方法*/</span> = <span class="hljs-string">"deal_testHotKey"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHotKey</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> (value = <span class="hljs-string">"p1"</span>,required = <span class="hljs-literal">false</span>)</span> String p1,<br>                         <span class="hljs-meta">@RequestParam(value = "p2",required = false)</span> String p2) {<br><span class="hljs-comment">//int age = 10/0;</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">"------testHotKey"</span>;<br>}<br><br><span class="hljs-comment">/*兜底方法*/</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deal_testHotKey</span> <span class="hljs-params">(String p1, String p2, BlockException exception)</span> {<br><span class="hljs-keyword">return</span> <span class="hljs-string">"------deal_testHotKey,o(╥﹏╥)o"</span>;  <span class="hljs-comment">//sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E7%83%AD%E7%82%B9key%E9%85%8D%E7%BD%AE.png"></p><p>表示第 1 个参数的阈值达到 1 / 秒 时限流</p></li><li><p>测试</p><ul><li><a href="http://localhost:8401/testHotKey?p1=abc">http://localhost:8401/testHotKey?p1=abc</a></li><li><code>@SentinelResource(value = "testHotKey", blockHandler = "dealHandler_testHotKey")</code></li><li>方法 testHotKey 里面第一个参数只要 QPS 超过每秒 1 次，马上降级处理</li><li>异常用了我们自己定义的兜底方法</li></ul></li></ol><p><strong>参数例外项</strong></p><ul><li>普通 - 超过 1 秒钟一个后，达到阈值 1 后马上被限流</li><li><strong>我们期望 p1 参数当它是某个特殊值时，它的限流值和平时不一样</strong></li><li>特例 ： 假如当 p1 的值等于 5 时，它的阈值可以达到 200</li></ul><ol><li><p> 配置</p><p><strong>前提条件</strong> - 热点参数的注意点，参数必须是基本类型或者 String，然后点击添加</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E7%83%AD%E7%82%B9key%E5%8F%82%E6%95%B0%E4%BE%8B%E5%A4%96%E9%A1%B9.png"></p></li><li><p>测试</p><ul><li>right - <a href="http://localhost:8401/testHotKey?p1=5">http://localhost:8401/testHotKey?p1=5</a></li><li>error - <a href="http://localhost:8401/testHotKey?p1=1">http://localhost:8401/testHotKey?p1=1</a></li><li> 当 p1 等于 5 的时候，阈值变为 200</li><li> 当 p1 不等于 5 的时候，阈值就是平常的 1</li></ul></li><li><p><strong> 注意</strong></p><ul><li><code>@SentinelResource</code> - 处理的是 <strong>sentinel 控制台配置的违规情况</strong>，有 blockHandler 方法配置的兜底处理；</li><li>RuntimeException<code> int age = 10/0</code>，这个是 java 运行时报出的运行时异常 RunTimeException，@SentinelResource 不管，将会抛出 Spring Boot 2<br>的默认异常页面，而不是兜底方法。</li></ul></li></ol><h2 id="Sentinel-系统规则"><a href="#Sentinel-系统规则" class="headerlink" title="Sentinel 系统规则"></a>Sentinel 系统规则</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">官方文档</a></p><p>Sentinel 系统自适应限流从整体维度 对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS<br>和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><blockquote><p>系统规则</p><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p><p>系统规则支持以下的模式：</p><ul><li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul></blockquote><h2 id="SentinelResource-配置"><a href="#SentinelResource-配置" class="headerlink" title="@SentinelResource 配置"></a>@SentinelResource 配置</h2><blockquote><p><strong>@SentinelResource 注解</strong></p><p>注意：注解方式埋点不支持 <code>private</code> 方法。</p><p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 fallback 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p><ul><li><code>value</code>：资源名称，必需项（不能为空）</li><li><code>entryType</code>：entry 类型，可选项（默认为 <code>EntryType.OUT</code>）</li><li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。blockHandler 函数默认需要和原方法在同一个类中。<strong>若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</strong></li><li><code>fallback</code> /<code>fallbackClass</code>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：</li></ul></blockquote><ul><li>返回值类型必须与原函数返回值类型一致；<blockquote><ul><li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>fallback 函数默认需要和原方法在同一个类中。<strong>若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</strong></li><li><code>defaultFallback</code>（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。<strong>若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效</strong>。defaultFallback 函数签名要求：</li></ul></blockquote></li><li>返回值类型必须与原函数返回值类型一致；<blockquote><ul><li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li>defaultFallback 函数默认需要和原方法在同一个类中。<strong>若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</strong></li><li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会<strong>原样</strong>抛出。</li></ul></blockquote></li></ul><hr><p><strong>启动 Nacos 成功</strong></p><p><strong>启动 Sentinel 成功</strong></p><hr><p><strong>按资源名称限流 + 后续处理</strong></p><ol><li><p>修改 cloudalibaba-sentinel-service8401，新建 controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RateLimitController</span> {<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/byResource"</span>)<br>   <span class="hljs-meta">@SentinelResource</span> (value = <span class="hljs-string">"byResource"</span>, blockHandler = <span class="hljs-string">"handleException"</span>)<br>   <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">byResource</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">"按资源名称限流测试OK"</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">2020L</span>, <span class="hljs-string">"serial001"</span>));<br>   }<br><br>   <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handleException</span> <span class="hljs-params">(BlockException exception)</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">444</span>, exception.getClass().getCanonicalName() + <span class="hljs-string">"\t 服务不可用"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E6%8C%89%E8%B5%84%E6%BA%90%E5%90%8D%E7%A7%B0%E9%99%90%E6%B5%81%E6%B5%8B%E8%AF%95.png"></p><p>表示 1 秒钟内查询次数大于 1，就跑到自定义的兜底方法，进行限流</p></li><li><p>测试</p><p>1 秒钟点击 1 下，OK</p><p>超过上述，疯狂点击，返回了自己定义的限流处理信息，限流发生</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><span class="hljs-attr">"code"</span><span class="hljs-punctuation">:</span><span class="hljs-number">444</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"com.alibaba.csp.sentinel.slots.block.flow.FlowException\t 服务不可用"</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"data"</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>额外问题</p><p>此时关闭问服务 8401 -&gt; Sentinel 控制台，流控规则消失了</p></li></ol><hr><p><strong>按照 Url 地址限流 + 后续处理</strong></p><p><strong>通过访问的 URL 来限流，会返回 Sentinel 自带默认的限流处理信息</strong></p><ol><li><p>RateLimitController</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RateLimitController</span><br>{<br>...<br><br>    <span class="hljs-meta">@GetMapping("/rateLimit/byUrl")</span><br>    <span class="hljs-meta">@SentinelResource(value = "byUrl")</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">byUrl</span><span class="hljs-params">()</span><br>    {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">"按url限流测试OK"</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">2020L</span>,<span class="hljs-string">"serial002"</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E6%8C%89Url%20%E5%9C%B0%E5%9D%80%E9%99%90%E6%B5%81.png"></p></li><li><p>测试</p><ul><li>快速点击 <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></li><li> 结果会返回 Sentinel 自带的限流处理结果 Blocked by Sentinel (flow limiting)</li></ul></li><li><p> 上面兜底方案面临的问题</p><ol><li>系统默认的，没有体现我们自己的业务要求。</li><li>依照现有条件，我们自定义的处理方法又和业务代码耦合在一块，不直观。</li><li>每个业务方法都添加 — 个兜底的，那代码膨胀加剧。</li><li>全局统 — 的处理方法没有体现。</li></ol></li></ol><hr><p><strong>客户自定义限流处理逻辑</strong></p><ol><li><p>自定义限流处理类 - 创建 CustomerBlockHandler 类用于自定义限流处理逻辑</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.myhandle;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerBlockHandler</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResult <span class="hljs-title function_">handlerException</span><span class="hljs-params">(BlockException exception)</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">4444</span>,<span class="hljs-string">"按客戶自定义,global handlerException----1"</span>);<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResult <span class="hljs-title function_">handlerException2</span><span class="hljs-params">(BlockException exception)</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">4444</span>,<span class="hljs-string">"按客戶自定义,global handlerException----2"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>RateLimitController</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping("/rateLimit/customerBlockHandler")</span><br>    <span class="hljs-meta">@SentinelResource(value = "customerBlockHandler",</span><br><span class="hljs-meta">            blockHandlerClass = CustomerBlockHandler.class,//&lt;-------- 自定义限流处理类</span><br><span class="hljs-meta">            blockHandler = "handlerException2")</span><span class="hljs-comment">//&lt;-----------</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">customerBlockHandler</span><span class="hljs-params">()</span><br>    {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">"按客戶自定义"</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">2020L</span>,<span class="hljs-string">"serial003"</span>));<br>    }<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E5%AE%A2%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E9%99%90%E6%B5%81.png"></p></li><li><p>测试</p><p>启动微服务后先调用一次 - <a href="http://localhost:8401/rateLimit/customerBlockHandler">http://localhost:8401/rateLimit/customerBlockHandler</a><br>。然后，多次快速刷新 <a href="http://localhost:8401/rateLimit/customerBlockHandler">http://localhost:8401/rateLimit/customerBlockHandler</a> 。刷新后，我们自定义兜底方法的字符串信息就返回到前端。</p></li></ol><hr><p>Sentinel 主要有三个核心 Api：</p><ol><li>SphU 定义资源</li><li> Tracer 定义统计</li><li> ContextUtil 定义了上下文</li></ol><h2 id="Sentinel-服务熔断-Ribbon环境搭建"><a href="#Sentinel-服务熔断-Ribbon环境搭建" class="headerlink" title="Sentinel 服务熔断 Ribbon环境搭建"></a>Sentinel 服务熔断 Ribbon 环境搭建</h2><p>Ribbon 系列</p><ul><li>启动 nacos 和 sentinel</li><li> 提供者 9003/9004</li><li> 消费者 84</li></ul><hr><p><strong>提供者 9003/9004</strong></p><ol><li><p>新建 cloudalibaba-provider-payment9003/9004，两个一样的做法</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloudalibaba-provider-payment9003<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml，<strong>记得修改不同的端口号</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9003</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-payment-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#配置Nacos地址</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">'*'</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentMain9003</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(PaymentMain9003.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentController</span> {<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"${server.port}"</span>)<br>   <span class="hljs-keyword">private</span> String serverPort;<br><br>   <span class="hljs-comment">//模拟数据库</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Long, Payment&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>   <span class="hljs-keyword">static</span><br>   {<br>      hashMap.put(<span class="hljs-number">1L</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">"28a8c1e3bc2742d8848569891fb42181"</span>));<br>      hashMap.put(<span class="hljs-number">2L</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">2L</span>,<span class="hljs-string">"bba8c1e3bc2742d8848569891ac32182"</span>));<br>      hashMap.put(<span class="hljs-number">3L</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">"6ua8c1e3bc2742d8848569891xt92183"</span>));<br>   }<br><br>   <span class="hljs-meta">@GetMapping</span> (value = <span class="hljs-string">"/paymentSQL/{id}"</span>)<br>   <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">paymentSQL</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> Long id)<br>   {<br>      <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> hashMap.get(id);<br>      CommonResult&lt;Payment&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">"from mysql,serverPort:  "</span>+serverPort,payment);<br>      <span class="hljs-keyword">return</span> result;<br>   }<br><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试地址 - <a href="http://localhost:9003/paymentSQL/1">http://localhost:9003/paymentSQL/1</a></p></li></ol><hr><p><strong>消费者 84</strong></p><ol><li><p>新建 cloudalibaba-consumer-nacos-order84</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloud<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloudalibaba-consumer-nacos-order84<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud openfeign --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">84</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-order-consumer</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-comment">#配置Sentinel dashboard地址</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span><br>        <span class="hljs-comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8719</span><br><br><span class="hljs-comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span><br><span class="hljs-attr">service-url:</span><br>  <span class="hljs-attr">nacos-user-service:</span> <span class="hljs-string">http://nacos-payment-provider</span><br><br><span class="hljs-comment"># 激活Sentinel对Feign的支持</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-comment">//@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderNacosMain84</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>         SpringApplication.run(OrderNacosMain84.class, args);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>RestTemplate 配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.config;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextConfig</span> {<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span><br>   <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Payment;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span><br>{<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://nacos-payment-provider"</span>;<br><br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/consumer/fallback/{id}"</span>)<br>   <span class="hljs-meta">@SentinelResource(value = "fallback")</span> <span class="hljs-comment">//没有配置</span><br>   <span class="hljs-comment">//@SentinelResource(value = "fallback",fallback = "handlerFallback") //fallback只负责业务异常</span><br>   <span class="hljs-comment">//@SentinelResource(value = "fallback",blockHandler = "blockHandler") //blockHandler只负责sentinel控制台配置违规</span><br>   <span class="hljs-comment">//@SentinelResource (value = "fallback",fallback = "handlerFallback",blockHandler = "blockHandler")</span><br>   <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span><br>   {<br>      CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">"/paymentSQL/"</span>+id,CommonResult.class,id);<br><br>      <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) {<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span> (<span class="hljs-string">"IllegalArgumentException,非法参数异常...."</span>);<br>      }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) {<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span> (<span class="hljs-string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);<br>      }<br><br>      <span class="hljs-keyword">return</span> result;<br>   }<br>   <span class="hljs-comment">////本例是fallback</span><br>   <span class="hljs-comment">//public CommonResult handlerFallback(@PathVariable Long id, Throwable e) {</span><br>   <span class="hljs-comment">// Payment payment = new Payment(id,"null");</span><br>   <span class="hljs-comment">// return new CommonResult&lt;&gt;(444,"兜底异常handlerFallback,exception内容  "+e.getMessage(),payment);</span><br>   <span class="hljs-comment">//}</span><br>   <span class="hljs-comment">////本例是blockHandler</span><br>   <span class="hljs-comment">//public CommonResult blockHandler(@PathVariable  Long id, BlockException blockException) {</span><br>   <span class="hljs-comment">// Payment payment = new Payment(id,"null");</span><br>   <span class="hljs-comment">// return new CommonResult&lt;&gt;(445,"blockHandler-sentinel限流,无此流水: blockException  "+blockException.getMessage(),payment);</span><br>   <span class="hljs-comment">//}</span><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p>地址 - <a href="http://localhost:84/consumer/fallback/1">http://localhost:84/consumer/fallback/1</a></p><p><strong>测试范围</strong></p><ul><li>没有任何配置</li><li>只配置 fallback</li><li> 只配置 blockHandler</li><li>fallback 和 blockHandler 都配置</li><li>忽略属性</li></ul></li></ol><h2 id="Sentinel-服务熔断无配置"><a href="#Sentinel-服务熔断无配置" class="headerlink" title="Sentinel 服务熔断无配置"></a>Sentinel 服务熔断无配置</h2><p>没有任何配置 - <strong>给用户 error 页面，不友好</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://nacos-payment-provider"</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/consumer/fallback/{id}"</span>)<br>    <span class="hljs-meta">@SentinelResource</span> (value = <span class="hljs-string">"fallback"</span>)<span class="hljs-comment">//没有配置</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> {<br>        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">"/paymentSQL/"</span> + id, CommonResult.class, id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">"IllegalArgumentException,非法参数异常...."</span>);<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);<br>        }<br><br>        <span class="hljs-keyword">return</span> result;<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><p>参数异常 - <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a></p><p>空指针异常 - <a href="http://localhost:84/consumer/fallback/5">http://localhost:84/consumer/fallback/5</a></p><h2 id="Sentinel-服务熔断只配置-fallback"><a href="#Sentinel-服务熔断只配置-fallback" class="headerlink" title="Sentinel 服务熔断只配置 fallback"></a>Sentinel 服务熔断只配置 fallback</h2><p>fallback 只负责业务异常</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span> {<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://nacos-payment-provider"</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/consumer/fallback/{id}"</span>)<br>    <span class="hljs-comment">//@SentinelResource(value = "fallback")//没有配置</span><br>    <span class="hljs-meta">@SentinelResource</span> (value = <span class="hljs-string">"fallback"</span>, fallback = <span class="hljs-string">"handlerFallback"</span>) <span class="hljs-comment">//fallback只负责业务异常</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> {<br>        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">"/paymentSQL/"</span> + id, CommonResult.class, id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">"IllegalArgumentException,非法参数异常...."</span>);<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);<br>        }<br><br>        <span class="hljs-keyword">return</span> result;<br>    }<br><br>    <span class="hljs-comment">//本例是fallback</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handlerFallback</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, Throwable e)</span> {<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id, <span class="hljs-string">"null"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">444</span>, <span class="hljs-string">"兜底异常handlerFallback,exception内容  "</span> + e.getMessage(), payment);<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><p>参数异常 - <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a></p><p>空指针异常 - <a href="http://localhost:84/consumer/fallback/5">http://localhost:84/consumer/fallback/5</a></p><p><strong>页面返回结果</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">{<span class="hljs-string">"code"</span>:444,<span class="hljs-string">"message"</span>:<span class="hljs-string">"兜底异常nandlerFal1back, exception内容illegalkrgumentEBxceptiorn,非法参数异常……"</span>,<span class="hljs-string">"data"</span>:{<span class="hljs-string">"id"</span>:4,<span class="hljs-string">"seria:"</span>null<span class="hljs-string">"}}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Sentinel-服务熔断只配置-blockHandler"><a href="#Sentinel-服务熔断只配置-blockHandler" class="headerlink" title="Sentinel 服务熔断只配置 blockHandler"></a>Sentinel 服务熔断只配置 blockHandler</h2><p>blockHandler 只负责 <strong>sentinel 控制台配置违规</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://nacos-payment-provider"</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/consumer/fallback/{id}"</span>)<br>    <span class="hljs-comment">//@SentinelResource(value = "fallback") //没有配置</span><br>    <span class="hljs-comment">//@SentinelResource(value = "fallback",fallback = "handlerFallback") //fallback只负责业务异常</span><br>    <span class="hljs-meta">@SentinelResource</span> (value = <span class="hljs-string">"fallback"</span>, blockHandler = <span class="hljs-string">"blockHandler"</span>) <span class="hljs-comment">//blockHandler只负责sentinel控制台配置违规</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> {<br>        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">"/paymentSQL/"</span> + id, CommonResult.class, id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">"IllegalArgumentException,非法参数异常...."</span>);<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);<br>        }<br><br>        <span class="hljs-keyword">return</span> result;<br>    }<br>    <span class="hljs-comment">//本例是fallback</span><br><span class="hljs-comment">/*    public CommonResult handlerFallback(@PathVariable  Long id,Throwable e) {</span><br><span class="hljs-comment">        Payment payment = new Payment(id,"null");</span><br><span class="hljs-comment">        return new CommonResult&lt;&gt;(444,"兜底异常handlerFallback,exception内容  "+e.getMessage(),payment);</span><br><span class="hljs-comment">    }*/</span><br><br>    <span class="hljs-comment">//本例是blockHandler</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">blockHandler</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, BlockException blockException)</span> {<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id, <span class="hljs-string">"null"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">445</span>, <span class="hljs-string">"blockHandler-sentinel限流,无此流水: blockException  "</span> + blockException.getMessage(), payment);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><p>参数异常 - <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a></p><p>空指针异常 - <a href="http://localhost:84/consumer/fallback/5">http://localhost:84/consumer/fallback/5</a></p><p>以上两个异常均为 springboot 的 error 页面，只有 sentinel 限流才会转入 blockHandler</p><h2 id="Sentinel-服务熔断-fallback-和-blockHandler-都配置"><a href="#Sentinel-服务熔断-fallback-和-blockHandler-都配置" class="headerlink" title="Sentinel 服务熔断 fallback 和 blockHandler 都配置"></a>Sentinel 服务熔断 fallback 和 blockHandler 都配置</h2><p>若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出 BlockException 时只会进入 blockHandler 处理逻辑。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVICE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"http://nacos-payment-provider"</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/consumer/fallback/{id}"</span>)<br>    <span class="hljs-comment">//@SentinelResource(value = "fallback") //没有配置</span><br>    <span class="hljs-comment">//@SentinelResource(value = "fallback",fallback = "handlerFallback") //fallback只负责业务异常</span><br>    <span class="hljs-comment">//@SentinelResource(value = "fallback",blockHandler = "blockHandler") //blockHandler只负责sentinel控制台配置违规</span><br>    <span class="hljs-meta">@SentinelResource</span> (value = <span class="hljs-string">"fallback"</span>, fallback = <span class="hljs-string">"handlerFallback"</span>, blockHandler = <span class="hljs-string">"blockHandler"</span>)<br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> {<br>        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="hljs-string">"/paymentSQL/"</span> + id, CommonResult.class, id);<br><br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-number">4</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">"IllegalArgumentException,非法参数异常...."</span>);<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.getData() == <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);<br>        }<br><br>        <span class="hljs-keyword">return</span> result;<br>    }<br><br>    <span class="hljs-comment">//本例是fallback</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">handlerFallback</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, Throwable e)</span> {<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id, <span class="hljs-string">"null"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">444</span>, <span class="hljs-string">"兜底异常handlerFallback,exception内容  "</span> + e.getMessage(), payment);<br>    }<br><br>    <span class="hljs-comment">//本例是blockHandler</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">blockHandler</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, BlockException blockException)</span> {<br>        <span class="hljs-type">Payment</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id, <span class="hljs-string">"null"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">445</span>, <span class="hljs-string">"blockHandler-sentinel限流,无此流水: blockException  "</span> + blockException.getMessage(), payment);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><p>参数异常 - <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a></p><p>空指针异常 - <a href="http://localhost:84/consumer/fallback/5">http://localhost:84/consumer/fallback/5</a></p><h2 id="Sentinel-服务熔断-exceptionsToIgnore"><a href="#Sentinel-服务熔断-exceptionsToIgnore" class="headerlink" title="Sentinel 服务熔断 exceptionsToIgnore"></a>Sentinel 服务熔断 exceptionsToIgnore</h2><p>exceptionsToIgnore，忽略指定异常，即这些异常不用兜底方法处理。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span>    <br><br>    ...<br><br><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/consumer/fallback/{id}"</span>)<br><span class="hljs-meta">@SentinelResource</span> (value = <span class="hljs-string">"fallback"</span>, fallback = <span class="hljs-string">"handlerFallback"</span>, blockHandler = <span class="hljs-string">"blockHandler"</span>,<br>        exceptionsToIgnore = {IllegalArgumentException.class})<span class="hljs-comment">//&lt;-------------</span><br><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">fallback</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span><br>        {<br>        CommonResult&lt;Payment&gt; result=restTemplate.getForObject(SERVICE_URL+<span class="hljs-string">"/paymentSQL/"</span>+id,CommonResult.class,id);<br><br>        <span class="hljs-keyword">if</span>(id==<span class="hljs-number">4</span>){<br>        <span class="hljs-comment">//exceptionsToIgnore属性有IllegalArgumentException.class，</span><br>        <span class="hljs-comment">//所以IllegalArgumentException不会跳入指定的兜底程序。</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">"IllegalArgumentException,非法参数异常...."</span>);<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result.getData()==<span class="hljs-literal">null</span>){<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">"NullPointerException,该ID没有对应记录,空指针异常"</span>);<br>        }<br><br>        <span class="hljs-keyword">return</span> result;<br>        }<br><br>        ...<br>        }<br></code></pre></td></tr></tbody></table></figure><h2 id="Sentinel-服务熔断-OpenFeign"><a href="#Sentinel-服务熔断-OpenFeign" class="headerlink" title="Sentinel 服务熔断 OpenFeign"></a>Sentinel 服务熔断 OpenFeign</h2><p><strong>修改 84 模块</strong></p><ul><li>84 消费者调用提供者 9003</li><li>Feign 组件一般是消费侧</li></ul><ol><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringCloud openfeign --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 激活Sentinel对Feign的支持</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>业务类接口</p><p>带 <code>@Feignclient</code> 注解的业务接口，<code>fallback = PaymentFallbackService.class</code></p><p><strong>PaymentService</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-meta">@FeignClient(value = "nacos-payment-provider",fallback = PaymentFallbackService.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentService</span><br>{<br>    <span class="hljs-meta">@GetMapping(value = "/paymentSQL/{id}")</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">paymentSQL</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Long id)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>PaymentFallbackService</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.CommonResult;<br><span class="hljs-keyword">import</span> com.atguigu.springcloud.entities.Payment;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentFallbackService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PaymentService</span> {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">paymentSQL</span><span class="hljs-params">(Long id)</span><br>    {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">44444</span>,<span class="hljs-string">"服务降级返回,---PaymentFallbackService"</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payment</span>(id,<span class="hljs-string">"errorSerial"</span>));<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleBreakerController</span> {<br><br>    ...<br>    <br><span class="hljs-comment">//==================OpenFeign</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentService paymentService;<br><br>    <span class="hljs-meta">@GetMapping(value = "/consumer/paymentSQL/{id}")</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title function_">paymentSQL</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable("id")</span> Long id)</span><br>    {<br>        <span class="hljs-keyword">return</span> paymentService.paymentSQL(id);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">//《————————————————————————————</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderNacosMain84</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>      SpringApplication.run(OrderNacosMain84.class, args);<br> }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><p><a href="http://localhost:84/consumer/paymentSQL/1">http://localhost:84/consumer/paymentSQL/1</a></p><p>测试 84 调用 9003/9004，此时故意关闭 9003/9004 微服务提供者，<strong>84 消费侧自动降级</strong>，不会被耗死。</p></li></ol><h2 id="熔断框架比较"><a href="#熔断框架比较" class="headerlink" title="熔断框架比较"></a>熔断框架比较</h2><table><thead><tr><th>-</th><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th></tr></thead><tbody><tr><td> 离策略</td><td>信号量隔离（并发线程数限流）</td><td>线程池隔商 / 信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数</td><td>基于异常比率</td><td>基于异常比率、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td> 动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td> Rate Limiter</td></tr><tr><td> 流量整形</td><td>支持预热模式匀速器模式、预热排队模式</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、查看秒级监控，机器发观等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h2 id="Sentinel-持久化规则"><a href="#Sentinel-持久化规则" class="headerlink" title="Sentinel 持久化规则"></a>Sentinel 持久化规则</h2><p><strong>是什么</strong></p><p>一旦我们重启应用，sentinel 规则将消失，生产环境需要将配置规则进行持久化。</p><p><strong>怎么用</strong></p><p>将限流配置规则持久化进 Nacos 保存，只要刷新 8401 某个 rest 地址，sentinel 控制台的流控规则就能看到，只要 Nacos 里面的配置不删除，针对 8401 上 sentinel 上的流控规则持续有效。</p><p><strong>步骤</strong></p><ol><li><p>修改 cloudalibaba-sentinel-service8401</p></li><li><p>修改 pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringCloud ailibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改 yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8401</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloudalibaba-sentinel-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span> <span class="hljs-comment">#配置Sentinel dashboard地址</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8719</span> <span class="hljs-comment">#sentinel后台通信端口，被占用默认+1</span><br>      <span class="hljs-attr">datasource:</span> <span class="hljs-comment">#&lt;---------------------------关注点，添加Nacos数据源配置</span><br>        <span class="hljs-attr">ds1:</span><br>          <span class="hljs-attr">nacos:</span><br>            <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>            <span class="hljs-attr">dataId:</span> <span class="hljs-string">cloudalibaba-sentinel-service</span><br>            <span class="hljs-attr">groupId:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>            <span class="hljs-attr">data-type:</span> <span class="hljs-string">json</span><br>            <span class="hljs-attr">rule-type:</span> <span class="hljs-string">flow</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">'*'</span><br><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 激活Sentinel对Feign的支持</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>添加 Nacos 业务规则配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Sentinel%E6%8C%81%E4%B9%85%E5%8C%96.png"></p><p>配置内容解析</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"resource"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/rateLimit/byUrl"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"IimitApp"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"default"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"grade"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"count"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">"strategy"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"controlBehavior"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"clusterMode"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">}</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></tbody></table></figure><ul><li>resource：资源名称；</li><li>limitApp：来源应用；</li><li>grade：阈值类型，0 表示线程数，1 表示 QPS；</li><li>count：单机阈值；</li><li>strategy：流控模式，0 表示直接，1 表示关联，2 表示链路；</li><li>controlBehavior：流控效果，0 表示快速失败，1 表示 Warm Up，2 表示排队等待；</li><li>clusterMode：是否集群。</li></ul></li><li><p>启动 8401 后刷新 sentinel 发现业务规则有了</p></li><li><p>快速访问测试接口 - <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a> - 页面返回 <code>Blocked by Sentinel (flow limiting)</code></p></li><li><p>停止 8401 再看 sentinel - 停机后发现流控规则没有了</p></li><li><p>重新启动 8401 再看 sentinel</p><ul><li>没有出现流控规则</li><li>多次调用 - <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></li><li> 重新配置出现了，持久化验证通过</li></ul></li></ol><h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><h2 id="分布式事务问题由来"><a href="#分布式事务问题由来" class="headerlink" title="分布式事务问题由来"></a>分布式事务问题由来</h2><p>分布式前</p><ul><li>单机单库没这个问题</li><li>从 1:1 -&gt; 1:N -&gt; N:N</li></ul><p>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务操作需要调用三三 个服务来完成。此时<strong>每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证</strong>。</p><p>一句话：<strong>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</strong>。</p><h2 id="Seata简介"><a href="#Seata简介" class="headerlink" title="Seata简介"></a>Seata 简介</h2><p><a href="http://seata.io/zh-cn/">官方网址</a></p><p><strong>是什么</strong></p><p>Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p><p><strong>能干嘛</strong></p><p>一个典型的分布式事务过程</p><p>分布式事务处理过程的一 ID + 三组件模型：</p><ul><li>Transaction ID XID 全局唯一的事务 ID</li><li> 三组件概念<ul><li> TC (Transaction Coordinator) - 事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚。</li><li>TM (Transaction Manager) - 事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li><li>RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与 TC 交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul></li></ul><p><strong>处理过程</strong></p><ol><li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；</li><li>XID 在微服务调用链路的上下文中传播；</li><li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</li><li>TM 向 TC 发起针对 XID 的全局提交或回滚决议；</li><li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</li></ol><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Seata%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B.png"></p><h2 id="Seata-之原理简介"><a href="#Seata-之原理简介" class="headerlink" title="Seata 之原理简介"></a>Seata 之原理简介</h2><p>2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。</p><p>Simple Extensible Autonomous Transaction Architecture，简单可扩展自治事务框架。</p><p>2020 起始，用 1.0 以后的版本。Alina Gingertail</p><p><strong>分布式事务的执行流程</strong></p><ul><li>TM 开启分布式事务 (TM 向 TC 注册全局事务记录) ;</li><li> 按业务场景，编排数据库、服务等事务内资源 (RM 向 TC 汇报资源准备状态) ;</li><li>TM 结束分布式事务，事务一阶段结束 (TM 通知 TC 提交 / 回滚分布式事务) ;</li><li>TC 汇总事务信息，决定分布式事务是提交还是回滚；</li><li>TC 通知所有 RM 提交 / 回滚资源，事务二阶段结束。</li></ul><p><strong>AT 模式如何做到对业务的无侵入</strong></p><ul><li><p>是什么</p><blockquote><p><strong>前提</strong></p><ul><li>基于支持本地 ACID 事务的关系型数据库。</li><li>Java 应用，通过 JDBC 访问数据库。</li></ul><p><strong>整体机制</strong></p><p>两阶段提交协议的演变：</p><ul><li><p>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</p></li><li><p>二阶段：</p><ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul></blockquote></li><li><p>一阶段加载 在一阶段，Seata 会拦截 “业务 SQL”</p><ol><li>解析 SQL 语义，找到 “业务 SQL” 要更新的业务数据，在业务数据被更新前，将其保存成”before image”</li><li> 执行 “业务 SQL” 更新业务数据，在业务数据更新之后，其保存成 “after image”，最后生成行锁。</li></ol><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Seata%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5.png"></p></li><li><p>二阶段提交</p><p>二阶段如果顺利提交的话，因为 “业务 SQL” 在一阶段已经提交至数据库，所以 Seata 框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Seata%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.png"></p></li><li><p>二阶段回滚 二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的 “业务 SQL”，还原业务数据。</p><p>回滚方式便是用 “before image” 还原业务数据；但在还原前要首先要校验脏写，对比 “数据库当前业务数据” 和 “after image”。</p><p>如果两份数据完全一致就说明没有脏写， 可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理。</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Seata%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E5%9B%9E%E6%BB%9A.png"></p></li></ul><h2 id="Seata-Server-安装"><a href="#Seata-Server-安装" class="headerlink" title="Seata-Server 安装"></a>Seata-Server 安装</h2><p><strong>去哪下</strong></p><p>发布说明: <a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><p><strong>怎么用</strong></p><p>本地 <code>@Transactional</code></p><p>全局 <code>@GlobalTransactional</code></p><p><strong>SEATA 的分布式交易解决方案</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/SpringCloud_Seata%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%A4%E6%98%93%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png"></p><p>我们只需要使用一个 <code>@GlobalTransactional</code> 注解在业务方法上:</p><p><strong>Seata-Server 安装</strong></p><p><a href="http://seata.io/zh-cn/">官网地址</a></p><p>下载版本 - 1.2.0</p><p>seata-server-1.2.0.zip 解压到指定目录并修改 conf 目录下的 file.conf 配置文件</p><p>先备份原始 file.conf 文件</p><p>主要修改：自定义事务组名称 + 事务日志存储模式为 db + 数据库连接信息</p><p><strong>store 模块</strong></p><p>把 <code>mode = "file"</code> 改成 <code>mode = "db"</code></p><p>替换自己的 mysql 数据库的用户密码</p><p>mysql8 以上版本在 url 中加上<strong>时区</strong>，driver 改为：<code>driverClassName = "com.mysql.cj.jdbc.Driver"</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## transaction log store, only used in seata-server</span><br>store {<br>  <span class="hljs-comment">## store mode: file、db、redis</span><br>  mode = <span class="hljs-string">"db"</span><br><br> ...<br><br>  <span class="hljs-comment">## database store property</span><br>  db {<br>    <span class="hljs-comment">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span><br>    datasource = <span class="hljs-string">"druid"</span><br>    <span class="hljs-comment">## mysql/oracle/postgresql/h2/oceanbase etc.</span><br>    dbType = <span class="hljs-string">"mysql"</span><br>    driverClassName = <span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span><br>    url = <span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/seata?serverTimezone=Asia/Shanghai"</span><br>    user = <span class="hljs-string">"root"</span><br>    password = <span class="hljs-string">"root"</span><br>    minConn = 5<br>    maxConn = 100<br>    globalTable = <span class="hljs-string">"global_table"</span><br>    branchTable = <span class="hljs-string">"branch_table"</span><br>    lockTable = <span class="hljs-string">"lock_table"</span><br>    queryLimit = 100<br>    maxWait = 5000<br>  }<br><br> ...<br><br>}<br></code></pre></td></tr></tbody></table></figure><hr><p>mysql 数据库新建库 seata，在 seata 库里建表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE seata;<br>USE seata;<br><span class="hljs-comment">-- the table to store GlobalSession data</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `global_table`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `global_table`<br>(<br>    `xid`                       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `transaction_id`            <span class="hljs-type">BIGINT</span>,<br>    `status`                    TINYINT      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `application_id`            <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `transaction_service_group` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `transaction_name`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>),<br>    `timeout`                   <span class="hljs-type">INT</span>,<br>    `begin_time`                <span class="hljs-type">BIGINT</span>,<br>    `application_data`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>),<br>    `gmt_create`                DATETIME,<br>    `gmt_modified`              DATETIME,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`xid`),<br>    KEY `idx_gmt_modified_status` (`gmt_modified`, `status`),<br>    KEY `idx_transaction_id` (`transaction_id`)<br>);<br><br><span class="hljs-comment">-- the table to store BranchSession data</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `branch_table`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `branch_table`<br>(<br>    `branch_id`         <span class="hljs-type">BIGINT</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `xid`               <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `transaction_id`    <span class="hljs-type">BIGINT</span>,<br>    `resource_group_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `resource_id`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>),<br>    `lock_key`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>),<br>    `branch_type`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">8</span>),<br>    `status`            TINYINT,<br>    `client_id`         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>),<br>    `application_data`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>),<br>    `gmt_create`        DATETIME,<br>    `gmt_modified`      DATETIME,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`branch_id`),<br>    KEY `idx_xid` (`xid`)<br>);<br><br><span class="hljs-comment">-- the table to store lock data</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `lock_table`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `lock_table`<br>(<br>    `row_key`        <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `xid`            <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">96</span>),<br>    `transaction_id` LONG,<br>    `branch_id`      LONG,<br>    `resource_id`    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>),<br>    `table_name`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    `pk`             <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">36</span>),<br>    `gmt_create`     DATETIME,<br>    `gmt_modified`   DATETIME,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`row_key`)<br>);<br><br></code></pre></td></tr></tbody></table></figure><hr><p>修改 seata-server-1.4.0\seata\conf 目录下的 registry.conf 配置文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">registry {<br>  <span class="hljs-comment"># 改用为nacos</span><br>  <span class="hljs-comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br>  <span class="hljs-built_in">type</span> = <span class="hljs-string">"nacos"</span><br><br>  nacos {<br>    application = <span class="hljs-string">"seata-server"</span><br>    serverAddr = <span class="hljs-string">"127.0.0.1:8848"</span><br>    group = <span class="hljs-string">"SEATA_GROUP"</span><br>    namespace = <span class="hljs-string">""</span><br>    cluster = <span class="hljs-string">"default"</span><br>    username = <span class="hljs-string">"填写nacos用户名"</span><br>    password = <span class="hljs-string">"填写nacos密码"</span><br>  }<br>  ...<br>}<br><br>config {<br>  <span class="hljs-comment"># file、nacos 、apollo、zk、consul、etcd3</span><br>  <span class="hljs-built_in">type</span> = <span class="hljs-string">"nacos"</span><br><br>  nacos {<br>    serverAddr = <span class="hljs-string">"127.0.0.1:8848"</span><br>    namespace = <span class="hljs-string">""</span><br>    group = <span class="hljs-string">"SEATA_GROUP"</span><br>    username = <span class="hljs-string">"nacos"</span><br>    password = <span class="hljs-string">"nacos"</span><br>  }<br>  ...<br>}<br></code></pre></td></tr></tbody></table></figure><p>目的是：指明注册中心为 nacos，及修改 nacos 连接信息</p><hr><p><strong>从 <a href="https://github.com/seata/seata/tree/develop/script/config-center">config-center</a> 下载 config.txt 文件，下载完成后修改<br>config.txt , 并把 config.txt 放在 seata 的根目录下。</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">service.vgroupMapping.tx-group=default<br><br>store.db.datasource=druid<br>store.db.dbType=mysql<br>store.db.driverClassName=com.mysql.cj.jdbc.Driver<br>store.db.url=jdbc:mysql://127.0.0.1:3306/seata?useUnicode=<span class="hljs-literal">true</span>&amp;rewriteBatchedStatements=<span class="hljs-literal">true</span>&amp;serverTimezone=Asia/Shanghai<br>store.db.user=root<br>store.db.password=root<br></code></pre></td></tr></tbody></table></figure><p>这里说一下 <code>service.vgroupMapping.default_tx_group=default</code></p><p><code>default_tx_group</code> 必须与项目 yml 配置中的的 <code>tx-service-group</code> 保持一致。</p><p><strong>然后从 <a href="https://github.com/seata/seata/tree/develop/script/config-center">config-center</a> 下载 nacos-config.sh 文件，并把<br>nacos-config.sh 放在 seata 的 conf 目录下。</strong></p><hr><p>先启动 Nacos 端口号 8848 nacos\bin\startup.cmd</p><p>再启动 seata-server - seata-server-1.4.0\seata\bin\seata-server.bat</p><p>然后执行 nacos-config.sh</p><p><code>sh nacos-config.sh -h localhost -p 8848 -g SEATA_GROUP -u nacos -w nacos</code></p><blockquote><p><strong>说明：</strong></p><p>-h: nacos 的 hostname</p><p>-p: nacos 的端口</p><p>-g: 配置添加到哪个 group 下 默认是 SEATA_GROUP</p><p>-t: 配置添加到哪个 namespace 下 如果是 public 可省略</p><p>-u: nacos 的 username</p><p>-w: nacos 的 password</p></blockquote><h2 id="Seata-业务数据库准备"><a href="#Seata-业务数据库准备" class="headerlink" title="Seata 业务数据库准备"></a>Seata 业务数据库准备</h2><p>以下演示都需要先启动 Nacos 后启动 Seata, 保证两个都 OK。</p><p>分布式事务业务说明</p><p>这里我们会创建三个服务，一个订单服务，一个库存服务，一个账户服务。</p><p>当用户下单时，会在订单服务中创建一个订单，然后通过远程调用库存服务来扣减下单商品的库存，再通过远程调用账户服务来扣减用户账户里面的余额，最后在订单服务中修改订单状态为已完成。</p><p>该操作跨越三个数据库，有两次远程调用，很明显会有分布式事务问题。</p><p><strong>一言蔽之</strong>，下订单 —&gt; 扣库存 —&gt; 减账户 (余额)。</p><p>创建业务数据库</p><ul><li>seata_ order：存储订单的数据库；</li><li>seata_ storage：存储库存的数据库；</li><li>seata_ account：存储账户信息的数据库。</li></ul><hr><p><strong>建库 SQL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE seata_order;<br><span class="hljs-keyword">CREATE</span> DATABASE seata_storage;<br><span class="hljs-keyword">CREATE</span> DATABASE seata_account;<br></code></pre></td></tr></tbody></table></figure><p><strong>按照上述 3 库分别建对应业务表</strong></p><ul><li><p>seata_order 库下建 t_order 表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE seata_order;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order<br>(<br>    `id`         <span class="hljs-type">BIGINT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `user_id`    <span class="hljs-type">BIGINT</span>(<span class="hljs-number">11</span>)     <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'用户id'</span>,<br>    `product_id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">11</span>)     <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'产品id'</span>,<br>    `count`      <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)        <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'数量'</span>,<br>    `money`      <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">11</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'金额'</span>,<br>    `status`     <span class="hljs-type">INT</span>(<span class="hljs-number">1</span>)         <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'订单状态: 0:创建中; 1:已完结'</span><br>) ENGINE <span class="hljs-operator">=</span> INNODB<br>  AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>    t_order;<br></code></pre></td></tr></tbody></table></figure></li><li><p>seata_storage 库下建 t_storage 表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE seata_storage;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_storage<br>(<br>    `id`         <span class="hljs-type">BIGINT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `product_id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'产品id'</span>,<br>    `total`      <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)    <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'总库存'</span>,<br>    `used`       <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)    <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'已用库存'</span>,<br>    `residue`    <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)    <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'剩余库存'</span><br>) ENGINE <span class="hljs-operator">=</span> INNODB<br>  AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    seata_storage.t_storage(`id`, `product_id`, `total`, `used`, `residue`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'100'</span>, <span class="hljs-string">'0'</span>, <span class="hljs-string">'100'</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>    t_storage;<br></code></pre></td></tr></tbody></table></figure></li><li><p>seata_account 库下建 t_account 表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE seata_account;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_account<br>(<br>    `id`      <span class="hljs-type">BIGINT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY COMMENT <span class="hljs-string">'id'</span>,<br>    `user_id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">11</span>)     <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'用户id'</span>,<br>    `total`   <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'总额度'</span>,<br>    `used`    <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'已用余额'</span>,<br>    `residue` <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> COMMENT <span class="hljs-string">'剩余可用额度'</span><br>) ENGINE <span class="hljs-operator">=</span> INNODB<br>  AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    seata_account.t_account(`id`, `user_id`, `total`, `used`, `residue`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1000'</span>, <span class="hljs-string">'0'</span>, <span class="hljs-string">'1000'</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>    t_account;<br></code></pre></td></tr></tbody></table></figure></li></ul><hr><p><strong>按照上述 3 库分别建对应的回滚日志表</strong></p><ul><li><p>订单 - 库存 - 账户 3 个库下<strong>都需要建各自的回滚日志表</strong></p></li><li><p>建表 SQL</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- the table to store seata xid data</span><br><span class="hljs-comment">-- 0.7.0+ add context</span><br><span class="hljs-comment">-- you must to init this sql for you business databese. the seata server not need it.</span><br><span class="hljs-comment">-- 此脚本必须初始化在你当前的业务数据库中，用于AT 模式XID记录。与server端无关（注：业务数据库）</span><br><span class="hljs-comment">-- 注意此处0.3.0+ 增加唯一索引 ux_undo_log</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `undo_log`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `undo_log`<br>(<br>    `id`            <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>)   <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `branch_id`     <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>)   <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `xid`           <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `context`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `rollback_info` LONGBLOB     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `log_status`    <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `log_created`   DATETIME     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `log_modified`  DATETIME     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `ext`           <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>    <span class="hljs-keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`, `branch_id`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB<br>  AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="Seata-之-Order-Module-配置搭建"><a href="#Seata-之-Order-Module-配置搭建" class="headerlink" title="Seata 之 Order-Module 配置搭建"></a>Seata 之 Order-Module 配置搭建</h2><p>下订单 -&gt; 减库存 -&gt; 扣余额 -&gt; 改（订单）状态</p><ol><li><p>新建模块 - seata-order-service2001</p></li><li><p>修改 pom.xml</p><p>剔除自带 seata 版本，引入自己的 seata 版本</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--seata--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>写 yaml</p><p>自定义事务组名称需要与 seata-server 中的对应</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">2001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">seata-order-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/seata_order?serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">io:</span><br>      <span class="hljs-attr">seata:</span> <span class="hljs-string">info</span><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapperLocations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br><br><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">tx-group</span><br>  <span class="hljs-attr">enable-auto-data-source-proxy:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>file.conf</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## transaction log store, only used in seata-server</span><br>service {<br>  <span class="hljs-comment">#transaction service group mapping</span><br>  vgroupMapping.tx-group = <span class="hljs-string">"default"</span><br>}<br><br>store {<br>  <span class="hljs-comment">## store mode: file、db、redis</span><br>  mode = <span class="hljs-string">"db"</span><br><br>  <span class="hljs-comment">## file store property</span><br>  file {<br>    <span class="hljs-comment">## store location dir</span><br>    <span class="hljs-built_in">dir</span> = <span class="hljs-string">"sessionStore"</span><br>    <span class="hljs-comment"># branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br>    maxBranchSessionSize = 16384<br>    <span class="hljs-comment"># globe session size , if exceeded throws exceptions</span><br>    maxGlobalSessionSize = 512<br>    <span class="hljs-comment"># file buffer size , if exceeded allocate new buffer</span><br>    fileWriteBufferCacheSize = 16384<br>    <span class="hljs-comment"># when recover batch read size</span><br>    sessionReloadReadSize = 100<br>    <span class="hljs-comment"># async, sync</span><br>    flushDiskMode = async<br>  }<br><br>  <span class="hljs-comment">## database store property</span><br>  db {<br>    <span class="hljs-comment">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span><br>    datasource = <span class="hljs-string">"druid"</span><br>    <span class="hljs-comment">## mysql/oracle/postgresql/h2/oceanbase etc.</span><br>    dbType = <span class="hljs-string">"mysql"</span><br>    driverClassName = <span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span><br>    url = <span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/seata?serverTimezone=Asia/Shanghai"</span><br>    user = <span class="hljs-string">"root"</span><br>    password = <span class="hljs-string">"root"</span><br>    minConn = 5<br>    maxConn = 100<br>    globalTable = <span class="hljs-string">"global_table"</span><br>    branchTable = <span class="hljs-string">"branch_table"</span><br>    lockTable = <span class="hljs-string">"lock_table"</span><br>    queryLimit = 100<br>    maxWait = 5000<br>  }<br><br>  <span class="hljs-comment">## redis store property</span><br>  redis {<br>    host = <span class="hljs-string">"127.0.0.1"</span><br>    port = <span class="hljs-string">"6379"</span><br>    password = <span class="hljs-string">""</span><br>    database = <span class="hljs-string">"0"</span><br>    minConn = 1<br>    maxConn = 10<br>    maxTotal = 100<br>    queryLimit = 100<br>  }<br><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>registry.conf</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">registry {<br>  <span class="hljs-comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br>  <span class="hljs-built_in">type</span> = <span class="hljs-string">"nacos"</span><br>  loadBalance = <span class="hljs-string">"RandomLoadBalance"</span><br>  loadBalanceVirtualNodes = 10<br><br>  nacos {<br>    application = <span class="hljs-string">"seata-server"</span><br>    serverAddr = <span class="hljs-string">"127.0.0.1:8848"</span><br>    group = <span class="hljs-string">"SEATA_GROUP"</span><br>    namespace = <span class="hljs-string">""</span><br>    cluster = <span class="hljs-string">"default"</span><br>    username = <span class="hljs-string">"nacos"</span><br>    password = <span class="hljs-string">"nacos"</span><br>  }<br>}<br><br>config {<br>  <span class="hljs-comment"># file、nacos 、apollo、zk、consul、etcd3</span><br>  <span class="hljs-built_in">type</span> = <span class="hljs-string">"nacos"</span><br><br>  nacos {<br>    serverAddr = <span class="hljs-string">"127.0.0.1:8848"</span><br>    namespace = <span class="hljs-string">""</span><br>    group = <span class="hljs-string">"SEATA_GROUP"</span><br>    username = <span class="hljs-string">"nacos"</span><br>    password = <span class="hljs-string">"nacos"</span><br>  }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span><br>{<br>   <span class="hljs-keyword">private</span> Long id;<br><br>   <span class="hljs-keyword">private</span> Long userId;<br><br>   <span class="hljs-keyword">private</span> Long productId;<br><br>   <span class="hljs-keyword">private</span> Integer count;<br><br>   <span class="hljs-keyword">private</span> BigDecimal money;<br><br>   <span class="hljs-keyword">private</span> Integer status; <span class="hljs-comment">//订单状态：0：创建中；1：已完结</span><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>CommonResult</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonResult</span>&lt;T&gt; {<br>   <span class="hljs-keyword">private</span> Integer code;<br>   <span class="hljs-keyword">private</span> String message;<br>   <span class="hljs-keyword">private</span> T data;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommonResult</span> <span class="hljs-params">(Integer code, String message)</span> {<br>      <span class="hljs-built_in">this</span>(code, message, <span class="hljs-literal">null</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>Dao 接口及实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.dao;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Order;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDao</span><br>{<br>   <span class="hljs-comment">//1 新建订单</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">(Order order)</span>;<br><br>   <span class="hljs-comment">//2 修改订单状态，从零改为1</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">"userId"</span>)</span> Long userId, <span class="hljs-meta">@Param("status")</span> Integer status);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.springcloud.dao.OrderDao"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"BaseResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.zlw.springcloud.pojo.Order"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"user_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"userId"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"product_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"productId"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"count"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"count"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"INTEGER"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"money"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"money"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"DECIMAL"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"status"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"status"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"INTEGER"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"create"</span>&gt;</span><br>insert into<br>t_order (id, user_id, product_id, count, money, status)<br>values<br>(null, #{userId}, #{productId}, #{count}, #{money}, 0);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"update"</span>&gt;</span><br>update t_order<br>set<br>status = 1<br>where<br>    user_id = #{userId}<br>and status = #{status};<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>Service 接口及实现</p><ul><li><p>OrderService</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Order;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span> {<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span> <span class="hljs-params">(Order order)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>OrderServiceImpl</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service.impl;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.dao.OrderDao;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Order;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.AccountService;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.OrderService;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.StorageService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> {<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StorageService storageService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态</span><br><span class="hljs-comment">     * 简单说：下订单-&gt;扣库存-&gt;减余额-&gt;改状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//@GlobalTransactional(name = "create-order",rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span> <span class="hljs-params">(Order order)</span> {<br>        log.info(<span class="hljs-string">"-----&gt;开始新建订单"</span>);<br>        <span class="hljs-comment">//1 新建订单</span><br>        orderDao.create(order);<br><br>        <span class="hljs-comment">//2 扣减库存</span><br>        log.info(<span class="hljs-string">"-----&gt;订单微服务开始调用库存，做扣减Count"</span>);<br>        storageService.decrease(order.getProductId(), order.getCount());<br>        log.info(<span class="hljs-string">"-----&gt;订单微服务开始调用库存，做扣减end"</span>);<br><br>        <span class="hljs-comment">//3 扣减账户</span><br>        log.info(<span class="hljs-string">"-----&gt;订单微服务开始调用账户，做扣减Money"</span>);<br>        accountService.decrease(order.getUserId(), order.getMoney());<br>        log.info(<span class="hljs-string">"-----&gt;订单微服务开始调用账户，做扣减end"</span>);<br><br>        <span class="hljs-comment">//4 修改订单状态，从零到1,1代表已经完成</span><br>        log.info(<span class="hljs-string">"-----&gt;修改订单状态开始"</span>);<br>        orderDao.update(order.getUserId(), <span class="hljs-number">0</span>);<br>        log.info(<span class="hljs-string">"-----&gt;修改订单状态结束"</span>);<br><br>        log.info(<span class="hljs-string">"-----&gt;下订单结束了，O(∩_∩)O哈哈~"</span>);<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>StorageService</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient</span> (value = <span class="hljs-string">"seata-storage-service"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StorageService</span> {<br>    <span class="hljs-meta">@PostMapping</span> (value = <span class="hljs-string">"/storage/decrease"</span>)<br>    CommonResult <span class="hljs-title function_">decrease</span> <span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"productId"</span>)</span> Long productId, <span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"count"</span>) Integer count);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>AccountService</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient</span> (value = <span class="hljs-string">"seata-account-service"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountService</span> {<br>    <span class="hljs-meta">@PostMapping</span> (value = <span class="hljs-string">"/account/decrease"</span>)<br>    CommonResult <span class="hljs-title function_">decrease</span> <span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"userId"</span>)</span> Long userId, <span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"money"</span>) BigDecimal money);<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>Controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Order;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.OrderService;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> OrderService orderService;<br><br>   <span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/order/create"</span>)<br>   <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">create</span> <span class="hljs-params">(Order order)</span> {<br>      orderService.create(order);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">"订单创建成功"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span> (exclude = DataSourceAutoConfiguration.class)<span class="hljs-comment">//取消数据源的自动创建</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeataOrderMainApp2001</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      SpringApplication.run(SeataOrderMainApp2001.class, args);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="Seata-之-Storage-Module-配置搭建"><a href="#Seata-之-Storage-Module-配置搭建" class="headerlink" title="Seata 之 Storage-Module 配置搭建"></a>Seata 之 Storage-Module 配置搭建</h2><p>与 seata-order-service2001 模块大致相同</p><ol><li><p>seata-storage-service2002</p></li><li><p>pom.xml 依赖与 2001 相同</p></li><li><p>yaml 与 2001 大致相同，需要修改端口号以及服务名</p></li><li><p>file.conf 与 2001 相同</p></li><li><p>registry.conf 与 2001 相同</p></li><li><p>实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Storage</span> {<br><br>   <span class="hljs-keyword">private</span> Long id;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 产品id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> Long productId;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 总库存</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> Integer total;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 已用库存</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> Integer used;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 剩余库存</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> Integer residue;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>CommonResult 与 2001 相同</p></li><li><p>Dao 接口及实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.dao;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StorageDao</span> {<br>   <span class="hljs-comment">//扣减库存</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrease</span><span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">"productId"</span>)</span> Long productId, <span class="hljs-meta">@Param("count")</span> Integer count);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.springcloud.dao.StorageDao"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"BaseResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.zlw.springcloud.pojo.Storage"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"product_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"productId"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"total"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"total"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"INTEGER"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"used"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"used"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"INTEGER"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"residue"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"residue"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"INTEGER"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"decrease"</span>&gt;</span><br>      UPDATE<br>            t_storage<br>      SET<br>            used    = used + #{count},<br>            residue = residue - #{count}<br>      WHERE<br>            product_id = #{productId}<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>Service 接口及实现</p><ul><li><p>StorageService</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StorageService</span> {<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 扣减库存</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrease</span><span class="hljs-params">(Long productId, Integer count)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>StorageServiceImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service.impl;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.dao.StorageDao;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.StorageService;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StorageServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StorageService</span> {<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(StorageServiceImpl.class);<br><br>   <span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> StorageDao storageDao;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 扣减库存</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrease</span><span class="hljs-params">(Long productId, Integer count)</span> {<br>      LOGGER.info(<span class="hljs-string">"-------&gt;storage-service中扣减库存开始"</span>);<br>      storageDao.decrease(productId,count);<br>      LOGGER.info(<span class="hljs-string">"-------&gt;storage-service中扣减库存结束"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>Controller</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.dao.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.StorageService;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StorageController</span> {<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StorageService storageService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扣减库存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/storage/decrease"</span>)<br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">decrease</span><span class="hljs-params">(Long productId, Integer count)</span> {<br>        storageService.decrease(productId, count);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>,<span class="hljs-string">"扣减库存成功！"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="11"><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeataStorageMainApp2002</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>      SpringApplication.run(SeataStorageMainApp2002.class, args);<br> }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="Seata-之-Account-Module-说明"><a href="#Seata-之-Account-Module-说明" class="headerlink" title="Seata 之 Account-Module 说明"></a>Seata 之 Account-Module 说明</h2><p>与 seata-order-service2001 模块大致相同</p><ol><li><p>seata- account- service2003</p></li><li><p>pom.xml 依赖与 2001 相同</p></li><li><p>yaml 与 2001 大致相同，需要修改端口号以及服务名</p></li><li><p>file.conf 与 2001 相同</p></li><li><p>registry.conf 与 2001 相同</p></li><li><p>实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> {<br><br>   <span class="hljs-keyword">private</span> Long id;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> Long userId;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 总额度</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> BigDecimal total;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 已用额度</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> BigDecimal used;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 剩余额度</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> BigDecimal residue;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>CommonResult 与 2001 相同</p></li><li><p>Dao 接口及实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.dao;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountDao</span> {<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 扣减账户余额</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrease</span> <span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">"userId"</span>)</span> Long userId, <span class="hljs-meta">@Param</span> (<span class="hljs-string">"money"</span>) BigDecimal money);<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.springcloud.dao.AccountDao"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"BaseResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.zlw.springcloud.pojo.Account"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"user_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"userId"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"total"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"total"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"DECIMAL"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"used"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"used"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"DECIMAL"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"residue"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"residue"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"DECIMAL"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"decrease"</span>&gt;</span><br>      UPDATE t_account<br>      SET<br>      residue = residue - #{money},used = used + #{money}<br>      WHERE<br>      user_id = #{userId};<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>Service 接口及实现</p><ul><li><p>AccountService</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountService</span> {<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 扣减账户余额</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> userId 用户id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> money  金额</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrease</span> <span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"userId"</span>)</span> Long userId, <span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"money"</span>) BigDecimal money);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>AccountServiceImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service.impl;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.dao.AccountDao;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.AccountService;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccountService</span> {<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(AccountServiceImpl.class);<br><br><br>   <span class="hljs-meta">@Resource</span><br>   AccountDao accountDao;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 扣减账户余额</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrease</span><span class="hljs-params">(Long userId, BigDecimal money)</span> {<br>      LOGGER.info(<span class="hljs-string">"-------&gt;account-service中扣减账户余额开始"</span>);<br>      accountDao.decrease(userId,money);<br>      LOGGER.info(<span class="hljs-string">"-------&gt;account-service中扣减账户余额结束"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>Controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.CommonResult;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.AccountService;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountController</span> {<br>   <span class="hljs-meta">@Resource</span><br>   AccountService accountService;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 扣减账户余额</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/account/decrease"</span>)<br>   <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">decrease</span> <span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"userId"</span>)</span> Long userId, <span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"money"</span>) BigDecimal money) {<br>      accountService.decrease(userId, money);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>(<span class="hljs-number">200</span>, <span class="hljs-string">"扣减账户余额成功！"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span> (exclude = DataSourceAutoConfiguration.class)<span class="hljs-comment">//取消数据源的自动创建</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeataAccountMainApp2003</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      SpringApplication.run(SeataAccountMainApp2003.class, args);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="Seata-之-GlobalTransactional-验证"><a href="#Seata-之-GlobalTransactional-验证" class="headerlink" title="Seata 之 @GlobalTransactional 验证"></a>Seata 之 @GlobalTransactional 验证</h2><p>下订单 -&gt; 减库存 -&gt; 扣余额 -&gt; 改（订单）状态</p><p>正常下单 - <a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p>查看数据库数据 - 正确</p><hr><p><strong>超时异常，没加 @GlobalTransactional</strong></p><p>模拟 AccountServiceImpl 添加超时</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service.impl;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.dao.AccountDao;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.AccountService;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccountService</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(AccountServiceImpl.class);<br><br>    <span class="hljs-meta">@Resource</span><br>    AccountDao accountDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扣减账户余额</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrease</span> <span class="hljs-params">(Long userId, BigDecimal money)</span> {<br>        LOGGER.info(<span class="hljs-string">"-------&gt;account-service中扣减账户余额开始"</span>);<br>        <span class="hljs-comment">//模拟超时异常，全局事务回滚</span><br>        <span class="hljs-comment">//暂停几秒钟线程</span><br>        <span class="hljs-keyword">try</span> {<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">20</span>);<br>        } <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>            e.printStackTrace();<br>        }<br>        accountDao.decrease(userId, money);<br>        LOGGER.info(<span class="hljs-string">"-------&gt;account-service中扣减账户余额结束"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>另外，OpenFeign 的调用默认时间是 1s 以内，所以最后会抛异常。</p><p><strong>故障情况</strong></p><ul><li>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为 1</li><li> 而且由于 feign 的重试机制，账户余额还有可能被多次扣减</li></ul><hr><p><strong>超时异常，加了 @GlobalTransactional</strong></p><p>用 @GlobalTransactional 标注 2001 的 OrderServiceImpl 的 create () 方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springcloud.service.impl;<br><br><span class="hljs-keyword">import</span> com.zlw.springcloud.dao.OrderDao;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.pojo.Order;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.AccountService;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.OrderService;<br><span class="hljs-keyword">import</span> com.zlw.springcloud.service.StorageService;<br><span class="hljs-keyword">import</span> io.seata.spring.annotation.GlobalTransactional;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2022/1/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> {<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StorageService storageService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态</span><br><span class="hljs-comment">     * 简单说：下订单-&gt;扣库存-&gt;减余额-&gt;改状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@GlobalTransactional</span> (name = <span class="hljs-string">"create-order"</span>, rollbackFor = Exception.class)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span> <span class="hljs-params">(Order order)</span> {<br>        log.info(<span class="hljs-string">"-----&gt;开始新建订单"</span>);<br>        <span class="hljs-comment">//1 新建订单</span><br>        orderDao.create(order);<br><br>        <span class="hljs-comment">//2 扣减库存</span><br>        log.info(<span class="hljs-string">"-----&gt;订单微服务开始调用库存，做扣减Count"</span>);<br>        storageService.decrease(order.getProductId(), order.getCount());<br>        log.info(<span class="hljs-string">"-----&gt;订单微服务开始调用库存，做扣减end"</span>);<br><br>        <span class="hljs-comment">//3 扣减账户</span><br>        log.info(<span class="hljs-string">"-----&gt;订单微服务开始调用账户，做扣减Money"</span>);<br>        accountService.decrease(order.getUserId(), order.getMoney());<br>        log.info(<span class="hljs-string">"-----&gt;订单微服务开始调用账户，做扣减end"</span>);<br><br>      <span class="hljs-comment">//4 修改订单状态，从零到1,1代表已经完成</span><br>      log.info(<span class="hljs-string">"-----&gt;修改订单状态开始"</span>);<br>      orderDao.update(order.getUserId(), <span class="hljs-number">0</span>);<br>      log.info(<span class="hljs-string">"-----&gt;修改订单状态结束"</span>);<br><br>      log.info(<span class="hljs-string">"-----&gt;下订单结束了，O(∩_∩)O哈哈~"</span>);<br><br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>还是模拟 AccountServiceImpl 添加超时，下单后数据库数据并没有任何改变，记录都添加不进来，<strong>达到出异常，数据库回滚的效果</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/posts/43167/"/>
    <url>/posts/43167/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p><p>多人开发必须要使用版本控制！</p><h2 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h2><p>我们学习的东西，一定是当下最流行的！</p><p>主流的版本控制器有如下这些：</p><ul><li><strong>Git</strong></li><li><strong>SVN</strong>（Subversion）</li><li><strong>CVS</strong>（Concurrent Versions System）</li><li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li><li><strong>TFS</strong>（Team Foundation Server）</li><li>Visual Studio Online</li></ul><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena<br>Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是 Git 与 SVN</p><h2 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h2><ul><li><p><strong>本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS。</p></li><li><p><strong>集中版本控制 SVN</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p></li><li><p><strong>分布式版本控制 Git</strong></p><p>每个人都拥有全部的代码！安全隐患！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时 push<br>到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p></li></ul><h2 id="Git-与-SVN-的主要区别"><a href="#Git-与-SVN-的主要区别" class="headerlink" title="Git 与 SVN 的主要区别"></a>Git 与 SVN 的主要区别</h2><p>SVN<br>是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git 是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件 A，其他人也在电脑上改了文件<br>A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git 可以直接看到更新了哪些代码和文件！</p><p><strong>Git 是目前世界上最先进的分布式版本控制系统。</strong></p><h1 id="Git-环境配置"><a href="#Git-环境配置" class="headerlink" title="Git 环境配置"></a>Git 环境配置</h1><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>打开 <a href="https://git-scm.com/">git 官网</a>，下载 git 对应操作系统的版本。</p><p>所有东西下载慢的话就可以去找镜像！</p><p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><h2 id="启动-Git"><a href="#启动-Git" class="headerlink" title="启动 Git"></a>启动 Git</h2><p>安装成功后在开始菜单中会有 Git 项，菜单下有 3 个程序：任意文件夹下右键也可以看到对应的程序！</p><p><strong>Git Bash：</strong>Unix 与 Linux 风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD：</strong>Windows 风格的命令行</p><p><strong>Git GUI</strong>：图形界面的 Git，不建议初学者使用，尽量先熟悉常用命令</p><h2 id="Git-配置文件"><a href="#Git-配置文件" class="headerlink" title="Git 配置文件"></a>Git 配置文件</h2><p>所有的配置文件，其实都保存在本地！</p><p>查看配置 <code>git config -l</code></p><p>查看不同级别的配置文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看系统config</span><br>git config --system --list　　<br><span class="hljs-comment">#查看当前用户（global）配置</span><br>git config --global  --list<br></code></pre></td></tr></tbody></table></figure><p><strong>Git 相关的配置文件：</strong></p><ol><li><p>Git\etc\gitconfig ：Git 安装目录下的 gitconfig –system 系统级</p></li><li><p>C:\Users\ 用户名 \ .gitconfig 只适用于当前登录用户的配置 –global 全局</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Git_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png"></p><p>这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p></li></ol><h2 id="设置用户名与邮箱（用户标识，必要）"><a href="#设置用户名与邮箱（用户标识，必要）" class="headerlink" title="设置用户名与邮箱（用户标识，必要）"></a>设置用户名与邮箱（用户标识，必要）</h2><p>当你安装 Git 后首先要做的事情是设置你的用户名称和 e-mail 地址。这是非常重要的，因为每次 Git 提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">"xxx"</span>  <span class="hljs-comment">#名称</span><br>git config --global user.email <span class="hljs-string">"xxx"</span>   <span class="hljs-comment">#邮箱</span><br></code></pre></td></tr></tbody></table></figure><p>只需要做一次这个设置，如果你传递了 –global 选项，因为 Git 将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或 e-mail 地址，你可以在该项目中运行该命令而不要 –global<br>选项。总之 –global 为全局配置，不加为某个项目的特定配置。</p><h1 id="Git-基本理论"><a href="#Git-基本理论" class="headerlink" title="Git 基本理论"></a>Git 基本理论</h1><h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区 (Stage/Index)、资源库 (Repository 或 Git Directory)。如果在加上远程的 git 仓库 (Remote<br>Directory) 就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Git_%E4%B8%89%E4%B8%AA%E5%8C%BA%E5%9F%9F.png"></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li> Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li> Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本</li><li> Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是 git 仓库中 HEAD 指向的版本：</p><ul><li>Directory：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。</li><li>WorkSpace：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放 Git 管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入 repo 之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD 只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存 / 恢复 WorkSpace 中的临时状态。</li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>git 的工作流程一般是这样的：</p><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到 git 仓库。</li></ol><p>因此，git 管理的文件有三种状态：已修改（modified）, 已暂存（staged）, 已提交 (committed)</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Git_%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><h1 id="Git-项目搭建"><a href="#Git-项目搭建" class="headerlink" title="Git 项目搭建"></a>Git 项目搭建</h1><h2 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h2><p>工作目录（WorkSpace) 一般就是你希望 Git 帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图 6 个命令：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Git_%E5%85%AD%E4%B8%AA%E5%91%BD%E4%BB%A4.png"></p><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><ol><li><p>创建全新的仓库，需要用 GIT 管理的项目的根目录执行：<code>git init</code></p></li><li><p>去 gitee 或者 github 上克隆一个测试</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:xxx.git<br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="Git-文件操作"><a href="#Git-文件操作" class="headerlink" title="Git 文件操作"></a>Git 文件操作</h1><h2 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 git add 状态变为 Staged.</li><li>Unmodify: 文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified. 如果使用 git rm 移出版本库，则成为 Untracked 文件</li><li> Modified: 文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 staged 状态，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git<br>checkout 即从库中取出文件，覆盖当前修改！</li><li>Staged: 暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified</li></ul><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>上面说文件有 4 种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-comment">#查看所有文件状态</span><br>git status<br><br><span class="hljs-comment"># git add .                  添加所有文件到暂存区</span><br><span class="hljs-comment"># git commit -m "消息内容"    提交暂存区中的内容到本地仓库 -m 提交信息</span><br></code></pre></td></tr></tbody></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立 “.gitignore” 文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#为注释</span><br>*.txt        <span class="hljs-comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br>!lib.txt     <span class="hljs-comment">#但lib.txt除外</span><br>/temp        <span class="hljs-comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br>build/       <span class="hljs-comment">#忽略build/目录下的所有文件</span><br>doc/*.txt    <span class="hljs-comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></code></pre></td></tr></tbody></table></figure><p>模板</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">HELP.md<br>target/<br>!.mvn/wrapper/maven-wrapper.jar<br>!**/src/main/**<br>!**/src/test/**<br><br><span class="hljs-comment">### STS ###</span><br>.apt_generated<br>.classpath<br>.factorypath<br>.project<br>.settings<br>.springBeans<br>.sts4-cache<br>.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">### IntelliJ IDEA ###</span><br>.idea<br>*.iws<br>*.iml<br>*.ipr<br>.mvn<br>mvnw*<br><br><span class="hljs-comment">### NetBeans ###</span><br>/nbproject/private/<br>/nbbuild/<br>/dist/<br>/nbdist/<br>/.nb-gradle/<br>build/<br><br><span class="hljs-comment">### VS Code ###</span><br>.vscode/<br><br><span class="hljs-comment">### generated files ###</span><br>bin/<br>gen/<br><br><span class="hljs-comment">### MAC ###</span><br>.DS_Store<br><br><span class="hljs-comment">### Other ###</span><br>logs/<br><span class="hljs-built_in">log</span><br>temp/<br></code></pre></td></tr></tbody></table></figure><h1 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h1><p><strong>github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的 gitlab 服务器</strong></p><ol><li><p>注册登录码云，完善个人信息</p></li><li><p>设置本机绑定 SSH 公钥，实现免密码登录！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入 C:\Users\Administrator\.ssh 目录</span><br><span class="hljs-comment"># 生成公钥</span><br>ssh-keygen -t -rsa<br></code></pre></td></tr></tbody></table></figure></li><li><p>将公钥信息 public key 添加到码云账户中即可！</p></li><li><p>使用码云创建一个自己的仓库 git-learning</p></li><li><p>克隆到本地</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:only_corn/git-learning.git<br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="IDEA-中集成-Git"><a href="#IDEA-中集成-Git" class="headerlink" title="IDEA 中集成 Git"></a>IDEA 中集成 Git</h1><ol><li>新建项目，绑定 git (即拉取远程仓库)，注意观察 idea 中的变化。</li><li>修改文件，使用 IDEA 操作 git。<ul><li>添加到暂存区</li><li> commit 提交</li><li> push 到远程仓库</li></ul></li><li>提交测试</li></ol><h1 id="说明：GIT-分支"><a href="#说明：GIT-分支" class="headerlink" title="说明：GIT 分支"></a>说明：GIT 分支</h1><p>分支在 GIT 中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><p>git 分支中常用指令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-comment"># 列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-comment"># 删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-comment"># 删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></tbody></table></figure><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p><p>master 主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的 dev 分支上工作，工作完后，比如上要发布，或者说 dev 分支代码稳定后可以合并到主分支 master 上来。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件工程随笔</title>
    <link href="/posts/13858/"/>
    <url>/posts/13858/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>软件开发的难度随着需求的增加而呈现指数增长，但软件需求越来越多，程序往往会越来越难修改。同时随着软件越做越大，开发需要更多的人来参与，若没有一套工程化的程序与管理办法，软件最终会走向失败。</li></ul><h1 id="需求并不简单"><a href="#需求并不简单" class="headerlink" title="需求并不简单"></a>需求并不简单</h1><ul><li>需求并不能只听客户描述，必须深谈</li><li>客户并不可能完全表达清楚需求，需要持续沟通</li><li>软件开发复杂度随需求以几何倍数增加</li></ul><h1 id="需求不仅仅是功能"><a href="#需求不仅仅是功能" class="headerlink" title="需求不仅仅是功能"></a>需求不仅仅是功能</h1><ul><li>还要考虑：效率、网络、安全等</li><li>以上考虑的方面可能会反过来影响到软件的开发</li><li>应该量化指标 eg：在 20 个并发用户下，平均响应时间为 1s</li></ul><h1 id="领域知识"><a href="#领域知识" class="headerlink" title="领域知识"></a>领域知识</h1><ul><li>常常会遇到 “领域知识”（domain knowledge)，要搜集资料了解</li><li>实际工作所积累的经验也很重要</li></ul><h1 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h1><ul><li>文档的书写会影响编程者对于需求的理解与认知</li><li>但需求转换为文字都会引起一定的误差，要通过后期不断沟通来解决</li><li>编写文件使文档标准化</li></ul><h1 id="变是常态"><a href="#变是常态" class="headerlink" title="变是常态"></a>变是常态</h1><ul><li>需求会随时间而改变</li><li>整体而言，需求会越来越收敛</li><li>在编写软件之前，要建立软件全貌，发展企业架构</li><li>控制开发时间</li><li>做好需求管理，尽量不要随意改变软件需求</li></ul><h1 id="文档不可少"><a href="#文档不可少" class="headerlink" title="文档不可少"></a>文档不可少</h1><ul><li>软件开发的无形性（intangible），看不见、摸不着的特性常是实现撰写文档的困难</li><li>最好在软件开发之前编写设计文档</li></ul><h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><ul><li>要遵守规范、配合程序的系统化思维</li><li>不同的软件要有设不同的计原则和方法从而满足非功能需求或其他与质量维护相关的目标</li><li>要学习软件架构知识、设计模式</li></ul><h1 id="应用知识"><a href="#应用知识" class="headerlink" title="应用知识"></a>应用知识</h1><ul><li>当需求确认之后，不同的系统分析会产生不同的系统。分析越好的系统才可以满足目标</li><li>要想分析的好，则要掌握相关 “应用知识”（application knowledge)</li><li> 不仅要经过学习获得，而且要通过长期接触同领域类似软件，并积累应用经验才可</li></ul><h1 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h1><ul><li>好的软件一定要考虑 “用户体验”</li><li> 要考虑到用户的使用环境</li></ul><h1 id="既要做对又要做好"><a href="#既要做对又要做好" class="headerlink" title="既要做对又要做好"></a>既要做对又要做好</h1><ul><li>“做对软件” 是指开发完成的软件功能完全符合需求，同时执行的结果也完全正确</li><li> “做好软件” 是指开发完成的软件执行时不会不稳定，也不会因质量不好而经常闪退</li></ul><h1 id="开发软件的四大关键"><a href="#开发软件的四大关键" class="headerlink" title="开发软件的四大关键"></a>开发软件的四大关键</h1><ul><li>定义出正确的需求</li><li>将需求分析成系统</li><li>发展用户界面设计</li><li>设计符合功能与非功能需求的软件架构</li></ul><h1 id="雏形不靠谱"><a href="#雏形不靠谱" class="headerlink" title="雏形不靠谱"></a>雏形不靠谱</h1><ul><li>雏形是指在软件开发完成前，事先制作用来参考的软件・</li><li>雏形可以让无形的分析设计，变成看得见又可以实验操作的有形的对象</li><li>雏形最重要的目的是在面对特殊需求的挑战 eg：特定非功能需求、界面、关键功能设计需求，由于存在疑惑，因此可以先做出来雏形以帮助探讨问题，进而解决挑战。</li><li>用完就丢弃，不要吝啬</li></ul><h1 id="不只是写程序"><a href="#不只是写程序" class="headerlink" title="不只是写程序"></a>不只是写程序</h1><ul><li>软件开发不只是写程序，还涉及多项不同开发工作与步骤，因此控制 “软件流程” 很重要</li><li>产品的生产制程是有流程的，成为制造流程。由于步骤是一步步往前推进的所以可以称为 “瀑布流程”</li><li> 最简单的软件流程是瀑布流程，缺点是不够敏捷，只有到最后才可以看到结果</li></ul><h1 id="敏捷不容易"><a href="#敏捷不容易" class="headerlink" title="敏捷不容易"></a>敏捷不容易</h1><ul><li>在快速短周期的多次反复程序下，敏捷的软件开发流程可以避免瀑布流程的缺点</li><li>敏捷软件开发过程需要多次反复进行。在此过程中，因为新需求而需要多次反复进行重构之前的架构设计；叠加过程中，也需要不断持续集成测试，确保之前与本次开发的一致与正确</li><li>当软件需求多且复杂，选用任何一种软件开发流程都是问题</li></ul><h1 id="预估跑不掉"><a href="#预估跑不掉" class="headerlink" title="预估跑不掉"></a>预估跑不掉</h1><ul><li>确定需求，用多少人用多久时间要基本明确；过程中会存在许多无形的问题和不确定性</li><li>每次编写软件必须预估</li></ul><h1 id="牵一发、动全身（可扩展性）"><a href="#牵一发、动全身（可扩展性）" class="headerlink" title="牵一发、动全身（可扩展性）"></a>牵一发、动全身（可扩展性）</h1><ul><li>软件设计时，架构上要支持扩展性，特别在面对需求时常变动时</li><li>软件架构上应该尽可能松耦合，不会波及太多其他的程序</li></ul><h1 id="昨天永远是对的（做好软件测试）"><a href="#昨天永远是对的（做好软件测试）" class="headerlink" title="昨天永远是对的（做好软件测试）"></a>昨天永远是对的（做好软件测试）</h1><ul><li>软件交付到客户手上时，一定要经过测试把关，以确保软件符合需求，同时没有错误</li><li>软件开发在不同阶段各有不同的对应测试。例如：个别程序开发时，应该进行个别程序单元功能测试；多个程序集成在一起要进行集成测试，甚至与非功能目标进行有关测试。eg：压力测试、效能测试。</li><li>功能测试成功与否与非功能测试成功无关。</li></ul><h1 id="改-a-错-b"><a href="#改-a-错-b" class="headerlink" title="改 a 错 b"></a>改 a 错 b</h1><ul><li>质量是软件成功与否的关键。没有好的质量就不会有好的软件</li><li>要经过多种不同种类的测试</li><li>当版本更新时候，要测试所有的部分</li></ul><h1 id="质量不是测出来的"><a href="#质量不是测出来的" class="headerlink" title="质量不是测出来的"></a>质量不是测出来的</h1><ul><li>测试不能改善质量，只能帮助检验质量水平。真正质量的改善还是得回归软件设计</li><li>若等到最终软件完成后才进行测试，万一质量无法过关，此时在改善很难</li><li>要落实软件开发步骤，维持每个步骤该有的审核测试和检验。</li></ul><h1 id="软件的生命"><a href="#软件的生命" class="headerlink" title="软件的生命"></a>软件的生命</h1><ul><li>软件从开发、上线使用、退役换新。也需要版本更新，适应系统、数据库</li><li>要做好 “软件生命周期管理”</li></ul><h1 id="一部历史"><a href="#一部历史" class="headerlink" title="一部历史"></a>一部历史</h1><ul><li>要记录之前所有的需求、设计、程序本身等</li><li>做好软件版本控制</li></ul><h1 id="换人"><a href="#换人" class="headerlink" title="换人"></a>换人</h1><ul><li>在软件的生命周期中，开发团队人员变更不可避免，这时就要做好架构笔记</li><li>每个版本都要检查客户需求是否正确</li></ul><h1 id="加人"><a href="#加人" class="headerlink" title="加人"></a>加人</h1><ul><li>软件生命周期维护是一件涉及许多内容的开发工作，新进力量往往需要投入时间理解前述知识才可以逐步投入工作</li><li>新旧成员间的沟通成本增加，初期生产力会大幅升高，所以要加强各方面的沟通</li></ul><h1 id="不能宁错勿慢"><a href="#不能宁错勿慢" class="headerlink" title="不能宁错勿慢"></a>不能宁错勿慢</h1><ul><li>程序开发大部分一般用户无法理解，我们不能宁错勿慢，之后修改错误产生的成本往往会很高</li></ul><h1 id="到底了没（做好功能追踪）"><a href="#到底了没（做好功能追踪）" class="headerlink" title="到底了没（做好功能追踪）"></a>到底了没（做好功能追踪）</h1><ul><li>软件的生命周期中，较大型或较复杂的软件，用户可能会遇到各种各样的不可预期的异常。造成这种现象的原因有很多：需求变更，系统环境改变</li><li>软件生命周期中遇到的多种异常不可避免，要追踪管理异常可能影响的范围</li></ul><h1 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h1><ul><li>生产力较难计算，难以评估工作人员的贡献程度</li><li>程序的质量无法当下呈现，有时只有等到用户使用的时候才可以被发现</li></ul><h1 id="就是要管理"><a href="#就是要管理" class="headerlink" title="就是要管理"></a>就是要管理</h1><ul><li>软件开发是抽象的，但并不是无法落实的</li><li>管理一定要落到实处</li><li>一定要关注成本进度质量</li><li>建立量化程序，发展软件项目管理</li></ul><h1 id="集成躲不掉"><a href="#集成躲不掉" class="headerlink" title="集成躲不掉"></a>集成躲不掉</h1><ul><li><p>大部分的商业软件都要面临这集成</p></li><li><p>软件集成涉及多个层次，包含数据、流量、应用、界面层面等等</p></li><li><p>要掌握相关集成知识并清楚原理</p></li></ul><h1 id="没有好不好，只有用不用"><a href="#没有好不好，只有用不用" class="headerlink" title="没有好不好，只有用不用"></a>没有好不好，只有用不用</h1><ul><li>一定要以用户为中心，用户愿意使用的软件才是好软件</li><li>复杂软件不要想着满足所有用户的需求</li><li>可以设计教程来促使使用者学会使用软件</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/posts/33757/"/>
    <url>/posts/33757/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a>什么是 Spring Boot</h2><p> 开发一个 web 应用，从最初开始接触 Servlet 结合 Tomcat, 跑出一个 Hello Wolrld<br>程序，要经历特别多的步骤，我们可以通过 SpringMVC 来简化我们的代码，但是基于 SpringMVC 这么多的配置文件，演进到现在的 Spring Boot。</p><p> Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring<br>的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring<br>配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p> 简单来说就是 SpringBoot 其实不是什么新的框架，它默认配置了很多框架的使用方式，就像 maven 整合了所有的 jar 包，spring boot 整合了所有的框架 。</p><p><strong>Spring Boot 的主要优点：</strong></p><ul><li>为所有 Spring 开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化 Web 项目</li><li>没有冗余代码生成和 XML 配置的要求</li></ul><h1 id="Hello，Wrold！"><a href="#Hello，Wrold！" class="headerlink" title="Hello，Wrold！"></a>Hello，Wrold！</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>java version 1.8</li><li>Maven-3.6.3</li><li>SpringBoot 2.5.3</li><li>IDEA 2021.2</li></ul><p><strong>使用 IDEA 直接创建项目</strong></p><ol><li><p>创建一个新项目</p></li><li><p>选择 spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p></li><li><p>填写项目信息</p></li><li><p>选择初始化的组件（初学勾选 Web 即可）</p></li><li><p>填写项目路径</p></li><li><p>等待项目构建成功</p></li></ol><p><strong>项目结构分析：</strong></p><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p><ol><li><p>程序的主启动类</p></li><li><p>一个 application.properties 配置文件</p></li><li><p>一个 测试类</p></li><li><p>一个 pom.xml</p></li></ol><h2 id="编写一个-http-接口"><a href="#编写一个-http-接口" class="headerlink" title="编写一个 http 接口"></a>编写一个 http 接口</h2><ol><li><p>在主程序的同级目录下，新建一个 controller 包，<strong>一定要在同级目录下</strong>，否则识别不到</p></li><li><p>在包中新建一个 HelloController 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_helloworld.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//自动装配</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> {<br>   <span class="hljs-meta">@RequestMapping("/hello")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> {<br>      <span class="hljs-comment">//调用业务，接收前端的参数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"hello world!"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写完毕后，从主程序启动项目，浏览器发起请求，看页面返回，访问 tomcat 的默认地址</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_helloworld;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootHelloworldApplication</span> {<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      SpringApplication.run(SpringbootHelloworldApplication.class, args);<br>   }<br><br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot_helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot_helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web依赖，tomcat，DispatcherServlet，xml--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--单元测试--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>pom.xml 依赖一个父项目，主要是管理项目的资源过滤及插件！</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>点进去还有一个父依赖是</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>这是真正管理 SpringBoot 应用里面所有依赖版本的地方，SpringBoot 的版本控制中心；</p><p><strong>我们导入依赖默认是不需要写版本，但是如果导入的包没有在依赖中管理着就需要手动配置版本；</strong></p><h3 id="启动器-spring-boot-starter"><a href="#启动器-spring-boot-starter" class="headerlink" title="启动器 spring-boot-starter"></a>启动器 spring-boot-starter</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>springboot-boot-starter-xxx</strong>：就是 spring-boot 的场景启动器</p><p><strong>spring-boot-starter-web</strong>：帮我们导入了 web 模块正常运行所依赖的组件；</p><p>SpringBoot 将所有的功能场景都抽取出来，做成一个个的 starter （启动器），只需要在项目中引入这些 starter 即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可<br>；我们未来也可以自己自定义 starter；</p><h3 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboot_helloworld;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootHelloworldApplication</span> {<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>        SpringApplication.run(SpringbootHelloworldApplication.class, args);<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>SpringApplication</strong></p><p><strong>这个类主要做了以下四件事情：</strong></p><ol><li><p>推断应用的类型是普通的项目还是 Web 项目</p></li><li><p>查找并加载所有可用初始化器 ， 设置到 initializers 属性中</p></li><li><p>找出所有的应用程序监听器，设置到 listeners 属性中</p></li><li><p>推断并设置 main 方法的定义类，找到运行的主类</p></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ol><li>SpringBoot 在启动的时候从类路径下的 META-INF/spring.factories 中获取 EnableAutoConfiguration 指定的值</li><li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li><li>整个 JavaEE 的整体解决方案和自动配置都在 springboot-autoconfigure 的 jar 包中；</li><li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</li><li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li></ol><h1 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml 语法</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>SpringBoot 使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li>application.properties<ul><li> 语法结构 ：key=value</li></ul></li></ul><ul><li>application.yaml <ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改 SpringBoot 自动配置的默认值，因为 SpringBoot 在底层都给我们自动配置好了；</p><p>YAML 是 “YAML Ain’t a Markup Language” （YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”<br>（仍是一种标记语言）<strong>（是，但不完全是）</strong></p><p><strong>以数据作为中心，而不是以标记语言为重点</strong></p><p>以前的配置文件，大多数都是使用 xml 来配置；比如一个简单的端口配置，我们来对比下 yaml 和 xml</p><p>传统 xml 配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8081<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>yaml 配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server：</span><br>  <span class="hljs-attr">prot:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></tbody></table></figure><h2 id="yaml-基础语法"><a href="#yaml-基础语法" class="headerlink" title="yaml 基础语法"></a>yaml 基础语法</h2><p>说明：语法要求严格！</p><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><p><strong>字面量：普通的值  [数字，布尔值，字符串]</strong></p><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">k: v<br></code></pre></td></tr></tbody></table></figure><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “A \n WEI”  输出 ：A 换行 WEI</p></li><li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘A \n WEI’ 输出 ：A \n WEI</p></li></ul><p><strong>对象</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">AWEI</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">21</span><br></code></pre></td></tr></tbody></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span> { <span class="hljs-attr">name:</span> <span class="hljs-string">AWEI</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">21</span> }<br></code></pre></td></tr></tbody></table></figure><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素，比如：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cow</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span> <br></code></pre></td></tr></tbody></table></figure><p><strong>修改 SpringBoot 的默认端口号</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br></code></pre></td></tr></tbody></table></figure><h2 id="注入配置文件"><a href="#注入配置文件" class="headerlink" title="注入配置文件"></a>注入配置文件</h2><ol><li><p>在 springboot 项目中的 resources 目录下新建一个文件 application.yml</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写一个实体类 Dog；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootconfig.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI * <span class="hljs-doctag">@version</span> 2021/8/19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructorpublic</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> {<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> Integer age;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写一个复杂一点的实体类：Person 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootconfig.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI * <span class="hljs-doctag">@version</span> 2021/8/19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructorpublic</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> Integer age;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> happy;<br><span class="hljs-keyword">private</span> Date birth;<br><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; maps;<br><span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br><span class="hljs-keyword">private</span> Dog dog;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>使用 yaml 配置的方式进行注入</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">AWEI</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">21</span><br>    <span class="hljs-attr">happy:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">birth:</span> <span class="hljs-number">2001</span><span class="hljs-string">/01/01</span><br>    <span class="hljs-attr">maps:</span> { <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span> }<br>    <span class="hljs-attr">lists:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-attr">dog:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">旺财</span><br>      <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>注入到 person</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在Person类上添加@ConfigurationProperties(prefix = "person")</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootconfig;<br><span class="hljs-keyword">import</span> com.zlw.springbootconfig.pojo.Person;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><br><span class="hljs-meta">@SpringBootTestclass</span> <br>SpringbootConfigApplicationTests{<br><span class="hljs-meta">@Autowired</span> <br><span class="hljs-keyword">private</span> Person person;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span>{<br>System.out.println(person);<br>}<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><p>配置文件还可以编写占位符生成随机数</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">AWEI</span> <span class="hljs-string">${random.uuid}</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">21</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2001</span><span class="hljs-string">/01/01</span><br>  <span class="hljs-attr">maps:</span> { <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span> }<br>  <span class="hljs-attr">lists:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">${person.hello:happy}_Dog</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">hello:</span> <span class="hljs-string">hello</span> <br></code></pre></td></tr></tbody></table></figure><h2 id="对比properties配置文件"><a href="#对比properties配置文件" class="headerlink" title="对比properties配置文件"></a>对比 properties 配置文件</h2><ol><li><p>yaml 的 @ConfigurationProperties 只需要写一次即可 ， @Value 则需要每个字段都添加。</p></li><li><p>yaml 支持松散绑定：比如 yml 中写的 last-name，这个和 lastName 是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。</p></li><li><p>yaml 支持 JSR303 数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性。</p></li><li><p>复杂类型封装，yaml 中可以封装对象 ， 使用 value 就不支持。</p></li></ol><p><strong>结论：</strong></p><p>配置 yml 和配置 properties 都可以获取到值 ， 强烈推荐 yml。</p><p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value。</p><p>如果说，我们专门编写了一个 JavaBean 来和配置文件进行一一映射，就直接 @configurationProperties 。</p><h1 id="JSR303-数据校验"><a href="#JSR303-数据校验" class="headerlink" title="JSR303 数据校验"></a>JSR303 数据校验</h1><p>Springboot 中可以用 @validated 来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理</p><p><strong>使用数据校验，可以保证数据的正确性；</strong></p><h2 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotNull</span> (message = <span class="hljs-string">"名字不能为空"</span>)<br><span class="hljs-keyword">private</span> String userName;<br><span class="hljs-meta">@Max</span> (value = <span class="hljs-number">120</span>, message = <span class="hljs-string">"年龄最大不能查过120"</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-meta">@Email</span> (message = <span class="hljs-string">"邮箱格式错误"</span>)<br><span class="hljs-keyword">private</span> String email;<br><br>        空检查<br><span class="hljs-meta">@Null</span>       验证对象是否为<span class="hljs-literal">null</span><br><span class="hljs-meta">@NotNull</span>    验证对象是否不为<span class="hljs-literal">null</span>,无法查检长度为<span class="hljs-number">0</span>的字符串<br><span class="hljs-meta">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="hljs-number">0</span>,只对字符串,且会去掉前后空格.<br><span class="hljs-meta">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY.<br><br>        Booelan检查<br><span class="hljs-meta">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="hljs-literal">true</span><br><span class="hljs-meta">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="hljs-literal">false</span><br><br>        长度检查<br><span class="hljs-meta">@Size</span> (min =, max =) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内<br><span class="hljs-meta">@Length</span> (min =, max =) string is between min and max included.<br><br>        日期检查<br><span class="hljs-meta">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前<br><span class="hljs-meta">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后<br><span class="hljs-meta">@Pattern</span>    验证 String 对象是否符合正则表达式的规则<br></code></pre></td></tr></tbody></table></figure><h1 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h1><h2 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h2><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；</p><p><strong>例如：</strong></p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置</p><p>但是 Springboot 并不会直接启动这些配置文件，它<strong>默认使用 application.properties 主配置文件</strong>；</p><p>我们需要通过一个配置来选择需要激活的环境：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br></code></pre></td></tr></tbody></table></figure><h2 id="yaml-的多文档块"><a href="#yaml-的多文档块" class="headerlink" title="yaml 的多文档块"></a>yaml 的多文档块</h2><p>和 properties 配置文件中一样，但是使用 yml 去实现不需要创建多个配置文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-comment">#选择要激活那个环境块</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#配置环境的名称</span><br><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span>  <span class="hljs-comment">#配置环境的名称</span><br></code></pre></td></tr></tbody></table></figure><h1 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h1><ol><li><p>SpringBoot 启动会加载大量的自动配置类</p></li><li><p>我们看我们需要的功能有没有在 SpringBoot 默认写好的自动配置类当中；</p></li><li><p>我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p></li><li><p>给容器中自动配置类添加组件的时候，会从 properties 类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties: 封装配置文件中相关属性；</strong></p></li></ol><p><strong>我们可以通过启用 debug=true (debug: t) 属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><h1 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h1><p>在 springboot 中，我们可以使用以下方式处理静态资源</p><ul><li><p>webjars：<code>localhost:8080/webjars/</code></p></li><li><p>public ,static ,resources <code>localhost:8080/</code></p><p>优先级 resources &gt; static (默认的) &gt; public</p></li></ul><h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><p>前端交给我们的页面，是 html 页面。如果是我们以前开发，我们需要把他们转成 jsp 页面，jsp 好处就是当我们查出一些数据转发到 JSP 页面以后，我们可以用 jsp 轻松实现数据的显示，及交互等。</p><p><strong>但 springboot 默认是不支持 jsp 的</strong></p><p><strong>SpringBoot 推荐使用模板引擎 Thymeleaf</strong></p><p>我们把 html 页面放在类路径下的 templates 下，thymeleaf 就可以帮我们自动渲染了</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="第一个Thymeleaf程序"><a href="#第一个Thymeleaf程序" class="headerlink" title="第一个Thymeleaf程序"></a>第一个 Thymeleaf 程序</h2><ol><li><p>测试请求</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span> (<span class="hljs-string">"/index"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span> <span class="hljs-params">(Model model)</span> {<br>    model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"hello"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>导入命名空间</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>前端页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${msg}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>启动测试</p></li></ol><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>语法规则</p><p><strong>th:text</strong>：改变当前元素里面的文本内容</p><p><strong>th</strong>：任意 html 属性；来替换原生属性的值</p><p><strong>th:include</strong>：加载模板的内容： 读取加载节点的内容（不含节点名称），替换 div 内容</p><p><strong>th:replace</strong>：替换当前标签为模板中的标签，加载的节点会整个替换掉加载他的 div</p><p><strong>th:attr</strong> 来设置任意属性</p><p><strong>th:attrprepend</strong> 来追加 (不是替换) 属性值</p><p><strong>th:classappend</strong></p><p><strong>th:each</strong> 每次遍历都会生成当前这个标签</p><p><strong>th:href=”@{…}”</strong>            替换 url</p><p><strong>th:text=”${…}”</strong>    转译特殊字符，特殊符号原方不动输出</p><p><strong>th:utext=”${…}</strong>    会转译字符，特殊符号被转译后输出结果</p><p>行内写法</p><p><strong>[[ ]]</strong> 等价于 th:text</p><p><strong>[( )]</strong> 等价于 th:utext</p><h2 id="表达式语法"><a href="#表达式语法" class="headerlink" title="表达式语法"></a>表达式语法</h2><p>获取变量  <code>${...}</code></p><p>选择变量表达式（和 ${} 在功能上是一样）<code>*{...}</code></p><p>消息表达式 <code>#{...}</code></p><p>URL 表达式 <code>@{...}</code></p><p>代码段表达式 <code>~{...}</code></p><h1 id="页面国际化"><a href="#页面国际化" class="headerlink" title="页面国际化"></a>页面国际化</h1><ol><li><p>页面静态资源使用 thymeleaf 接管</p></li><li><p>国际化</p><ol><li><p>配置 i18n 文件</p><p><strong>login.properties</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-attr">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></td></tr></tbody></table></figure><p><strong>login_en_US.properties</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.btn</span>=<span class="hljs-string">Sign in</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">password</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">Remember me</span><br><span class="hljs-attr">login.tip</span>=<span class="hljs-string">Please sign in</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">Username</span><br></code></pre></td></tr></tbody></table></figure><p><strong>login_zh_CN.properties</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-attr">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>如果需要在项目中切换中英文，需要自定义组件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootweb.config;<br><br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LocaleResolver</span> {<br>    <span class="hljs-comment">//解析请求</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Locale <span class="hljs-title function_">resolveLocale</span> <span class="hljs-params">(HttpServletRequest httpServletRequest)</span> {<br>        <span class="hljs-comment">//获取请求中的语言参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">language</span> <span class="hljs-operator">=</span> httpServletRequest.getParameter(<span class="hljs-string">"l"</span>);<br>        <span class="hljs-comment">//如果没有就使用默认的</span><br>        <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> Locale.getDefault();<br>        <span class="hljs-comment">//如果请求的链接携带了国际化的参数</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(language)) {<br>            String[] split = language.split(<span class="hljs-string">"_"</span>);<br>            locale = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(split[<span class="hljs-number">0</span>], split[<span class="hljs-number">1</span>]);<br>        }<br>        <span class="hljs-keyword">return</span> locale;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocale</span> <span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> {<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置组件到 springboot （@Bean）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootweb.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//扩展springMVC</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span> <span class="hljs-params">(ViewControllerRegistry registry)</span> {<br>        registry.addViewController(<span class="hljs-string">"/"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/index.html"</span>).setViewName(<span class="hljs-string">"index"</span>);<br>        registry.addViewController(<span class="hljs-string">"/main.html"</span>).setViewName(<span class="hljs-string">"dashboard"</span>);<br>    }<br><br>    <span class="hljs-comment">//自定义国际化生效</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title function_">localeResolver</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLocaleResolver</span>();<br>    }<br><br>    <span class="hljs-comment">//配置拦截器</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span> <span class="hljs-params">(InterceptorRegistry registry)</span> {<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginHandlerInterceptor</span>()).addPathPatterns(<span class="hljs-string">"/**"</span>).excludePathPatterns(<span class="hljs-string">"/index.html"</span>, <span class="hljs-string">"/"</span>, <span class="hljs-string">"/user/login"</span>, <span class="hljs-string">"/asserts/**"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>给页面的切换链接传值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/index.html(l='zh_CN')}"</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-sm"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@{/index.html(l='en_US')}"</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol></li></ol><h1 id="集成-JDBC"><a href="#集成-JDBC" class="headerlink" title="集成 JDBC"></a>集成 JDBC</h1><p><strong>导入 starter</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>编写 yaml 配置文件</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br></code></pre></td></tr></tbody></table></figure><p><strong>controller 测试</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootdata.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCController</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/query"</span>)<br>    <span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">userList</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT * FROM User"</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.queryForList(sql);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="集成-Druid"><a href="#集成-Druid" class="headerlink" title="集成 Druid"></a>集成 Druid</h1><p><strong>导入 jar 包</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>yaml 更改数据源</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span><br>    <span class="hljs-comment">#druid 数据源专有配置</span><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span><br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span><br>    <span class="hljs-comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span><br>    <span class="hljs-comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span><br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br></code></pre></td></tr></tbody></table></figure><p><strong>监控及过滤</strong></p><p>导入 log4j</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>log4j 配置文件</strong></p><p><strong>log4j.properties</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span>=<span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] %m%n</span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span>=<span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/zlw.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] %m%n</span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sq1.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></tbody></table></figure><p><strong>配置 config</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootdata.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;<br><span class="hljs-keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> {<br>    <span class="hljs-meta">@ConfigurationProperties</span> (prefix = <span class="hljs-string">"spring.datasource"</span>)<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">druidDataSource</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    }<br><br>    <span class="hljs-comment">//后台监控 http://localhost:8080/druid/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">statViewServlet</span> <span class="hljs-params">()</span> {<br>        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StatViewServlet</span>(), <span class="hljs-string">"/druid/*"</span>);<br><br>        <span class="hljs-comment">//后台需要登录,账号密码配置</span><br>        HashMap&lt;String, String&gt; initParameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//增加配置</span><br>        initParameters.put(<span class="hljs-string">"loginUsername"</span>, <span class="hljs-string">"admin"</span>);<br>        initParameters.put(<span class="hljs-string">"loginPassword"</span>, <span class="hljs-string">"123456"</span>);<br><br>        <span class="hljs-comment">//允许访问</span><br>        initParameters.put(<span class="hljs-string">"allow"</span>, <span class="hljs-string">"127.0.0.1"</span>);<br><br>        bean.setInitParameters(initParameters);<br>        <span class="hljs-keyword">return</span> bean;<br>    }<br><br><br>    <span class="hljs-comment">//配置 Druid 监控 之  web 监控的 filter</span><br>    <span class="hljs-comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">webStatFilter</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;&gt;();<br>        bean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebStatFilter</span>());<br><br>        <span class="hljs-comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span><br>        Map&lt;String, String&gt; initParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        initParams.put(<span class="hljs-string">"exclusions"</span>, <span class="hljs-string">"*.js,*.css,/druid/*"</span>);<br>        bean.setInitParameters(initParams);<br><br>        <span class="hljs-comment">//"/*" 表示过滤所有请求</span><br>        bean.setUrlPatterns(Arrays.asList(<span class="hljs-string">"/*"</span>));<br>        <span class="hljs-keyword">return</span> bean;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="集成-Mybatis"><a href="#集成-Mybatis" class="headerlink" title="集成 Mybatis"></a>集成 Mybatis</h1><p><strong>导入依赖</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>application.yaml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><span class="hljs-comment">#整合mybatis</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.zlw.springbootmybatis.pojo</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br></code></pre></td></tr></tbody></table></figure><p><strong>创建实体类</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootmybatis.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>UserMapper</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootmybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.zlw.springbootmybatis.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> {<br>    List&lt;User&gt; <span class="hljs-title function_">queryAll</span> <span class="hljs-params">()</span>;<br><br>    User <span class="hljs-title function_">queryById</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>再 resources/mybatis/mapper 下创建 UserMapper.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.springbootmybatis.mapper.UserMapper"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryAll"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.springbootmybatis.pojo.User"</span>&gt;</span><br>        SELECT *<br>        FROM<br>        User;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.springbootmybatis.pojo.User"</span>&gt;</span><br>        select *<br>        from<br>        User<br>        where<br>        id = #{id};<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>controller 测试</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootmybatis.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.springbootmybatis.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.zlw.springbootmybatis.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    UserMapper userMapper;<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/queryAll"</span>)<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryAll</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> userMapper.queryAll();<br>    }<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/queryById/{id}"</span>)<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"id"</span>)</span> <span class="hljs-type">int</span> id) {<br>        <span class="hljs-keyword">return</span> userMapper.queryById(id);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="集成SpringSecurity"><a href="#集成SpringSecurity" class="headerlink" title="集成SpringSecurity"></a>集成 SpringSecurity</h1><p>市面上存在比较有名的安全框架：Shiro，Spring Security ！</p><p>Spring Security 是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于 spring 的应用程序的标准。</p><p>Spring Security 是一个框架，侧重于为 Java 应用程序提供身份验证和授权。与所有 Spring 项目一样，Spring 安全性的真正强大之处在于它可以轻松地扩展以满足定制需求。这是一个权限框架。</p><h2 id="完整集成配置代码"><a href="#完整集成配置代码" class="headerlink" title="完整集成配置代码"></a>完整集成配置代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootspringsecurity.config;<br><br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> {<br>    <span class="hljs-comment">//授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span> <span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-comment">//首页所有人可以访问，功能页对应有权限的人访问</span><br>        <span class="hljs-comment">//请求授权的规则</span><br>        http.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">"/"</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">"/level1/**"</span>).hasRole(<span class="hljs-string">"vip1"</span>)<br>                .antMatchers(<span class="hljs-string">"/level2/**"</span>).hasRole(<span class="hljs-string">"vip2"</span>)<br>                .antMatchers(<span class="hljs-string">"/level3/**"</span>).hasRole(<span class="hljs-string">"vip3"</span>);<br><br>        <span class="hljs-comment">//没有权限默认跳转登录页,前端表单提交路径也为 /toLogin</span><br>        http.formLogin().loginPage(<span class="hljs-string">"/toLogin"</span>);<br><br>        <span class="hljs-comment">//开启注销,注销跳回首页</span><br>        http.logout().logoutSuccessUrl(<span class="hljs-string">"/"</span>);<br><br>        <span class="hljs-comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span><br>        http.csrf().disable();<br><br>        <span class="hljs-comment">//记住我 前端记住我单选框 name 属性为 remember</span><br>        http.rememberMe().rememberMeParameter(<span class="hljs-string">"remember"</span>);<br>    }<br><br>    <span class="hljs-comment">//认证  数据库取数据则为 jdbcAuthentication()</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span> <span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception {<br>        auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>())<br>                .withUser(<span class="hljs-string">"AWEI"</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">"123456"</span>)).roles(<span class="hljs-string">"vip2"</span>, <span class="hljs-string">"vip3"</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">"zhangsan"</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">"123456"</span>)).roles(<span class="hljs-string">"vip1"</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">"admin"</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">"admin"</span>)).roles(<span class="hljs-string">"vip1"</span>, <span class="hljs-string">"vip2"</span>, <span class="hljs-string">"vip3"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h2 id="Shiro-1"><a href="#Shiro-1" class="headerlink" title="Shiro"></a>Shiro</h2><ul><li>Apache Shiro 是一个 Java 的安全 (权限) 框架。</li><li>Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。</li><li>Shiro 可以完成，认证，授权，加密，会话管理，Web 集成，缓存等.</li><li> 下载地址: <a href="http://shiro.apache.org/">http://shiro.apache.org/</a></li></ul><p>​    <a href="https://github.com/apache/shiro">GitHub 资源</a></p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>配置文件</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[users]</span><br><span class="hljs-comment"># user 'root' with password 'secret' and the 'admin' role</span><br><span class="hljs-attr">root</span> = secret, admin<br><span class="hljs-comment"># user 'guest' with the password 'guest' and the 'guest' role</span><br><span class="hljs-attr">guest</span> = guest, guest<br><span class="hljs-comment"># user 'presidentskroob' with password '12345' ("That's the same combination on</span><br><span class="hljs-comment"># my luggage!!!" ;)), and role 'president'</span><br><span class="hljs-attr">presidentskroob</span> = <span class="hljs-number">12345</span>, president<br><span class="hljs-comment"># user 'darkhelmet' with password 'ludicrousspeed' and roles 'darklord' and 'schwartz'</span><br><span class="hljs-attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz<br><span class="hljs-comment"># user 'lonestarr' with password 'vespa' and roles 'goodguy' and 'schwartz'</span><br><span class="hljs-attr">lonestarr</span> = vespa, goodguy, schwartz<br><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># Roles with assigned permissions</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># Each line conforms to the format defined in the</span><br><span class="hljs-comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-section">[roles]</span><br><span class="hljs-comment"># 'admin' role has all permissions, indicated by the wildcard '*'</span><br><span class="hljs-attr">admin</span> = *<br><span class="hljs-comment"># The 'schwartz' role can do anything (*) with any lightsaber:</span><br><span class="hljs-attr">schwartz</span> = lightsaber:*<br><span class="hljs-comment"># The 'goodguy' role is allowed to 'drive' (action) the winnebago (type) with</span><br><span class="hljs-comment"># license plate 'eagle5' (instance specific id)</span><br><span class="hljs-attr">goodguy</span> = winnebago:drive:eagle5<br></code></pre></td></tr></tbody></table></figure></li><li><p>HelloWorld</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.*;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.text.IniRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.session.Session;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 快速入门</span><br><span class="hljs-comment"> * Simple Quickstart application showing how to use Shiro's API.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/08/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 0.9 RC2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Quickstart</span> {<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Quickstart.class);<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-comment">//新方法   shiro更新问题</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-type">IniRealm</span> <span class="hljs-variable">iniRealm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IniRealm</span>(<span class="hljs-string">"classpath:shiro.ini"</span>);<br>        securityManager.setRealm(iniRealm);<br>        <br>        SecurityUtils.setSecurityManager(securityManager);<br><br>        <span class="hljs-comment">// 获取当前用户对象</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br><br>        <span class="hljs-comment">// 通过当前用户拿到session</span><br>        <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> currentUser.getSession();<br>        session.setAttribute(<span class="hljs-string">"someKey"</span>, <span class="hljs-string">"aValue"</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) session.getAttribute(<span class="hljs-string">"someKey"</span>);<br>        <span class="hljs-keyword">if</span> (value.equals(<span class="hljs-string">"aValue"</span>)) {<br>            log.info(<span class="hljs-string">"Retrieved the correct value! ["</span> + value + <span class="hljs-string">"]"</span>);<br>        }<br><br>        <span class="hljs-comment">// 判断当前用户是否被验证</span><br>        <span class="hljs-keyword">if</span> (!currentUser.isAuthenticated()) {<br>            <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">"lonestarr"</span>, <span class="hljs-string">"vespa"</span>);<br>            token.setRememberMe(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">try</span> {<br>                <span class="hljs-comment">//执行登录操作</span><br>                currentUser.login(token);<br>            } <span class="hljs-keyword">catch</span> (UnknownAccountException uae) {<br>                log.info(<span class="hljs-string">"There is no user with username of "</span> + token.getPrincipal());<br>            } <span class="hljs-keyword">catch</span> (IncorrectCredentialsException ice) {<br>                log.info(<span class="hljs-string">"Password for account "</span> + token.getPrincipal() + <span class="hljs-string">" was incorrect!"</span>);<br>            } <span class="hljs-keyword">catch</span> (LockedAccountException lae) {<br>                log.info(<span class="hljs-string">"The account for username "</span> + token.getPrincipal() + <span class="hljs-string">" is locked.  "</span> +<br>                        <span class="hljs-string">"Please contact your administrator to unlock it."</span>);<br>            }<br>            <span class="hljs-comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span><br>            <span class="hljs-keyword">catch</span> (AuthenticationException ae) {<br>                <span class="hljs-comment">//unexpected condition?  error?</span><br>            }<br>        }<br><br>        <span class="hljs-comment">//say who they are:</span><br>        <span class="hljs-comment">//print their identifying principal (in this case, a username):</span><br>        log.info(<span class="hljs-string">"User ["</span> + currentUser.getPrincipal() + <span class="hljs-string">"] logged in successfully."</span>);<br><br>        <span class="hljs-comment">//test a role:</span><br>        <span class="hljs-keyword">if</span> (currentUser.hasRole(<span class="hljs-string">"schwartz"</span>)) {<br>            log.info(<span class="hljs-string">"May the Schwartz be with you!"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            log.info(<span class="hljs-string">"Hello, mere mortal."</span>);<br>        }<br><br>        <span class="hljs-comment">//test a typed permission (not instance-level)</span><br>        <span class="hljs-keyword">if</span> (currentUser.isPermitted(<span class="hljs-string">"lightsaber:wield"</span>)) {<br>            log.info(<span class="hljs-string">"You may use a lightsaber ring.  Use it wisely."</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            log.info(<span class="hljs-string">"Sorry, lightsaber rings are for schwartz masters only."</span>);<br>        }<br><br>        <span class="hljs-comment">//a (very powerful) Instance Level permission:</span><br>        <span class="hljs-keyword">if</span> (currentUser.isPermitted(<span class="hljs-string">"winnebago:drive:eagle5"</span>)) {<br>            log.info(<span class="hljs-string">"You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  "</span> +<br>                    <span class="hljs-string">"Here are the keys - have fun!"</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            log.info(<span class="hljs-string">"Sorry, you aren't allowed to drive the 'eagle5' winnebago!"</span>);<br>        }<br><br>        <span class="hljs-comment">//all done - log out!</span><br>        currentUser.logout();<br><br>        System.exit(<span class="hljs-number">0</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="整合集成Shiro-Mybatis-Thymeleaf"><a href="#整合集成Shiro-Mybatis-Thymeleaf" class="headerlink" title="整合集成Shiro-Mybatis-Thymeleaf"></a>整合集成 Shiro-Mybatis-Thymeleaf</h2><p><strong>Subject</strong>    用户<br><strong>SecurityManager</strong>    管理所有用户<br><strong>Realm</strong>    连接数据</p><h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="编写shiro配置类"><a href="#编写shiro配置类" class="headerlink" title="编写shiro配置类"></a>编写 shiro 配置类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootshirostudy.config;<br><br><span class="hljs-keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroConfig</span> {<br>    <span class="hljs-comment">//ShiroFilterFactoryBean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title function_">shiroFilterFactoryBean</span> <span class="hljs-params">(<span class="hljs-meta">@Qualifier</span> (<span class="hljs-string">"getDefaultWebSecurityManager"</span>)</span> DefaultWebSecurityManager defaultWebSecurityManager) {<br>        <span class="hljs-type">ShiroFilterFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>        <span class="hljs-comment">//设置安全管理器</span><br>        bean.setSecurityManager(defaultWebSecurityManager);<br><br>        <span class="hljs-comment">//添加默认过滤器</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * anon: 无需认证才能使用</span><br><span class="hljs-comment">         * authc: 必须认证才能使用</span><br><span class="hljs-comment">         * user: 必须拥有记住我功能才能使用</span><br><span class="hljs-comment">         * perms: 拥有对某个资源的权限才能使用</span><br><span class="hljs-comment">         * role: 拥有某个角色权限才能使用</span><br><span class="hljs-comment">         * */</span><br>        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//授权，未授权会跳转到未授权页面</span><br>        filterChainDefinitionMap.put(<span class="hljs-string">"/user/add"</span>, <span class="hljs-string">"perms[user:add]"</span>);<br><br>        filterChainDefinitionMap.put(<span class="hljs-string">"/user/update"</span>, <span class="hljs-string">"perms[user:update]"</span>);<br><br>        <span class="hljs-comment">//设置未授权请求</span><br>        bean.setUnauthorizedUrl(<span class="hljs-string">"/unauth"</span>);<br><br>        <span class="hljs-comment">//filterChainDefinitionMap.put("/user/*", "authc");</span><br>        bean.setFilterChainDefinitionMap(filterChainDefinitionMap);<br><br>        bean.setLoginUrl(<span class="hljs-string">"/toLogin"</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    }<br><br>    <span class="hljs-comment">//DefaultWebSecurityManager</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title function_">getDefaultWebSecurityManager</span> <span class="hljs-params">(<span class="hljs-meta">@Qualifier</span> (<span class="hljs-string">"userRealm"</span>)</span> UserRealm userRealm) {<br>        <span class="hljs-type">DefaultWebSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultWebSecurityManager</span>();<br>        <span class="hljs-comment">//关联UserRealm</span><br>        securityManager.setRealm(userRealm);<br>        <span class="hljs-keyword">return</span> securityManager;<br>    }<br><br>    <span class="hljs-comment">//创建 realm 对象，自定义</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserRealm <span class="hljs-title function_">userRealm</span> <span class="hljs-params">(<span class="hljs-meta">@Qualifier</span> (<span class="hljs-string">"hashedCredentialsMatcher"</span>)</span> HashedCredentialsMatcher matcher) {<br>        <span class="hljs-type">UserRealm</span> <span class="hljs-variable">userRealm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRealm</span>();<br>        userRealm.setCredentialsMatcher(matcher);<br>        <span class="hljs-keyword">return</span> userRealm;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 替换当前 Realm 的 credentialsMatcher 属性.</span><br><span class="hljs-comment">     * 直接使用 HashedCredentialsMatcher 对象, 并设置加密算法即可.</span><br><span class="hljs-comment">     * 密码校验规则HashedCredentialsMatcher</span><br><span class="hljs-comment">     * 这个类是为了对密码进行编码的</span><br><span class="hljs-comment">     * 防止密码在数据库中明码表示,当然在登录认证的时候,</span><br><span class="hljs-comment">     * 这个类也负责对form里输入的密码进行编码</span><br><span class="hljs-comment">     * 处理认证匹配处理器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HashedCredentialsMatcher <span class="hljs-title function_">hashedCredentialsMatcher</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>        <span class="hljs-comment">//指定加密方式为MD5</span><br>        credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">"MD5"</span>);<br>        <span class="hljs-comment">//加密次数</span><br>        credentialsMatcher.setHashIterations(<span class="hljs-number">1024</span>);<br>        <span class="hljs-keyword">return</span> credentialsMatcher;<br>    }<br><br>    <span class="hljs-comment">//整合shiro</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroDialect <span class="hljs-title function_">shiroDialect</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroDialect</span>();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="UserRealm"><a href="#UserRealm" class="headerlink" title="UserRealm"></a>UserRealm</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootshirostudy.config;<br><br><span class="hljs-keyword">import</span> com.zlw.springbootshirostudy.pojo.User;<br><span class="hljs-keyword">import</span> com.zlw.springbootshirostudy.service.UserServiceImpl;<br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.*;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//自定义的 UserRealm</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserServiceImpl userServiceImpl;<br><br>    <span class="hljs-comment">//授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span> <span class="hljs-params">(PrincipalCollection principalCollection)</span> {<br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> (User) subject.getPrincipal();<br>        info.addStringPermission(currentUser.getPerms());<br>        <span class="hljs-keyword">return</span> info;<br>    }<br><br>    <span class="hljs-comment">//认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span> <span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException {<br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> (UsernamePasswordToken) authenticationToken;<br>        <span class="hljs-comment">//连接数据库</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userServiceImpl.queryByName(token.getUsername());<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        }<br><br>        <span class="hljs-comment">//根据用户的情况, 来构建 AuthenticationInfo 对象并返回. 通常使用的实现类为: SimpleAuthenticationInfo</span><br>        <span class="hljs-comment">//通常需要以下四个参数</span><br>        <span class="hljs-comment">//1). principal: 认证的实体信息. 可以是 username, 也可以是数据表对应的用户的实体类对象.</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> user;<br>        <span class="hljs-comment">//2). password: 密码.即从数据库中获取的密码</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> user.getPassword();<br>        <span class="hljs-comment">//3). realmName: 当前 realm 对象的 name. 调用父类的 getName() 方法即可</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realmName</span> <span class="hljs-operator">=</span> getName();<br>        <span class="hljs-comment">//4). credentialsSalt: 盐值,这里我使用的是用户名</span><br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">credentialsSalt</span> <span class="hljs-operator">=</span> ByteSource.Util.bytes(user.getName());<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(principal, password, credentialsSalt, realmName);<br><br>        <span class="hljs-comment">//数据库里的密码必须是加密加盐的密码</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * private String addSaltForPassword(String password, String salt, int number) {</span><br><span class="hljs-comment">         * return new Md5Hash(password, salt, number) // shiro中默认加密必须要用Md5Hash,参数为 用户密码，盐值，加密次数</span><br><span class="hljs-comment">         * }</span><br><span class="hljs-comment">         */</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="数据库盐值加密"><a href="#数据库盐值加密" class="headerlink" title="数据库盐值加密"></a>数据库盐值加密</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">addSaltForPassword</span><span class="hljs-params">(String password,String salt,<span class="hljs-type">int</span> number)</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md5Hash</span>(password,salt,number) <span class="hljs-comment">// shiro中默认加密必须要用Md5Hash,参数为 用户密码，盐值，加密次数</span><br>        }<br></code></pre></td></tr></tbody></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootshirostudy.controller;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> {<br>    <span class="hljs-meta">@RequestMapping</span> ({<span class="hljs-string">"/"</span>, <span class="hljs-string">"/index"</span>})<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toIndex</span> <span class="hljs-params">(Model model)</span> {<br>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"hello,shiro!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<br>    }<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/user/add"</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"user/add"</span>;<br>    }<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/user/update"</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"user/update"</span>;<br>    }<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/toLogin"</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;<br>    }<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/login"</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span> <span class="hljs-params">(String username, String password, Model model)</span> {<br>        <span class="hljs-comment">//获取当前的用户</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//封装用户的登录数据</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(username, password);<br>        <span class="hljs-comment">//执行登录方法</span><br>        <span class="hljs-keyword">try</span> {<br>            subject.login(token);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<br>        } <span class="hljs-keyword">catch</span> (UnknownAccountException e) {<br>            model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"用户名不存在！"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;<br>        } <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) {<br>            model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"密码错误！"</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;<br>        }<br>    }<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/unauth"</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">unauthorized</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"未授权无法访问本页面！"</span>;<br>    }<br><br>    <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/logout"</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">logout</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        subject.logout();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="页面定制化"><a href="#页面定制化" class="headerlink" title="页面定制化"></a>页面定制化</h3><p>引入命名空间</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">xmlns:th="http://www.thymeleaf.org"xmlns:shiro="http://www.thymeleaf.org/thymeleaf-extras-shiro<br></code></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span> = <span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span> = <span class="hljs-string">"http://www.thymeleaf.org"</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:shiro</span> = <span class="hljs-string">"http://www.thymeleaf.org/thymeleaf-extras-shiro"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span> = <span class="hljs-string">"UTF-8"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span> = <span class="hljs-string">"${msg}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:notAuthenticated</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span> = <span class="hljs-string">"@{/toLogin}"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:hasPermission</span> = <span class="hljs-string">"user:add"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span> = <span class="hljs-string">"@{/user/add}"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:hasPermission</span> = <span class="hljs-string">"user:update"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span> = <span class="hljs-string">"@{/user/update}"</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><code>shiro:notAuthenticated</code> 实现判断有无认证用户，从而显示标签</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:notAuthenticated</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span> = <span class="hljs-string">"@{/toLogin}"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><code>shiro:hasPermission</code>：判断有无权限显示标签</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">shiro:hasPermission</span> = <span class="hljs-string">"user:add"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span> = <span class="hljs-string">"@{/user/add}"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootshirostudy.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String perms;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootshirostudy.mapper;<br><br><span class="hljs-keyword">import</span> com.zlw.springbootshirostudy.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> {<br>    User <span class="hljs-title function_">queryByName</span> <span class="hljs-params">(String name)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.springbootshirostudy.mapper.UserMapper"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryByName"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.springbootshirostudy.pojo.User"</span>&gt;</span><br>        SELECT *<br>        FROM<br>        User<br>        WHERE<br>        Name = #{name};<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootshirostudy.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springbootshirostudy.pojo.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> {<br>    User <span class="hljs-title function_">queryByName</span> <span class="hljs-params">(String name)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="service实现类"><a href="#service实现类" class="headerlink" title="service实现类"></a>service 实现类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootshirostudy.service;<br><br><span class="hljs-keyword">import</span> com.zlw.springbootshirostudy.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.zlw.springbootshirostudy.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByName</span> <span class="hljs-params">(String name)</span> {<br>        <span class="hljs-keyword">return</span> userMapper.queryByName(name);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="log4j配置文件"><a href="#log4j配置文件" class="headerlink" title="log4j配置文件"></a>log4j 配置文件</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span>=<span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] %m%n</span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span>=<span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/zlw.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] %m%n</span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sq1.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></tbody></table></figure><h3 id="springboot配置文件"><a href="#springboot配置文件" class="headerlink" title="springboot配置文件"></a>springboot 配置文件</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span><br>    <span class="hljs-comment">#druid 数据源专有配置</span><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span><br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span><br>    <span class="hljs-comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span><br>    <span class="hljs-comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span><br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.zlw.springbootshirostudy.pojo</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br></code></pre></td></tr></tbody></table></figure><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger 简介</h2><p>这里是 <a href="https://swagger.io/">Swagger 官网</a></p><ul><li>号称世界上最流行的 API 框架</li><li> Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与 API 定义同步更新</strong></li><li>直接运行，在线测试 API</li><li> 支持多种语言 （如：Java，PHP 等）</li></ul><h2 id="SpringBoot-集成-Swagger"><a href="#SpringBoot-集成-Swagger" class="headerlink" title="SpringBoot 集成 Swagger"></a>SpringBoot 集成 Swagger</h2><ol><li><p>新建一个 springboot-web 项目</p></li><li><p>导入 jar 包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 hello world</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootswaager.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> {<br><span class="hljs-meta">@RequestMapping("/hello")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>{<br><span class="hljs-keyword">return</span> <span class="hljs-string">"hello world"</span>;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类开启 swagger</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootswaager;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.Springpackage com.zlw.springbootswaager;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootSwaagerApplication</span> {<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>SpringApplication.run(SpringbootSwaagerApplication.class, args);<br>}<br><br>}BootApplication;<span class="hljs-keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;<span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableOpenApipublic</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootSwaagerApplication</span> {   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {      SpringApplication.run(SpringbootSwaagerApplication.class, args);   }}<br></code></pre></td></tr></tbody></table></figure></li><li><p>打开测试页面</p><p><a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></p></li></ol><h2 id="配置SwaggerConfig"><a href="#配置SwaggerConfig" class="headerlink" title="配置SwaggerConfig"></a>配置 SwaggerConfig</h2><p>swagger 的 bean 实例 Docket</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootswaager.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Environment;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Profiles;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger3Config</span> {<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span> <span class="hljs-params">(Environment environment)</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)<br>                .apiInfo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>().<br>                                 title(<span class="hljs-string">"AWEI的Swagger文档"</span>)<br>                                 .description(<span class="hljs-string">"Life has no Ctrl Z!"</span>)<br>                                 .version(<span class="hljs-string">"1.0"</span>)<br>                                 .termsOfServiceUrl(<span class="hljs-string">"https://www.inencoding.com"</span>)<br>                                 .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">"AWEI"</span>, <span class="hljs-string">"https://www.inencoding.com"</span>, <span class="hljs-string">"133XXXXXX7@qq.com"</span>))<br>                                 .license(<span class="hljs-string">"Apache 2.0"</span>)<br>                                 .licenseUrl(<span class="hljs-string">"http://www.apache.org/licenses/LICENSE-2.0"</span>).build());<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Swagger扫描接口"><a href="#Swagger扫描接口" class="headerlink" title="Swagger扫描接口"></a>Swagger 扫描接口</h2><p>select () 方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">(Environment environment)</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)<br>        .apiInfo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>().<br>        title(<span class="hljs-string">"AWEI的Swagger文档"</span>)<br>        .description(<span class="hljs-string">"Life has no Ctrl Z!"</span>)<br>        .version(<span class="hljs-string">"1.0"</span>)<br>        .termsOfServiceUrl(<span class="hljs-string">"https://www.inencoding.com"</span>)<br>        .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">"AWEI"</span>,<span class="hljs-string">"https://www.inencoding.com"</span>,<span class="hljs-string">"133XXXXXX7@qq.com"</span>))<br>        .license(<span class="hljs-string">"Apache 2.0"</span>)<br>        .licenseUrl(<span class="hljs-string">"http://www.apache.org/licenses/LICENSE-2.0"</span>).build())<br>        .select().apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">"com.zlw.springbootswaager.controller"</span>)).build();<br>        }<br></code></pre></td></tr></tbody></table></figure><p>其他方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">any() <span class="hljs-comment">// 扫描所有，项目中的所有接口都会被扫描到</span><br>        none() <span class="hljs-comment">// 不扫描接口</span><br><span class="hljs-comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><br>        withMethodAnnotation(<span class="hljs-keyword">final</span> Class&lt;?<span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; annotation)<br><span class="hljs-comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><br>        withClassAnnotation(<span class="hljs-keyword">final</span> Class&lt;?<span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; annotation)<br>        basePackage(<span class="hljs-keyword">final</span> String basePackage) <span class="hljs-comment">// 根据包路径扫描接口</span><br></code></pre></td></tr></tbody></table></figure><h2 id="配置接口扫描过滤"><a href="#配置接口扫描过滤" class="headerlink" title="配置接口扫描过滤"></a>配置接口扫描过滤</h2><p>在 select () 之后</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.paths(PathSelectors.ant(<span class="hljs-string">"/zlw/**"</span>))<br></code></pre></td></tr></tbody></table></figure><p>其他方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">any() <span class="hljs-comment">// 任何请求都扫描</span><br>        none() <span class="hljs-comment">// 任何请求都不扫描</span><br>        regex(<span class="hljs-keyword">final</span> String pathRegex) <span class="hljs-comment">// 通过正则表达式控制</span><br>        ant(<span class="hljs-keyword">final</span> String antPattern) <span class="hljs-comment">// 通过ant()控制</span><br></code></pre></td></tr></tbody></table></figure><h2 id="配置-Swagger-开关"><a href="#配置-Swagger-开关" class="headerlink" title="配置 Swagger 开关"></a>配置 Swagger 开关</h2><p>通过 enable () 方法配置是否启用 swagger，如果是 false，swagger 将不能在浏览器中访问了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.enable(<span class="hljs-literal">false</span>) <span class="hljs-comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br></code></pre></td></tr></tbody></table></figure><p>动态配置当项目处于 test、dev 环境时显示 swagger，处于 prod 时不显示</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springbootswaager.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Environment;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Profiles;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/2 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger3Config</span> {<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span> <span class="hljs-params">(Environment environment)</span> {<br>        <span class="hljs-comment">// 设置要显示swagger的环境</span><br>        <span class="hljs-type">Profiles</span> <span class="hljs-variable">of</span> <span class="hljs-operator">=</span> Profiles.of(<span class="hljs-string">"dev"</span>, <span class="hljs-string">"test"</span>);<br>        <span class="hljs-comment">// 判断当前是否处于该环境</span><br>        <span class="hljs-comment">// 通过 enable() 接收此参数判断是否要显示</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> environment.acceptsProfiles(of);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)<br>                .apiInfo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>().<br>                                 title(<span class="hljs-string">"AWEI的Swagger文档"</span>)<br>                                 .description(<span class="hljs-string">"Life has no Ctrl Z!"</span>)<br>                                 .version(<span class="hljs-string">"1.0"</span>)<br>                                 .termsOfServiceUrl(<span class="hljs-string">"https://www.inencoding.com"</span>)<br>                                 .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">"AWEI"</span>, <span class="hljs-string">"https://www.inencoding.com"</span>, <span class="hljs-string">"133XXXXXX7@qq.com"</span>)).license(<span class="hljs-string">"Apache 2.0"</span>)<br>                                 .licenseUrl(<span class="hljs-string">"http://www.apache.org/licenses/LICENSE-2.0"</span>).build())<br>                .enable(flag)<br>                .select().apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">"com.zlw.springbootswaager.controller"</span>)).build();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="配置Api的分组"><a href="#配置Api的分组" class="headerlink" title="配置Api的分组"></a>配置 Api 的分组</h2><p>如果没有配置分组，默认是 default。通过 groupName () 方法即可配置分组：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Beanpublic</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">(Environment environment)</span>{<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30).apiInfo(apiInfo()).groupName(<span class="hljs-string">"hello"</span>) <span class="hljs-comment">// 配置分组       // 省略配置....}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h2><p>1、新建一个实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Schema</span> (<span class="hljs-string">"用户实体"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>    <span class="hljs-meta">@Schema</span> (<span class="hljs-string">"用户名"</span>)<br>    <span class="hljs-keyword">public</span> String username;<br>    <span class="hljs-meta">@Schema</span> (<span class="hljs-string">"密码"</span>)<br>    <span class="hljs-keyword">public</span> String password;<br>}<br></code></pre></td></tr></tbody></table></figure><p>2、只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/getUser"</span>)<br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        }<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>Swagger 注解</th><th>简单说明</th></tr></thead><tbody><tr><td> @Tag (name = “接口类描述”)</td><td> 作用在模块类上</td></tr><tr><td> @Operation (“接口方法描述”)</td><td> 作用在接口方法上</td></tr><tr><td> @Schema (“POJO 类描述”)</td><td> 作用在模型类上：如 VO、BO</td></tr><tr><td>@Schema (value = “属性说明”,hidden = true)</td><td> 作用在类方法和属性上，hidden 设置为 true 可以隐藏该属性</td></tr><tr><td> @Parameter (“参数说明”)</td><td> 作用在参数、方法和字段上，类似 @Schema</td></tr></tbody></table><h1 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h1><ol><li><p>对方法使用 @Async 注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboottest.service;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 2021/9/4</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncService</span> {<br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">try</span> {<br>            Thread.sleep(<span class="hljs-number">3000</span>);      <br>        } <span class="hljs-keyword">catch</span> (InterruptedException e) { <br>            e.printStackTrace();<br>        }<br>        System.out.println(<span class="hljs-string">"数据正在处理。。。"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>主启动类开启异步处理</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span>  <span class="hljs-comment">//开启异步任务功能</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h1><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>实例</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.springboottest;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;<br><span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><br><span class="hljs-keyword">import</span> javax.mail.MessagingException;<br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootTestApplicationTests</span> {<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> JavaMailSenderImpl mailSender;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">simpleMailMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>      simpleMailMessage.setSubject(<span class="hljs-string">"测试"</span>);<br>      simpleMailMessage.setText(<span class="hljs-string">"测试文本"</span>);<br><br>      simpleMailMessage.setFrom(<span class="hljs-string">"xxx@qq.com"</span>);<br>      simpleMailMessage.setTo(<span class="hljs-string">"xxx@qq.com"</span>);<br><br>      mailSender.send(simpleMailMessage);<br>   }<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads2</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException {<br>      <span class="hljs-comment">//一个复杂的邮件</span><br>      <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">mimeMessage</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>      <span class="hljs-comment">//组装</span><br>      <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">mimeMessageHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(mimeMessage, <span class="hljs-literal">true</span>);<br>      mimeMessageHelper.setFrom(<span class="hljs-string">"xxx@qq.com"</span>);<br>      mimeMessageHelper.setTo(<span class="hljs-string">"xxx@qq.com"</span>);<br><br>      mimeMessageHelper.setSubject(<span class="hljs-string">"测试"</span>);<br>      mimeMessageHelper.setText(<span class="hljs-string">"&lt;p style='color:red'&gt;xxx&lt;/p&gt;"</span>, <span class="hljs-literal">true</span>);<br>      <br>      <span class="hljs-comment">//附件</span><br>      mimeMessageHelper.addAttachment(<span class="hljs-string">"1.jpg"</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">"E:\\idea_java\\springbootTest\\src\\main\\java\\com\\zlw\\res\\1.jpg"</span>));<br>      <br>      mailSender.send(mimeMessage);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>两个接口。</p><ul><li>TaskExecutor 接口</li><li> TaskScheduler 接口</li></ul><p>两个注解：</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul><ol><li><p> 主启动类开启定时功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableScheduling</span> <span class="hljs-comment">//开启定时功能</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>使用 cron 表达式和 @Scheduled 注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledService</span> {<br>   <span class="hljs-comment">//corn表达式</span><br>   <span class="hljs-meta">@Scheduled</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"方法已被执行！"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="分布式Dubbo-Zookeeper-SpringBoot"><a href="#分布式Dubbo-Zookeeper-SpringBoot" class="headerlink" title="分布式Dubbo+Zookeeper+SpringBoot"></a>分布式 Dubbo+Zookeeper+SpringBoot</h1><h2 id="什么是分布式系统？"><a href="#什么是分布式系统？" class="headerlink" title="什么是分布式系统？"></a>什么是分布式系统？</h2><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><h2 id="什么是-RPC"><a href="#什么是-RPC" class="headerlink" title="什么是 RPC"></a>什么是 RPC</h2><p><strong>RPC【Remote Procedure Call】</strong><br>是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>也就是说两台服务器 A，B，一个应用部署在 A 服务器上，想要调用 B 服务器上应用提供的函数 / 方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用 RPC<br>呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC 就是要像调用本地的函数一样去调远程函数；</p><p><a href="https://www.jianshu.com/p/2accc2840a1b">推荐阅读文章</a></p><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p><a href="http://dubbo.apache.org/zh-cn/index.html">dubbo 官网</a></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><p><strong>调用关系说明</strong></p><ul><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ul><h2 id="Dubbo-环境搭建"><a href="#Dubbo-环境搭建" class="headerlink" title="Dubbo 环境搭建"></a>Dubbo 环境搭建</h2><p>推荐使用 Zookeeper 注册中心</p><p>什么是 zookeeper 呢？</p><p><a href="https://zookeeper.apache.org/">zookeeper 官方文档</a></p><h2 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装 zookeeper</h2><p>下载 apache-zookeeper-3.7.0-bin.tar.gz 并解压</p><p><a href="https://downloads.apache.org/zookeeper/zookeeper-3.7.0/">下载地址</a></p><p>打开 conf 目录，复制 <code>zoo_sample.cfg </code>文件到当前目录下，并把副本文件重命名为 <code>zoo.cfg</code></p><p>启动 bin 目录下的 server.cmd</p><h2 id="安装dubbo-admin"><a href="#安装dubbo-admin" class="headerlink" title="安装dubbo-admin"></a>安装 dubbo-admin</h2><p>dubbo 本身并不是一个服务软件。它其实就是一个 jar 包，能够帮你的 java 程序连接到 zookeeper，并利用 zookeeper 消费、提供服务。</p><p>但是为了让用户更好的管理监控众多的 dubbo 服务，官方提供了一个可视化的监控程序 dubbo-admin，不过这个监控即使不装也不影响使用。</p><p><a href="https://github.com/apache/dubbo-admin/tree/master-0.2.0">下载地址</a></p><p>下载完成后解压，可以发现是一个 springboot 项目</p><p>在项目目录下使用 cmd 执行打包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure><p>执行 dubbo-admin\target 下的 dubbo-admin-0.0.1-SNAPSHOT.jar</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></tbody></table></figure><p>【注意：zookeeper 的服务一定要打开！】</p><p>执行完毕，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户 root 和密码 root；</p><p>登录成功后，查看界面</p><h2 id="SpringBoot-Dubbo-zookeeper"><a href="#SpringBoot-Dubbo-zookeeper" class="headerlink" title="SpringBoot + Dubbo + zookeeper"></a>SpringBoot + Dubbo + zookeeper</h2><ol><li><p>启动 zookeeper ！</p></li><li><p>IDEA 创建一个空项目；</p></li><li><p>创建一个模块，实现服务提供者：provider-server ， 选择 web 依赖即可</p></li><li><p>编写服务，例如买票 接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.providerserver.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TTicketService</span> {<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">setTicket</span> <span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>编写实现类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.providerserver.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TTicketServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TTicketService</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">setTicket</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"电影票"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>创建一个模块，实现服务消费者：consumer-server ， 选择 web 依赖即可</p></li><li><p>项目创建完毕，我们写一个服务，比如用户的服务</p><p>编写 service</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.consumerserver.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> {<br>   <span class="hljs-comment">//拿到provider-server提供的票</span><br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h3><p><strong>注册中心 / 服务消费者</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!---使用curator代替zkclient--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="注册中心配置"><a href="#注册中心配置" class="headerlink" title="注册中心配置"></a>注册中心配置</h3><p><strong>配置 dubbo 属性</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8001</span><br><span class="hljs-comment">#当前应用名字</span><br><span class="hljs-attr">dubbo.application.name</span>=<span class="hljs-string">provider-server</span><br><span class="hljs-comment">#注册中心地址</span><br><span class="hljs-attr">dubbo.registry.address</span>=<span class="hljs-string">zookeeper://127.0.0.1:2181</span><br><span class="hljs-comment">#扫描指定包下服务</span><br><span class="hljs-attr">dubbo.scan.base-packages</span>=<span class="hljs-string">com.example.providerserver.service</span><br></code></pre></td></tr></tbody></table></figure><p><strong>在 service 的实现类中配置服务注解，发布服务！注意导包问题</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.providerserver.service;<br><br><span class="hljs-keyword">import</span> org.apache.dubbo.config.annotation.Service;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TTicketServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TTicketService</span> {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">setTicket</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"电影票"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="服务消费者配置"><a href="#服务消费者配置" class="headerlink" title="服务消费者配置"></a>服务消费者配置</h3><p><strong>属性</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8002</span><br><span class="hljs-comment">#当前应用名字</span><br><span class="hljs-attr">dubbo.application.name</span>=<span class="hljs-string">consumer-server</span><br><span class="hljs-comment">#注册中心地址</span><br><span class="hljs-attr">dubbo.registry.address</span>=<span class="hljs-string">zookeeper://127.0.0.1:2181</span><br></code></pre></td></tr></tbody></table></figure><p><strong>完善消费者的服务类</strong></p><p>在<strong>相同路径</strong>下编写与注册中心<strong>相同的接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.providerserver.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TicketService</span> {<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTicket</span> <span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>买票服务</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.consumerserver.service;<br><br><span class="hljs-keyword">import</span> com.example.providerserver.service.TicketService;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.annotation.Reference;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/9/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> {<br>    <span class="hljs-comment">//拿到provider-server提供的票</span><br>    <span class="hljs-meta">@Reference</span><br>    TicketService ticketService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyTicket</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> ticketService.getTicket();<br>        System.out.println(<span class="hljs-string">"在注册中心买到"</span> + ticket);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>测试类编写</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.consumerserver;<br><br><span class="hljs-keyword">import</span> com.example.consumerserver.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerServerApplicationTests</span> {<br><br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span> <span class="hljs-params">()</span> {<br>        userService.buyTicket();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="开启测试"><a href="#开启测试" class="headerlink" title="开启测试"></a>开启测试</h3><ol><li>开启 zookeeper</li><li> 启动 dubbo-admin</li><li> 启动注册中心</li><li>消费者消费测试<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/springboot_zookeeper%E6%B5%8B%E8%AF%95.png" alt="结果"></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/posts/43782/"/>
    <url>/posts/43782/</url>
    
    <content type="html"><![CDATA[<h1 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Vue (读音 /vju/, 类似于 view) 是一套用于<strong>构建用户界面</strong>的<strong>渐进式 JavaScript 框架</strong>，发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库 (如: vue-router: 跳转，vue-resource: 通信，vuex: 管理) 或既有项目整合</p><h2 id="前端三要素"><a href="#前端三要素" class="headerlink" title="前端三要素"></a>前端三要素</h2><ul><li><p>HTML (结构) : 超文本标记语言 (Hyper Text Markup Language) ，决定网页的结构和内容</p></li><li><p>CSS (表现) : 层叠样式表 (Cascading Style sheets) ，设定网页的表现样式</p></li><li><p>JavaScript (行为) : 是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行，用于控制网页的行为</p></li></ul><h2 id="JavaScript-框架"><a href="#JavaScript-框架" class="headerlink" title="JavaScript 框架"></a>JavaScript 框架</h2><ul><li><p>jQuery: 大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8;</p></li><li><p>Angular: Google 收购的前端框架，由一群 Java 程序员开发，其特点是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；最大的缺点是版本迭代不合理 (如: 1 代 -&gt; 2 代，除了名字，基本就是两个东西；截止发表博客时已推出了 Angular6)</p></li><li><p>React: Facebook 出品，一款高性能的 JS 前端框架；特点是提出了新概念 [虚拟 DOM] 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 [JSX] 语言；</p></li><li><p>Vue: 一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular (模块化) 和 React (虚拟 DOM) 的优点；</p></li><li><p>Axios : 前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM, 所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以直接选择使用 jQuery 提供的 AJAX 通信功能；</p></li></ul><p>前端三大框架：<strong>Angular、React、Vue</strong></p><h2 id="介绍与描述"><a href="#介绍与描述" class="headerlink" title="介绍与描述"></a>介绍与描述</h2><ul><li>Vue 是一套用来动态<strong>构建用户界</strong>面的<strong>渐进式</strong><code>JavaScript</code> 框架<ul><li><strong>构建用户界面</strong>：把数据通过某种办法变成用户界面</li><li><strong>渐进式</strong>：Vue 可以自底向上逐层的应用，简单应用只需要一个轻量小巧的核心库，复杂应用可以引入各式各样的 Vue 插件</li></ul></li><li>作者：尤雨溪</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>遵循 MVVM 模式</li><li>编码简洁，体积小，运行效率高，适合 移动 / PC 端开发</li><li>它本身只关注 UI，可以轻松引入 vue 插件或其它第三方库开发项目</li><li>采用<strong>组件化</strong>模式，提高代码复用率、且让代码更好维护</li><li><strong>声明式</strong>编码，让编码人员无需直接操作 DOM，提高开发效率</li><li>使用<strong>虚拟 DOM</strong> 和 <strong>Diff 算法</strong>，尽量复用 DOM 节点</li></ol><h2 id="与其他前端-JS-框架的关联"><a href="#与其他前端-JS-框架的关联" class="headerlink" title="与其他前端 JS 框架的关联"></a>与其他前端 JS 框架的关联</h2><p>借鉴 angular 的 <strong>模板</strong> 和 <strong>数据绑定</strong> 技术<br>借鉴 react 的 <strong>组件化</strong> 和 <strong>虚拟 DOM</strong> 技术</p><h2 id="Vue-扩展插件"><a href="#Vue-扩展插件" class="headerlink" title="Vue 扩展插件"></a>Vue 扩展插件</h2><p>vue-cli：vue 脚手架<br>vue-resource (axios)：ajax 请求<br>vue-router：路由<br>vuex：状态管理（它是 vue 的插件但是没有用 vue-xxx 的命名规则）<br>vue-lazyload：图片懒加载<br>vue-scroller：页面滑动相关<br>mint-ui：基于 vue 的 UI 组件库（移动端）<br>element-ui：基于 vue 的 UI 组件库（PC 端）</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC</title>
    <link href="/posts/46897/"/>
    <url>/posts/46897/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是 MVC</h2><ul><li>MVC 是模型 (Model)、视图 (View)、控制器 (Controller) 的简写，是一种软件设计规范。</li><li>MVC 不是一种设计模式，MVC 是一种架构模式。当然不同的 MVC 存在差异。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC 主要作用是降低了视图与业务逻辑间的双向偶合。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或 JavaBean 组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据 Dao） 和 服务层（行为 Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。<br><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。<br><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的 MVC 就是 JSP + servlet + javabean 的模式。</strong></p><h2 id="Spring-MVC-1"><a href="#Spring-MVC-1" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>Spring MVC 是 Spring Framework 的一部分，是基于 Java 实现 MVC 的轻量级 Web 框架。</p><p><a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">官方文档</a></p><p><strong>Spring MVC 的特点：</strong></p><ul><li>轻量级，简单易学</li><li>高效，基于请求响应的 MVC 框架</li><li>与 Spring 兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本</li><li>地化、主题等</li><li>简洁灵活</li></ul><p>Spring 的 web 框架围绕 <strong>DispatcherServlet</strong> (调度 Servlet) 设计</p><p>Spring 的 web 框架围绕 DispatcherServlet 设计。DispatcherServlet 的作用是将请求分发到不同的处理器。从 Spring 2.5 开始，使用 Java 5 或者以上版本的用户可以采用基于注解的 controller 声明方式。<br>    Spring MVC 框架像许多其他 MVC 框架一样，<strong>以请求为驱动，围绕一个中心 Servlet 分派请求及提供其他功能，DispatcherServlet 是一个实际的 Servlet (它继承自 HttpServlet 基类)。</strong></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><h1 id="HelloSpringMVC"><a href="#HelloSpringMVC" class="headerlink" title="HelloSpringMVC"></a>HelloSpringMVC</h1><h2 id="配置文件版"><a href="#配置文件版" class="headerlink" title="配置文件版"></a>配置文件版</h2><p><strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--处理映射器--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!--处理器适配器--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span><br>   <br>   <span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span><br>      <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"/helloController"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.controller.HelloController"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>   <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>HelloController.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//注意：这里我们先导入Controller接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> {<br><br>   <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception {<br>      <span class="hljs-comment">//ModelAndView 模型和视图</span><br>      <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br><br>      <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span><br>      mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"HelloSpringMVC!"</span>);<br>      <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span><br>      mv.setViewName(<span class="hljs-string">"hello"</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span><br>      <span class="hljs-keyword">return</span> mv;<br>   }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><p><strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw.controller"</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      支持mvc注解驱动</span><br><span class="hljs-comment">  在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class="hljs-comment">  要想使@RequestMapping注解生效</span><br><span class="hljs-comment">  必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class="hljs-comment">  和一个AnnotationMethodHandlerAdapter实例</span><br><span class="hljs-comment">  这两个实例分别在类级别和方法级别处理。</span><br><span class="hljs-comment">  而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><br><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>   <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>HelloController.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//@Controller是为了让Spring IOC容器初始化时自动扫描到</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping("/HelloController")</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> {<br>   <span class="hljs-comment">//@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello</span><br>   <span class="hljs-meta">@RequestMapping("/hello")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span> {<br>      model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"Hello,SpringmvcAnnotation"</span>);<br>      <span class="hljs-comment">//会被视图解析器处理</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>步骤：</strong></p><ol><li>新建一个 web 项目</li><li>导入相关 jar 包</li><li>编写 web.xml , 注册 DispatcherServlet</li><li> 编写 springmvc 配置文件</li><li>接下来就是去创建对应的控制类，controller</li><li> 最后完善前端视图和 controller 之间的对应</li><li>测试运行调试.</li></ol><p>使用 springMVC 必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的 xml 配置</p><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在 Spring MVC 中一个控制器类可以包含多个方法</li><li>在 Spring MVC 中，对于 Controller 的配置方式有很多种</li></ul><p>使用 <strong>@Controller</strong> 自动注入 bean</p><p>使用 <strong>@RequestMapping</strong> 给定路径</p><h2 id="效果相同的四个注解"><a href="#效果相同的四个注解" class="headerlink" title="效果相同的四个注解"></a>效果相同的四个注解</h2><p><strong>@Component</strong>     普通类</p><p><strong>@Repository</strong>    dao 层</p><p><strong>@Service</strong>     service 层</p><p><strong>@Controller</strong>    controller 层</p><h2 id="再一次使用注解实现"><a href="#再一次使用注解实现" class="headerlink" title="再一次使用注解实现"></a>再一次使用注解实现</h2><p><strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw.controller"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>ControllerTest.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerTest</span> {<br><span class="hljs-meta">@RequestMapping("/test")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(Model model)</span> {<br>model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"test!"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul 风格</h1><p><strong>概念</strong></p><p>Restful 就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用 POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>例如：</p><p>​    <a href="http://localhost:8080/item/queryItem.action?id=1">http://localhost:8080/item/queryItem.action?id=1</a> 查询，GET</p><p>​    <a href="http://localhost:8080/item/saveItem.action">http://localhost:8080/item/saveItem.action</a> 新增，POST</p><p>​    <a href="http://localhost:8080/item/updateItem.action">http://localhost:8080/item/updateItem.action</a> 更新，POST</p><p>​    <a href="http://localhost:8080/item/deleteItem.action?id=1">http://localhost:8080/item/deleteItem.action?id=1</a> 删除，GET 或 POST</p><p><strong>使用 RESTful 操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>例如：</p><p>​    <a href="http://localhost:8080/item/1">http://localhost:8080/item/1</a> 查询，GET</p><p>​    <a href="http://localhost:8080/item">http://localhost:8080/item</a> 新增，POST</p><p>​    <a href="http://localhost:8080/item">http://localhost:8080/item</a> 更新，PUT</p><p>​    <a href="http://localhost:8080/item/1">http://localhost:8080/item/1</a> 删除，DELETE</p><h2 id="衍生的注解"><a href="#衍生的注解" class="headerlink" title="衍生的注解"></a>衍生的注解</h2><p><strong>@RequestMapping</strong> 可以设置请求地址及调用的请求类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/test"</span>)<br></code></pre></td></tr></tbody></table></figure><p>在返回视图的方法形参中加入  <strong>@PathVariable</strong> 注解可以实现 Restful 风格的请求地址</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestfulController</span> {<br><br>   <span class="hljs-comment">//原来的风格：http://localhost:8080/add?a=1&amp;b=2</span><br>   <span class="hljs-comment">//restful风格：http://localhost:8080/add/1/2</span><br><br>   <span class="hljs-meta">@GetMapping</span> (value = <span class="hljs-string">"/add/{a}/{b}"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> b, Model model)</span> {<br>      <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> a + b;<br>      model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"结果为："</span> + res);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>@GETMapping</strong></p><p>等价于：@RequestMapping (value = “”, method = RequestMethod.GET)</p><p><strong>@POSTMapping</strong></p><p>等价于：@RequestMapping (value = “”, method = RequestMethod.POST)</p><p><strong>@PUTMapping</strong></p><p>等价于：@RequestMapping (value = “”, method = RequestMethod.PUT)</p><p><strong>@DELETEMapping</strong></p><p>等价于：@RequestMapping (value = “”, method = RequestMethod.DELETE)</p><h2 id="RequestMapping-重定向"><a href="#RequestMapping-重定向" class="headerlink" title="@RequestMapping 重定向"></a>@RequestMapping 重定向</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelTest1</span> {<br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/m1/t1"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span> <span class="hljs-params">(Model model)</span> {<br>      model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"ModelTest1"</span>);<br>      <span class="hljs-comment">//默认是转发，下面这种是重定向，重定向到test请求不是test.jsp，重定向不能携带参数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/test"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="从前端接收数据"><a href="#从前端接收数据" class="headerlink" title="从前端接收数据"></a>从前端接收数据</h2><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 :localhost:8080/user/t1?name=xxx</p><p>处理方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping("/t1")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">(String name, Model model)</span>{<br>   <span class="hljs-comment">//localhost:8080/user/t1?name=xxx</span><br>   <span class="hljs-comment">//通过形参接收前端参数</span><br>   System.out.println(<span class="hljs-string">"接收到前端的参数为"</span>+name);<br>   <br>   <span class="hljs-comment">//将返回结果传递给前端</span><br>   model.addAttribute(<span class="hljs-string">"msg"</span>, name);<br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>后台输出：xxx</p><p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 :localhost:8080/user/t1?username=xxx</p><p>处理方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping("/t1")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam("username")</span> String name, Model model)</span>{<br>   <span class="hljs-comment">//localhost:8080/user/t1?name=xxx</span><br>   <span class="hljs-comment">//通过形参接收前端参数</span><br>   System.out.println(<span class="hljs-string">"接收到前端的参数为"</span>+name);<br>   <br>   <span class="hljs-comment">//将返回结果传递给前端</span><br>   model.addAttribute(<span class="hljs-string">"msg"</span>, name);<br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>后台输出：xxx</p><p><strong>3、提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致，参数使用对象即可</p><p>实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>}<br></code></pre></td></tr></tbody></table></figure><p>提交数据：localhost:8080/user/t2?id=1&amp;name = 张三 &amp; age=18</p><p>处理方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//localhost:8080/user/t2?id=1&amp;name=张三&amp;age=18</span><br><span class="hljs-comment">//说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是 null。</span><br><span class="hljs-meta">@RequestMapping("/t2")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test2</span><span class="hljs-params">(User user)</span> {<br>   System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>后台输出: User (id=1, name = 张三，age=18)</p><h2 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h2><p><strong>第一种：通过 ModelAndView</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception {<br>   <span class="hljs-comment">//ModelAndView 模型和视图</span><br>   <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>   <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span><br>   mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"HelloSpringMVC!"</span>);<br>   <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span><br>   mv.setViewName(<span class="hljs-string">"hello"</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span><br>   <span class="hljs-keyword">return</span> mv;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>第二种：通过 Model</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/m1/t1"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span> <span class="hljs-params">(Model model)</span> {<br>   model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"Model"</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>第三种：通过 ModelMap</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/m1/t1"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span> <span class="hljs-params">(ModelMap  modelMap)</span> {<br>   modelMap.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"ModelMap"</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>Model 只有少数几个方法只适合用于储存数据，简化了对于 Model 对象的操作；</p><p>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</p><p>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。（一般不用）</p><h1 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h1><ol><li><p>使用过滤器解决</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.filter; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/5</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter</span> (filterName = <span class="hljs-string">"EncodingFilter"</span>,urlPatterns = <span class="hljs-string">"/*"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span> <span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException {<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span> <span class="hljs-params">()</span> {<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span> <span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>      request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>      response.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>       chain.doFilter(request, response);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>使用 SpringMVC 的过滤器</p><p>修改 web.xml, 添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>极端情况下，这个过滤器对 get 的支持不好 </p><p>解决办法:</p><p>1、修改 tomcat 配置文件 ：设置编码！</p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;Connector URIEncoding<span class="hljs-operator">=</span><span class="hljs-string">"utf-8"</span> port<span class="hljs-operator">=</span><span class="hljs-string">"8080"</span> protocol<span class="hljs-operator">=</span><span class="hljs-string">"HTTP/1.1"</span><br>          connectionTimeout<span class="hljs-operator">=</span><span class="hljs-string">"20000"</span><br>          redirectPort<span class="hljs-operator">=</span><span class="hljs-string">"8443"</span> /&gt;<br></code></pre></td></tr></tbody></table></figure><p>2、自定义过滤器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 解决get和post请求 全部乱码的过滤器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> {<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> {<br>  }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException {<br>       <span class="hljs-comment">//处理response的字符编码</span><br>       HttpServletResponse myResponse=(HttpServletResponse) response;<br>       myResponse.setContentType(<span class="hljs-string">"text/html;charset=UTF-8"</span>);<br><br>       <span class="hljs-comment">// 转型为与协议相关对象</span><br>       <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpServletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;<br>       <span class="hljs-comment">// 对request包装增强</span><br>       <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">myrequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRequest</span>(httpServletRequest);<br>       chain.doFilter(myrequest, response);<br>  }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException {<br>  }<br><br>}<br><br><span class="hljs-comment">//自定义request对象，HttpServletRequest的包装类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span> {<br><br>   <span class="hljs-keyword">private</span> HttpServletRequest request;<br>   <span class="hljs-comment">//是否编码的标记</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> hasEncode;<br>   <span class="hljs-comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRequest</span><span class="hljs-params">(HttpServletRequest request)</span> {<br>       <span class="hljs-built_in">super</span>(request);<span class="hljs-comment">// super必须写</span><br>       <span class="hljs-built_in">this</span>.request = request;<br>  }<br><br>   <span class="hljs-comment">// 对需要增强方法 进行覆盖</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">getParameterMap</span><span class="hljs-params">()</span> {<br>       <span class="hljs-comment">// 先获得请求方式</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>       <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">"post"</span>)) {<br>           <span class="hljs-comment">// post请求</span><br>           <span class="hljs-keyword">try</span> {<br>               <span class="hljs-comment">// 处理post乱码</span><br>               request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>               <span class="hljs-keyword">return</span> request.getParameterMap();<br>          } <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) {<br>               e.printStackTrace();<br>          }<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">"get"</span>)) {<br>           <span class="hljs-comment">// get请求</span><br>           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>           <span class="hljs-keyword">if</span> (!hasEncode) { <span class="hljs-comment">// 确保get手动编码逻辑只运行一次</span><br>               <span class="hljs-keyword">for</span> (String parameterName : parameterMap.keySet()) {<br>                   String[] values = parameterMap.get(parameterName);<br>                   <span class="hljs-keyword">if</span> (values != <span class="hljs-literal">null</span>) {<br>                       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; values.length; i++) {<br>                           <span class="hljs-keyword">try</span> {<br>                               <span class="hljs-comment">// 处理get乱码</span><br>                               values[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(values[i]<br>                                      .getBytes(<span class="hljs-string">"ISO-8859-1"</span>), <span class="hljs-string">"utf-8"</span>);<br>                          } <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) {<br>                               e.printStackTrace();<br>                          }<br>                      }<br>                  }<br>              }<br>               hasEncode = <span class="hljs-literal">true</span>;<br>          }<br>           <span class="hljs-keyword">return</span> parameterMap;<br>      }<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getParameterMap();<br>  }<br><br>   <span class="hljs-comment">//取一个值</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParameter</span><span class="hljs-params">(String name)</span> {<br>       Map&lt;String, String[]&gt; parameterMap = getParameterMap();<br>       String[] values = parameterMap.get(name);<br>       <span class="hljs-keyword">if</span> (values == <span class="hljs-literal">null</span>) {<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      }<br>       <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 取回参数的第一个值</span><br>  }<br><br>   <span class="hljs-comment">//取所有值</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String[] getParameterValues(String name) {<br>       Map&lt;String, String[]&gt; parameterMap = getParameterMap();<br>       String[] values = parameterMap.get(name);<br>       <span class="hljs-keyword">return</span> values;<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是 JSON</h2><ul><li>JSON (JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。</li><li>采用完全独立于编程语言的文本格式来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 </li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何 JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><h2 id="JSON-与-JS-对象的关系"><a href="#JSON-与-JS-对象的关系" class="headerlink" title="JSON 与 JS 对象的关系"></a>JSON 与 JS 对象的关系</h2><p>很多人搞不清楚 JSON 和 JS 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p><strong>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</strong></p><p>JSON 键值对是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键 / 值对组合中的键名写在前面并用双引号” “包裹，使用冒号：分隔，然后紧接着值</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">a</span>: <span class="hljs-string">"hello"</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">"world"</span>}; <span class="hljs-comment">//这是一个对象，键名也可以用双引号包裹</span><br><span class="hljs-keyword">var</span> json = <span class="hljs-string">'{"a": "hello", "b": "world"}'</span> <span class="hljs-comment">//这是JSON字符串，本质是字符串</span><br></code></pre></td></tr></tbody></table></figure><p>JavaScript 对象转换为 JSON 字符串</p><p>JSON.stringify()</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">a</span>: <span class="hljs-string">"hello"</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">"world"</span>}; <br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj);<br><span class="hljs-comment">//结果为：{"a": "hello", "b": "world"}</span><br></code></pre></td></tr></tbody></table></figure><p>JSON 字符串转换为 Javascript 对象</p><p>JSON.parse()</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> json = <span class="hljs-string">'{"a": "hello", "b": "world"}'</span> <span class="hljs-comment">//这是JSON字符串，本质是字符串</span><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(json)<br><span class="hljs-comment">//结果为：{a: "hello", b: "world"}</span><br></code></pre></td></tr></tbody></table></figure><p>测试代码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-comment">//编写一个JavaScript对象</span></span><br><span class="language-javascript">         <span class="hljs-keyword">var</span> user = {</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">"AWEI"</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>: <span class="hljs-string">"21"</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>: <span class="hljs-string">"男"</span></span><br><span class="language-javascript">         }</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);</span><br><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-comment">//JavaScript对象转换为JSON字符串</span></span><br><span class="language-javascript">         user = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user);</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);</span><br><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-comment">//JSON字符串转换为Javascript对象</span></span><br><span class="language-javascript">         user = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(user);</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);</span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="使用Jackson"><a href="#使用Jackson" class="headerlink" title="使用Jackson"></a>使用 Jackson</h2><p>Jackson 是一种 JSON 解析工具</p><p><strong>使用 Jackson 需要导入它的 jar 包</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>配置 <strong>web.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>配置 <strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>编写一个<strong>实体类 User</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> age;<br>   <span class="hljs-keyword">private</span> String sex;<br>}<br></code></pre></td></tr></tbody></table></figure><p>编写 <strong>UserController</strong></p><p><strong>@RestController</strong>  下面的所有方法都只会返回字符串<br><strong>@ResponseBody</strong>  不会走视图解析器，直接返回一个字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//@Controller</span><br><span class="hljs-meta">@RestController</span> <span class="hljs-comment">//下面的所有方法都只会返回字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> {<br><span class="hljs-meta">@RequestMapping(value = "/j1")</span><br><span class="hljs-comment">//@ResponseBody //不会走视图解析器，直接返回一个字符串</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException {<br><br><span class="hljs-comment">//json      ObjectMapper</span><br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br><br><span class="hljs-comment">//返回JSON字符串</span><br><span class="hljs-keyword">return</span> str;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h3><p>在 spring 配置文件中添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"objectMapper"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"failOnEmptyBeans"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="返回类型例子"><a href="#返回类型例子" class="headerlink" title="返回类型例子"></a>返回类型例子</h3><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = "/j2")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException {<br>   List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;User&gt;();<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 1"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 2"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 3"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 4"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 5"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <br>   list.add(user1);<br>   list.add(user2);<br>   list.add(user3);<br>   list.add(user4);<br>   list.add(user5);<br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(list);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = "/j3")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException {<br>   <span class="hljs-comment">//ObjectMapper 时间解析后的默认格式为 时间戳</span><br>   <br>   <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>   <span class="hljs-comment">//使用ObjectMapper解决时间戳</span><br>   <span class="hljs-comment">//关闭时间戳显示</span><br>   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-literal">false</span>);<br>   <br>   <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <br>   <span class="hljs-comment">//自定义日期格式</span><br>   <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);<br>   mapper.setDateFormat(sdf);<br>   <br>   <span class="hljs-keyword">return</span> mapper.writeValueAsString(date);<br>   <span class="hljs-comment">//使用java解决时间戳</span><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * ObjectMapper mapper = new ObjectMapper();</span><br><span class="hljs-comment">   * Date date = new Date();</span><br><span class="hljs-comment">   * SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span><br><span class="hljs-comment">   * return mapper.writeValueAsString(sdf.format(date));</span><br><span class="hljs-comment">   * */</span><br>   <br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="整理Jackson工具类"><a href="#整理Jackson工具类" class="headerlink" title="整理Jackson工具类"></a>整理 Jackson 工具类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.utils;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonUtils</span> {<br><span class="hljs-comment">//返回json字符串的工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getJson</span><span class="hljs-params">(Object object)</span> {<br><span class="hljs-comment">//利用重载以及给定默认值的思想编写开源工具类</span><br><span class="hljs-keyword">return</span> getJson(object, <span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);<br>}<br><br><span class="hljs-comment">//返回json时间字符串的工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getJson</span><span class="hljs-params">(Object object,String dataFormat)</span>{<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-literal">false</span>);<br>objectMapper.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(dataFormat));<br><span class="hljs-keyword">try</span> {<br><span class="hljs-keyword">return</span> objectMapper.writeValueAsString(object);<br>} <span class="hljs-keyword">catch</span> (JsonProcessingException e) {<br>e.printStackTrace();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="使用Fastjson"><a href="#使用Fastjson" class="headerlink" title="使用Fastjson"></a>使用 Fastjson</h2><p>使用步骤：</p><p>首先先导包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">"/j4"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json4</span> <span class="hljs-params">()</span> {<br>   List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;User&gt;();<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 1"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 2"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 3"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 4"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 5"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   list.add(user1);<br>   list.add(user2);<br>   list.add(user3);<br>   list.add(user4);<br>   list.add(user5);<br>   <span class="hljs-keyword">return</span> JSON.toJSONString(list);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="返回时间字符串"><a href="#返回时间字符串" class="headerlink" title="返回时间字符串"></a>返回时间字符串</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">"/j4"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json4</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-keyword">return</span> JSON.toJSONString(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), SerializerFeature.DisableCircularReferenceDetect, SerializerFeature.WriteDateUseDateFormat);<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合 SSM</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>环境：</p><ul><li>IDEA</li><li>MySQL 8.0.22</li><li>Tomcat 9.24</li><li>Maven 3.6.3</li></ul><h2 id="最终版配置文件"><a href="#最终版配置文件" class="headerlink" title="最终版配置文件"></a>最终版配置文件</h2><h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven 依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="静态资源导出问题"><a href="#静态资源导出问题" class="headerlink" title="静态资源导出问题"></a>静态资源导出问题</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--静态资源导出问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="spring配置文件"><a href="#spring配置文件" class="headerlink" title="spring配置文件"></a>spring 配置文件</h3><h4 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"classpath:spring-dao.xml"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"classpath:spring-mvc.xml"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"classpath:spring-service.xml"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="hljs-comment">&lt;!--注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--静态资源过滤--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--扫描包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw.controller"</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewClass"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a>spring-dao.xml</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--加载配置文件--&gt;</span><br><span class="hljs-comment">&lt;!--DataSource:使用Spring的数据源替换mybatis的配置（c3p0 dbcp druid） 这里使用c3p0--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:database.properties"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClass"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.driver}"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"jdbcUrl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.url}"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.username}"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.password}"</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxPoolSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"30"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minPoolSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 关闭连接后不自动commit --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"autoCommitOnClose"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 获取连接超时时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"checkoutTimeout"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10000"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"acquireRetryAttempts"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span>/&gt;</span><br><span class="hljs-comment">&lt;!--绑定mybatis配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span><br><span class="hljs-comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.zlw.dao"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span> </span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/tx </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/tx/spring-tx.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop </span></span><br><span class="hljs-string"><span class="hljs-tag">                           https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 扫描service相关的bean --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw.service"</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span><br><span class="hljs-comment">&lt;!--配置事务通知--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txAdvice"</span>&gt;</span><br><span class="hljs-comment">&lt;!--给那些方法配置事务--&gt;</span><br><span class="hljs-comment">&lt;!--配置事务的传播特性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"add"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"update"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"delete"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"query"</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">"true"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"*"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--配置事务切入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* com.zlw.dao.*.*(..))"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssmbuild?useSSl=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></tbody></table></figure><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="hljs-meta"><span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!--驼峰命名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapUnderscoreToCamelCase"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br><span class="hljs-comment">&lt;!--缓存开启--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.zlw.dao"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--一定要注意:这里加载的是总的配置文件--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--encodingFilter--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>         org.springframework.web.filter.CharacterEncodingFilter<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--Session过期时间--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="练手项目"><a href="#练手项目" class="headerlink" title="练手项目"></a>练手项目</h2><h3 id="使用的数据库代码"><a href="#使用的数据库代码" class="headerlink" title="使用的数据库代码"></a>使用的数据库代码</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `ssmbuild`;<br><br>USE `ssmbuild`;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `books`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `books`<br>(<br>    `bookid`     <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'书id'</span>,<br>    `bookname`   <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'书名'</span>,<br>    `bookcounts` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'数量'</span>,<br>    `detail`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'描述'</span>,<br>    KEY `bookid` (`bookid`)<br>) ENGINE <span class="hljs-operator">=</span> INNODB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> Utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `books`(`bookid`, `bookname`, `bookcounts`, `detail`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">'Java'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'从入门到放弃'</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">'MySQL'</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'从删库到跑路'</span>),<br>    (<span class="hljs-number">3</span>, <span class="hljs-string">'Linux'</span>, <span class="hljs-number">5</span>, <span class="hljs-string">'从进门到进牢'</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Books</span> {<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> bookID;<br>   <span class="hljs-keyword">private</span> String bookName;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> bookCounts;<br>   <span class="hljs-keyword">private</span> String detail;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.Books;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> {<br>   <span class="hljs-comment">//增加一本书</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Books book)</span>;<br><br>   <span class="hljs-comment">//删除一本书</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBookById</span> <span class="hljs-params">(<span class="hljs-meta">@Param("bookId")</span> <span class="hljs-type">int</span> id)</span>;<br><br>   <span class="hljs-comment">//更新一本书</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">updateBookById</span> <span class="hljs-params">(Books book)</span>;<br><br>   <span class="hljs-comment">//查询一本书</span><br>   Books <span class="hljs-title function_">queryBookById</span> <span class="hljs-params">(<span class="hljs-meta">@Param("bookId")</span> <span class="hljs-type">int</span> id)</span>;<br><br>   <span class="hljs-comment">//查询全部的书</span><br>   List&lt;Books&gt; <span class="hljs-title function_">queryAllBooks</span> <span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.dao.BookMapper"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addBook"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.zlw.pojo.Books"</span>&gt;</span><br>      INSERT INTO<br>            Books(bookname, bookcounts, detail)<br>      VALUES<br>            (#{bookName}, #{bookCounts}, #{detail});<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteBookById"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"_int"</span>&gt;</span><br>      DELETE<br>      FROM<br>            Books<br>      WHERE<br>            Bookid = #{bookId};<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateBookById"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.zlw.pojo.Books"</span>&gt;</span><br>      UPDATE Books<br>      SET<br>            Bookname   = #{bookName},<br>            Bookcounts = #{bookCounts},<br>            Detail     = #{detail}<br>      WHERE<br>            Bookid = #{bookID};<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryBookById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.Books"</span>&gt;</span><br>      SELECT *<br>      FROM<br>            Books<br>      WHERE<br>            Bookid = #{bookId};<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryAllBooks"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.Books"</span>&gt;</span><br>      SELECT *<br>      FROM<br>            Books;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="编写-Service-层的接口和实现类"><a href="#编写-Service-层的接口和实现类" class="headerlink" title="编写 Service 层的接口和实现类"></a>编写 Service 层的接口和实现类</h3><p><strong>接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.Books;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> {<br>   <span class="hljs-comment">//增加一本书</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Books book)</span>;<br><br>   <span class="hljs-comment">//删除一本书</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBookById</span> <span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">"bookId"</span>)</span> <span class="hljs-type">int</span> id);<br><br>   <span class="hljs-comment">//更新一本书</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">updateBookById</span> <span class="hljs-params">(Books book)</span>;<br><br>   <span class="hljs-comment">//查询一本书</span><br>   Books <span class="hljs-title function_">queryBookById</span> <span class="hljs-params">(<span class="hljs-meta">@Param("bookId")</span> <span class="hljs-type">int</span> id)</span>;<br><br>   <span class="hljs-comment">//查询全部的书</span><br>   List&lt;Books&gt; <span class="hljs-title function_">queryAllBooks</span> <span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>实现类</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service;<br><br><span class="hljs-keyword">import</span> com.zlw.dao.BookMapper;<br><span class="hljs-keyword">import</span> com.zlw.pojo.Books;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>{<br><span class="hljs-keyword">private</span> BookMapper bookMapper;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookMapper</span> <span class="hljs-params">(BookMapper bookMapper)</span> {<br><span class="hljs-built_in">this</span>.bookMapper = bookMapper;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span> <span class="hljs-params">(Books book)</span> {<br><span class="hljs-keyword">return</span> bookMapper.addBook(book);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBookById</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span> {<br><span class="hljs-keyword">return</span> bookMapper.deleteBookById(id);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateBook</span> <span class="hljs-params">(Books book)</span> {<br><span class="hljs-keyword">return</span> bookMapper.updateBook(book);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Books <span class="hljs-title function_">queryBookById</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span> {<br><span class="hljs-keyword">return</span> bookMapper.queryBookById(id);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title function_">queryAllBooks</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">return</span> bookMapper.queryAllBooks();<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title function_">queryBooksByName</span> <span class="hljs-params">(String bookName)</span> {<br><span class="hljs-keyword">return</span> bookMapper.queryBooksByName(bookName);<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.Books;<br><span class="hljs-keyword">import</span> com.zlw.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/book"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> {<br>   <span class="hljs-comment">//调用service层</span><br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-meta">@Qualifier</span> (<span class="hljs-string">"bookServiceImpl"</span>)<br>   <span class="hljs-keyword">private</span> BookService bookService;<br><br>   <span class="hljs-comment">//查询全部的书籍，并且返回到一个书籍展示页面</span><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/allBook"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">list</span> <span class="hljs-params">(Model model)</span> {<br>      List&lt;Books&gt; books = bookService.queryAllBooks();<br>      model.addAttribute(<span class="hljs-string">"list"</span>, books);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"allBook"</span>;<br>   }<br><br>   <span class="hljs-comment">//跳转到书籍增加页面</span><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/toAddBook"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toAddBook</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"addBook"</span>;<br>   }<br><br>   <span class="hljs-comment">//添加书籍的请求</span><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/addBook"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span> <span class="hljs-params">(Books book)</span> {<br>      bookService.addBook(book);<br>      <span class="hljs-comment">//重定向到@RequestMapping("/allBook")</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/book/allBook"</span>;<br>   }<br><br>   <span class="hljs-comment">//跳转到修改页面</span><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/toUpdateBook"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toUpdateBook</span> <span class="hljs-params">(<span class="hljs-type">int</span> id, Model model)</span> {<br>      <span class="hljs-type">Books</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookService.queryBookById(id);<br>      model.addAttribute(<span class="hljs-string">"book"</span>, book);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"updateBook"</span>;<br>   }<br><br>   <span class="hljs-comment">//修改书籍的请求</span><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/updateBook"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateBook</span> <span class="hljs-params">(Books book)</span> {<br>      bookService.updateBook(book);<br>      <span class="hljs-comment">//重定向到@RequestMapping("/allBook")</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/book/allBook"</span>;<br>   }<br><br>   <span class="hljs-comment">//删除书籍</span><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/deleteBook/{bookID}"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteBook</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> (<span class="hljs-string">"bookID"</span>)</span> <span class="hljs-type">int</span> id) {<br>      bookService.deleteBookById(id);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/book/allBook"</span>;<br>   }<br><br>   <span class="hljs-comment">//查询书籍</span><br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/queryBook"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryBook</span> <span class="hljs-params">(String queryBookName, Model model)</span> {<br>      List&lt;Books&gt; books = bookService.queryBooksByName(queryBookName);<br>      model.addAttribute(<span class="hljs-string">"list"</span>, books);<br>      <span class="hljs-keyword">if</span> (books.size() == <span class="hljs-number">0</span>) {<br>         model.addAttribute(<span class="hljs-string">"error"</span>, <span class="hljs-string">"未找到该书籍！请确认书籍名称是否正确！"</span>);<br>      }<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"allBook"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><h4 id="主页面"><a href="#主页面" class="headerlink" title="主页面"></a>主页面</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">8</span>/<span class="hljs-number">11</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">47</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;title&gt;首页&lt;/title&gt;<br>      &lt;style&gt;<br>         a{<br>            text-decoration: none;<br>                color: black;<br>            font-size: 18px;<br>         }<br>         h3{<br>                width: 180px;<br>                height: 38px;<br>            margin: 100px auto;<br>                text-align: center;<br>                line-height: 38px;<br>            background: dodgerblue;<br>            border-radius: 10px;<br>         }<br>      &lt;/style&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;h3&gt;<br>         &lt;a href=<span class="hljs-string">"${pageContext.request.contextPath}/book/allBook"</span>&gt;进入书籍页面&lt;/a&gt;<br>      &lt;/h3&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="显示全部书籍页面"><a href="#显示全部书籍页面" class="headerlink" title="显示全部书籍页面"></a>显示全部书籍页面</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;<br>&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">8</span>/<span class="hljs-number">11</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">47</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;title&gt;书籍展示&lt;/title&gt;<br>      &lt;%--BootStrap美化--%&gt;<br>      &lt;link href=<span class="hljs-string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="hljs-string">"stylesheet"</span>&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;div class=<span class="hljs-string">"container"</span>&gt;<br>         &lt;div class=<span class="hljs-string">"row clearfix"</span>&gt;<br>            &lt;div class=<span class="hljs-string">"col-md-12 column"</span>&gt;<br>               &lt;div class=<span class="hljs-string">"page-header"</span>&gt;<br>                  &lt;h1&gt;<br>                     &lt;small&gt;书籍列表 ———————— 显示所有书籍&lt;/small&gt;<br>                  &lt;/h1&gt;<br>               &lt;/div&gt;<br>            &lt;/div&gt;<br>            &lt;div class=<span class="hljs-string">"row"</span>&gt;<br>               &lt;div class=<span class="hljs-string">"col-md-4 column"</span>&gt;<br>                  &lt;a class=<span class="hljs-string">"btn btn-primary"</span> href=<span class="hljs-string">"${pageContext.request.contextPath}/book/toAddBook"</span>&gt;新增书籍&lt;/a&gt;<br>                  &lt;a class=<span class="hljs-string">"btn btn-primary"</span> href=<span class="hljs-string">"${pageContext.request.contextPath}/book/allBook"</span>&gt;全部书籍&lt;/a&gt;<br>               &lt;/div&gt;<br>               &lt;div class=<span class="hljs-string">"col-md-4 column"</span>&gt;&lt;/div&gt;<br>               &lt;div class=<span class="hljs-string">"col-md-4 column"</span>&gt;<br>                  &lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/book/queryBook"</span> method=<span class="hljs-string">"post"</span><br>                        style=<span class="hljs-string">"float: right"</span> class=<span class="hljs-string">"form-inline"</span>&gt;<br>                     &lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"queryBookName"</span> class=<span class="hljs-string">"form-control"</span> placeholder=<span class="hljs-string">"请输入要查询的书籍名称"</span>&gt;<br>                     &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"查询"</span> class=<span class="hljs-string">"btn btn-primary"</span>&gt;<br>                     &lt;span style=<span class="hljs-string">"color:red;font-weight:bold;display: block"</span>&gt;${error}&lt;/span&gt;<br>                  &lt;/form&gt;<br>               &lt;/div&gt;<br>            &lt;/div&gt;<br>         &lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=<span class="hljs-string">"container"</span>&gt;<br>         &lt;div class=<span class="hljs-string">"row clearfix"</span>&gt;<br>            &lt;table class=<span class="hljs-string">"table table-hover table-striped"</span>&gt;<br>               &lt;thead&gt;<br>               &lt;tr&gt;<br>                  &lt;th&gt;书籍编号&lt;/th&gt;<br>                  &lt;th&gt;书籍名称&lt;/th&gt;<br>                  &lt;th&gt;书籍数量&lt;/th&gt;<br>                  &lt;th&gt;书籍详情&lt;/th&gt;<br>                  &lt;th&gt;操作&lt;/th&gt;<br>               &lt;/tr&gt;<br>               &lt;/thead&gt;<br>               &lt;%--书籍从数据库中查询出来--%&gt;<br>               &lt;tbody&gt;<br>               &lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">"book"</span> items=<span class="hljs-string">"${list}"</span>&gt;<br>                  &lt;tr&gt;<br>                     &lt;td&gt;${book.bookID}&lt;/td&gt;<br>                     &lt;td&gt;${book.bookName}&lt;/td&gt;<br>                     &lt;td&gt;${book.bookCounts}&lt;/td&gt;<br>                     &lt;td&gt;${book.detail}&lt;/td&gt;<br>                     &lt;td&gt;<br>                        &lt;a href=<span class="hljs-string">"${pageContext.request.contextPath}/book/toUpdateBook?id=${book.bookID}"</span>&gt;修改&lt;/a&gt;<br>                        &amp;nbsp; | &amp;nbsp;<br>                        &lt;a href=<span class="hljs-string">"${pageContext.request.contextPath}/book/deleteBook/${book.bookID}"</span>&gt;删除&lt;/a&gt;<br>                     &lt;/td&gt;<br>                  &lt;/tr&gt;<br>               &lt;/c:forEach&gt;<br>               &lt;/tbody&gt;<br>            &lt;/table&gt;<br>         &lt;/div&gt;<br>      &lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="更新书籍页面"><a href="#更新书籍页面" class="headerlink" title="更新书籍页面"></a>更新书籍页面</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">8</span>/<span class="hljs-number">11</span><br>  Time: <span class="hljs-number">20</span>:<span class="hljs-number">02</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;title&gt;修改书籍信息&lt;/title&gt;<br>      &lt;link href=<span class="hljs-string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="hljs-string">"stylesheet"</span>&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;div class=<span class="hljs-string">"container"</span>&gt;<br>         &lt;div class=<span class="hljs-string">"row clearfix"</span>&gt;<br>            &lt;div class=<span class="hljs-string">"col-md-12 column"</span>&gt;<br>               &lt;div class=<span class="hljs-string">"page-header"</span>&gt;<br>                  &lt;h1&gt;<br>                     &lt;small&gt;书籍列表 ———————— 修改书籍信息&lt;/small&gt;<br>                  &lt;/h1&gt;<br>               &lt;/div&gt;<br>            &lt;/div&gt;<br>         &lt;/div&gt;<br>         &lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/book/updateBook"</span> method=<span class="hljs-string">"post"</span>&gt;<br>            &lt;input type=<span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"bookID"</span> value=<span class="hljs-string">"${book.bookID}"</span>&gt;<br>            &lt;div class=<span class="hljs-string">"form-group"</span>&gt;<br>               &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">"bkName"</span>&gt;书籍名称：&lt;/label&gt;<br>               &lt;input type=<span class="hljs-string">"text"</span> class=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkName"</span> name=<span class="hljs-string">"bookName"</span> required<br>                      value=<span class="hljs-string">"${book.bookName}"</span>&gt;<br>            &lt;/div&gt;<br>            &lt;div class=<span class="hljs-string">"form-group"</span>&gt;<br>               &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">"bkCount"</span>&gt;书籍数量：&lt;/label&gt;<br>               &lt;input type=<span class="hljs-string">"text"</span> class=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkCount"</span> name=<span class="hljs-string">"bookCounts"</span> required<br>                      value=<span class="hljs-string">"${book.bookCounts}"</span>&gt;<br>            &lt;/div&gt;<br>            &lt;div class=<span class="hljs-string">"form-group"</span>&gt;<br>               &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">"bkDetail"</span>&gt;书籍描述：&lt;/label&gt;<br>               &lt;input type=<span class="hljs-string">"text"</span> class=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkDetail"</span> name=<span class="hljs-string">"detail"</span> required value=<span class="hljs-string">"${book.detail}"</span>&gt;<br>            &lt;/div&gt;<br>            &lt;input type=<span class="hljs-string">"submit"</span> class=<span class="hljs-string">"btn btn-default"</span> value=<span class="hljs-string">"修改"</span>&gt;<br>         &lt;/form&gt;<br>      &lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="添加书籍页面"><a href="#添加书籍页面" class="headerlink" title="添加书籍页面"></a>添加书籍页面</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">8</span>/<span class="hljs-number">11</span><br>  Time: <span class="hljs-number">18</span>:<span class="hljs-number">38</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;title&gt;新增书籍&lt;/title&gt;<br>      &lt;link href=<span class="hljs-string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="hljs-string">"stylesheet"</span>&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;div class=<span class="hljs-string">"container"</span>&gt;<br>         &lt;div class=<span class="hljs-string">"row clearfix"</span>&gt;<br>            &lt;div class=<span class="hljs-string">"col-md-12 column"</span>&gt;<br>               &lt;div class=<span class="hljs-string">"page-header"</span>&gt;<br>                  &lt;h1&gt;<br>                     &lt;small&gt;书籍列表 ———————— 新增书籍&lt;/small&gt;<br>                  &lt;/h1&gt;<br>               &lt;/div&gt;<br>            &lt;/div&gt;<br>         &lt;/div&gt;<br>         &lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/book/addBook"</span> method=<span class="hljs-string">"post"</span>&gt;<br>            &lt;div class=<span class="hljs-string">"form-group"</span>&gt;<br>               &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">"bkName"</span>&gt;书籍名称：&lt;/label&gt;<br>               &lt;input type=<span class="hljs-string">"text"</span> class=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkName"</span> name=<span class="hljs-string">"bookName"</span> required&gt;<br>            &lt;/div&gt;<br>            &lt;div class=<span class="hljs-string">"form-group"</span>&gt;<br>               &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">"bkCount"</span>&gt;书籍数量：&lt;/label&gt;<br>               &lt;input type=<span class="hljs-string">"text"</span> class=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkCount"</span> name=<span class="hljs-string">"bookCounts"</span> required&gt;<br>            &lt;/div&gt;<br>            &lt;div class=<span class="hljs-string">"form-group"</span>&gt;<br>               &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">"bkDetail"</span>&gt;书籍描述：&lt;/label&gt;<br>               &lt;input type=<span class="hljs-string">"text"</span> class=<span class="hljs-string">"form-control"</span> id=<span class="hljs-string">"bkDetail"</span> name=<span class="hljs-string">"detail"</span> required&gt;<br>            &lt;/div&gt;<br>            &lt;input type=<span class="hljs-string">"submit"</span> class=<span class="hljs-string">"btn btn-primary"</span> value=<span class="hljs-string">"增加"</span>&gt;<br>         &lt;/form&gt;<br>      &lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>SpringMVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter, 用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是 AOP 思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet 规范中的一部分，任何 java web 工程都可以使用</li><li>在 url-pattern 中配置了 /* 之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong> </p><ul><li>拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是 jsp/html/css/image/js 是不会进行拦截的</li></ul><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p><strong>MyInterceptor</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.config;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> {<br>   <span class="hljs-comment">//在请求处理的方法之前执行</span><br>   <span class="hljs-comment">//如果返回true执行下一个拦截器</span><br>   <span class="hljs-comment">//如果返回false就不执行下一个拦截器</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception {<br>      System.out.println(<span class="hljs-string">"==========处理前==========="</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   }<br><br>   <span class="hljs-comment">//下面两个一般用于日志</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception {<br>      System.out.println(<span class="hljs-string">"==========处理后==========="</span>);<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception {<br>      System.out.println(<span class="hljs-string">"==========清理==========="</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>spring 配置</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- /** 代表所有请求--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/**"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.config.MyInterceptor"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="实现未登录拦截"><a href="#实现未登录拦截" class="headerlink" title="实现未登录拦截"></a>实现未登录拦截</h2><p><strong>拦截器</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.config;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">loginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception {<br>      <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>      <span class="hljs-comment">//判断什么情况下登录</span><br>      <span class="hljs-keyword">if</span> (session.getAttribute(<span class="hljs-string">"userLoginInfo"</span>)!=<span class="hljs-literal">null</span>){<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      }<br>      request.getRequestDispatcher(<span class="hljs-string">"/WEB-INF/jsp/login.jsp"</span>).forward(request, response);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>登录请求</strong></p><p><strong>注意：登录给定 session 的请求不能被拦截</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">loginController</span> {<br>   <span class="hljs-meta">@RequestMapping("/user/main")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">main</span><span class="hljs-params">()</span>{<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"main"</span>;<br>   }<br>   <br>   <span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/login"</span>)<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span> <span class="hljs-params">(HttpSession session, String username, String password, Model model)</span> {<br>      <span class="hljs-comment">//把用户的信息存在session中</span><br>      model.addAttribute(<span class="hljs-string">"username"</span>, username);<br>      session.setAttribute(<span class="hljs-string">"userLoginInfo"</span>, username);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"main"</span>;<br>   }<br>   <br>   <span class="hljs-meta">@RequestMapping("/goLogin")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span>{<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;<br>   }<br>   <br>   <span class="hljs-meta">@RequestMapping("/loOut")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loOut</span><span class="hljs-params">(HttpSession session)</span>{<br>      session.removeAttribute(<span class="hljs-string">"userLoginInfo"</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/"</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>配置 bean：multipartResolver</p><p>【<strong>注意！！！这个 bena 的 id 必须为：multipartResolver ， 否则上传文件会报 400 的错误！</strong>】</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"multipartResolver"</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultEncoding"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxUploadSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10485760"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxInMemorySize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"40960"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename ()：获取上传文件的原名</strong></li><li> <strong> InputStream getInputStream ()：获取文件流</strong></li><li> <strong> void transferTo (File dest)：将上传文件保存到一个目录文件中</strong></li></ul></li><li><p>编写前端页面</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">8</span>/<span class="hljs-number">13</span><br>  Time: <span class="hljs-number">1</span>:<span class="hljs-number">38</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/upload"</span> enctype=<span class="hljs-string">"multipart/form-data"</span> method=<span class="hljs-string">"post"</span>&gt;<br>&lt;input type=<span class="hljs-string">"file"</span> name=<span class="hljs-string">"file"</span>&gt;<br>&lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"上传"</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure></li><li><p>上传请求</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><br><span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span><br><span class="hljs-meta">@RequestMapping("/upload")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> (<span class="hljs-string">"file"</span>)</span> CommonsMultipartFile file , HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException {<br>   <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">uploadFileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>   <span class="hljs-comment">//如果文件名为空，直接回到首页！</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-string">""</span>.equals(uploadFileName)){<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/"</span>;<br>   }<br>   System.out.println(<span class="hljs-string">"上传文件名 : "</span>+uploadFileName);<br>   <span class="hljs-comment">//上传路径保存设置</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);<br>   <span class="hljs-comment">//如果路径不存在，创建一个</span><br>   <span class="hljs-type">File</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>   <span class="hljs-keyword">if</span> (!realPath.exists()){<br>      realPath.mkdir();<br>   }<br>   System.out.println(<span class="hljs-string">"上传文件保存地址："</span>+realPath);<br>   <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> file.getInputStream(); <span class="hljs-comment">//文件输入流</span><br>   <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span><br>   <span class="hljs-comment">//读取写出</span><br>   <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>   <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>   <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>){<br>      os.write(buffer,<span class="hljs-number">0</span>,len);<br>      os.flush();<br>   }<br>   os.close();<br>   is.close();<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping("/upload2")</span><br><span class="hljs-keyword">public</span> String  <span class="hljs-title function_">fileUpload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam("file")</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException {<br>   <span class="hljs-comment">//上传路径保存设置</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);<br>   <span class="hljs-type">File</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>   <span class="hljs-keyword">if</span> (!realPath.exists()){<br>      realPath.mkdir();<br>   }<br>   <span class="hljs-comment">//上传文件地址</span><br>   System.out.println(<span class="hljs-string">"上传文件保存地址："</span>+realPath);<br>   <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br>   file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath +<span class="hljs-string">"/"</span>+ file.getOriginalFilename()));<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value="/download")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">downloads</span><span class="hljs-params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception{<br>   <span class="hljs-comment">//要下载的图片地址</span><br>   <span class="hljs-type">String</span>  <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);<br>   <span class="hljs-type">String</span>  <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"c.jpg"</span>;<br><br>   <span class="hljs-comment">//1、设置response 响应头</span><br>   response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span><br>   response.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>); <span class="hljs-comment">//字符编码</span><br>   response.setContentType(<span class="hljs-string">"multipart/form-data"</span>); <span class="hljs-comment">//二进制传输数据</span><br>   <span class="hljs-comment">//设置响应头</span><br>   response.setHeader(<span class="hljs-string">"Content-Disposition"</span>,<br>           <span class="hljs-string">"attachment;fileName="</span>+URLEncoder.encode(fileName, <span class="hljs-string">"UTF-8"</span>));<br><br>   <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path,fileName);<br>   <span class="hljs-comment">//2、 读取文件--输入流</span><br>   InputStream input=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>   <span class="hljs-comment">//3、 写出文件--输出流</span><br>   <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>   <span class="hljs-type">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>   <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>   <span class="hljs-comment">//4、执行 写出操作</span><br>   <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>){<br>       out.write(buff, <span class="hljs-number">0</span>, index);<br>       out.flush();<br>  }<br>   out.close();<br>   input.close();<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>前端</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/download"</span>&gt;</span>点击下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/posts/18155/"/>
    <url>/posts/18155/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring 理念：使现有技术更加实用。本身就是一个大杂烩，整合现有的框架技术</p><ul><li>SSM: SpringMVC + Spring + Mybatis</li><li>spring 是开源的免费的框架。</li><li>spring 是一个轻量级的，非入侵式的。</li><li>控制反转（IOC），面向切面编程 (AOP)。</li><li>支持事务处理，对框架整合的支持。</li></ul><p>官网 : <a href="http://spring.io/">http://spring.io/</a></p><p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p><p>GitHub : <a href="https://github.com/spring-projects">https://github.com/spring-projects</a></p><p>maven 依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>总结：spring 是一个轻量级的控制反转 (IOC) 和面向切面编程 (AOP) 的框架。</strong></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>Spring Boot</strong></p><ul><li>Spring Boot 是 Spring 的一套快速配置脚手架</li><li>基于 Spring Boot 快速开发单个微服务</li><li> Spring Boot 专注于快速、方便集成的单个微服务个体</li><li>约定大于配置</li></ul><p><strong>Spring Cloud</strong></p><ul><li>Spring Cloud 是基于 Spring Boot 实现的</li><li> Spring Cloud 关注全局的服务治理框架</li></ul><h1 id="IOC理论"><a href="#IOC理论" class="headerlink" title="IOC理论"></a>IOC 理论</h1><p><strong>IOC：控制反转</strong></p><p>在学习 spring 之前，我们对 dao 和 service 的一般步骤：</p><ol><li>UserDao</li><li>UserDaoImp</li><li>UserSevice</li><li>UserServiceImp</li></ol><p>这样的方法，用户的需求会影响我们原来的代码，我们需要根据用户的需求去修改我们原来的代码，假如我们的代码量巨大，我们的修改成本将会非常巨大</p><ul><li>之前是程序主动创建对象，控制权在程序员的手上</li><li>以后我们通过注入把控制权放到用户手上</li><li>这种思想，让我们不用去管理对象的创建了，系统的耦合性大大降低，我们就可以专注于业务的实现了，这就是 IOC 思想</li></ul><p><strong>控制反转 IoC (Inversion of Control)，是一种设计思想，DI (依赖注入) 是实现 IoC 的一种方法</strong></p><p><strong>控制反转是一种通过描述（XML 或注解）并通过第三方去生产或获取特定对象的方式。在 Spring 中实现控制反转的是 IoC 容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h1 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h1><ol><li><p>导入 Lombok</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> {<br>   <span class="hljs-keyword">private</span> String name;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 Spring 配置文件 applicationContext.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">使用Spring创建对象，在Spring中这些都称为Bean</span><br><span class="hljs-comment">id = 变量名</span><br><span class="hljs-comment">class = new 的对象</span><br><span class="hljs-comment">property 相当于给对象中的属性设置一个值</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Hello"</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">value：具体的值</span><br><span class="hljs-comment">ref：Spring容器已经创建好的对象</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Spring"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zlw.pojo.Hello;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-comment">//获取Spring上下文对象</span><br>      <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">"applicationContext.xml"</span>);<br>      <span class="hljs-comment">//我们的对象都在Spring中管理了，我们需要使用，直接get调用就行了</span><br>      <span class="hljs-type">Hello</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Hello) context.getBean(<span class="hljs-string">"hello"</span>);<br>      System.out.println(hello);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p><strong>所谓的 IoC, 一句话搞定：对象由 Spring 来创建，管理，装配！</strong></p><h1 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC 创建对象的方式</h1><ul><li>使用无参构造创建对象，默认实现</li><li>使用有参构造</li><li>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了</li></ul><h1 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring 配置</h1><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.User"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"AWEI"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"user2"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>如果配置了别名，我们也可以使用别名取到这个对象</p><h2 id="Bean配置"><a href="#Bean配置" class="headerlink" title="Bean配置"></a>Bean 配置</h2><p>id：bean 的唯一标识符，相当于对象名</p><p>class：bean 对象所对应的全限定名（包名 + 类型）</p><p>name：别名，可以同时取多个别名</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.User"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"user2 user3 user4,user5,user6"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"AWEI"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>一般用于团队开发，可以将多个配置文件导入合并成一个配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans1.xml"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans2.xml"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans3.xml"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI 依赖注入</h1><h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><ul><li><p>下标赋值（下标指构造函数所带参数的下标）</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.User"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"AWEI"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>类型赋值（不建议使用）</p> <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.User"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"java.lang.String"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"AWEI"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>参数名赋值</p> <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.User"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"AWEI"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="Set方式注入"><a href="#Set方式注入" class="headerlink" title="Set方式注入"></a>Set 方式注入</h2><ul><li>依赖注入：Set 注入<ul><li>依赖：bean 对象的创建依赖于容器</li><li>注入：bean 对象中的所有属性，由容器来注入</li></ul></li></ul><p><strong>环境搭建</strong></p><ol><li><p>复杂类型</p><p>Address 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> {<br>   <span class="hljs-keyword">private</span> String address;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>真实测试对象</p><p>Student 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> {<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> Address address;<br>   <span class="hljs-keyword">private</span> String[] book;<br>   <span class="hljs-keyword">private</span> List&lt;String&gt; hobbies;<br>   <span class="hljs-keyword">private</span> Map&lt;String, String&gt; card;<br>   <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<br>   <span class="hljs-keyword">private</span> String wife;<br>   <span class="hljs-keyword">private</span> Properties info;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>beans.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Address"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"广东"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Student"</span>&gt;</span><br><span class="hljs-comment">&lt;!--普通值注入 value--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"AWEI"</span>/&gt;</span><br><span class="hljs-comment">&lt;!--复杂类型注入 ref--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"address"</span>/&gt;</span><br><span class="hljs-comment">&lt;!--数组类型注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"book"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--List类型注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobbies"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听音乐<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>写代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>看书<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--Map类型注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"card"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"身份证"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"123456789012345678"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"银行卡"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"123456213213213345678"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--Set类型注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"games"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>CSGO<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--null注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"wife"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--Properties类型注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"info"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"学号"</span>&gt;</span>202122223333<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"性别"</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"姓名"</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"password"</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">Student(name=AWEI, </span><br><span class="hljs-comment">address=Address(address=广东), </span><br><span class="hljs-comment">book=[语文, 数学, 英语], </span><br><span class="hljs-comment">hobbies=[听音乐, 写代码, 看书], </span><br><span class="hljs-comment">card={身份证=123456789012345678, 银行卡=123456213213213345678}, </span><br><span class="hljs-comment">games=[LOL, CSGO], </span><br><span class="hljs-comment">wife=null, </span><br><span class="hljs-comment">info={学号=202122223333, 性别=男, password=123456, 姓名=张三, username=root})</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zlw.pojo.Student;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">"beans.xml"</span>);<br>      <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) context.getBean(<span class="hljs-string">"student"</span>);<br>      System.out.println(student);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="扩展方式注入"><a href="#扩展方式注入" class="headerlink" title="扩展方式注入"></a>扩展方式注入</h2><p>p 命名空间注入和 c 命名空间注入</p><p>需要导入 xml 约束</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:p="http://www.springframework.org/schema/p"<br>       xmlns:c="http://www.springframework.org/schema/c"<br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">"http://www.springframework.org/schema/c"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.User"</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">"19"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"张三"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.User"</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"李四"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean 的作用域</h1><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td>singleton</td><td>(默认) 将每个 Spring IoC 容器的单个 bean 定义范围限定为单个对象实例。</td></tr><tr><td>prototype</td><td> 将单个 bean 定义的作用域限定为任意数量的对象实例。</td></tr><tr><td>request</td><td> 将单个 bean 定义的范围限定为单个 HTTP 请求的生命周期。也就是说，每个 HTTP 请求都有一个在单个 bean 定义后面创建的 bean 实例。仅在可感知网络的 Spring <code>ApplicationContext</code> 中有效。</td></tr><tr><td>session</td><td> 将单个 bean 定义的范围限定为 HTTP <code>Session</code> 的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code> 上下文中有效。</td></tr><tr><td>application</td><td> 将单个 bean 定义的范围限定为 <code>ServletContext</code> 的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code> 上下文中有效。</td></tr><tr><td>websocket</td><td> 将单个 bean 定义的范围限定为 <code>WebSocket</code> 的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code> 上下文中有效。</td></tr></tbody></table><ol><li>单例模式 singleton（spring 默认机制）</li><li>原型模式 prototype，与单例模式相反</li><li>剩下的 request，session，application，websocket 在 web 下使用</li></ol><h1 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean 的自动装配</h1><ul><li>自动装配是 Spring 满足 bean 依赖的一种方式</li><li> Spring 会在上下文中自动查找，并自动给 bean 装配属性</li></ul><p>在 Spring 中一共有三种装配的方式</p><ol><li><p>在 xml 中显示的配置</p></li><li><p>在 Java 中显示的配置</p></li><li><p><strong>隐式的自动装配 bean</strong></p></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>环境搭建：</p><ul><li><p>定义一个人有两只宠物</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Cat"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Dog"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.People"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"AWEI"</span> <span class="hljs-attr">p:cat-ref</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">p:dog-ref</span>=<span class="hljs-string">"dog"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>Byname 自动装配：byname 会自动查找，和自己对象 set 对应的值对应的 id</p><p>保证所有 id 唯一，并且和 set 注入的值一致</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Cat"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Dog"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.People"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"AWEI"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byName"</span>/&gt;</span><br>ans&gt;<br></code></pre></td></tr></tbody></table></figure></li><li><p>Bytype 自动装配：byType 会自动查找，和自己对象属性相同的 bean</p><p>保证所有的 class 唯一</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Cat"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog111"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Dog"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.People"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"AWEI"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byType"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h1 id="使用注解实现自动配置"><a href="#使用注解实现自动配置" class="headerlink" title="使用注解实现自动配置"></a>使用注解实现自动配置</h1><ul><li>基于注解的配置的引入提出了一个问题，即这种方法是否比 XML “更好”。简短的答案是 “取决于情况”。长话短说，每种方法都有其优缺点，通常，由开发人员决定哪种策略更适合他们</li></ul><p>使用注解须知:</p><ol><li><p>导入约束：context，覆盖 schemaLocation</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context="http://www.springframework.org/schema/context"<br><br>xsi:schemaLocation="http://www.springframework.org/schema/beans <br>http://www.springframework.org/schema/beans/spring-beans.xsd<br>http://www.springframework.org/schema/context<br>http://www.springframework.org/schema/context/spring-context.xsd"<br></code></pre></td></tr></tbody></table></figure></li><li><p>配置注解支持</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>作用：</p><ul><li><p>进行注解驱动注册，从而使注解生效</p></li><li><p>用于激活那些已经在 spring 容器里注册过的 bean 上面的注解，也就是显示的向 Spring 注册</p></li><li><p>如果不扫描包，就需要手动配置 bean</p></li><li><p>如果不加注解驱动，则注入的值为 null！</p></li></ul></li></ol><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p><strong>@Autowired 是根据类型进行自动装配的，如果需要按名称进行装配，则需要配合 @Qualifier 使用；</strong></p><p>该注解在属性上使用，也可以在 set 上使用</p><p>使用该注解后，我们可以不用编写 set 方法了</p><p><strong>@Autowired (required=false)  说明：false，对象可以为 null；true，对象必须存对象，不能为 null。</strong></p><p>pojo 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> {<br><span class="hljs-meta">@Autowired(required = false)</span><br><span class="hljs-keyword">private</span> Dog dog;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Cat cat;<br><span class="hljs-keyword">private</span> String name;<br>}<br></code></pre></td></tr></tbody></table></figure><p>xml 配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Cat"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Dog"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.People"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p><strong>@Autowired 根据类型装配，如果同一类型不唯一，那么就按照 id，这时候就要写 @Qualifier</strong></p><p>如果 @Autowired 自动装配环境比较复杂。自动装配无法通过一个注解完成的时候就可以使用 @Qualifier</p><p>pojo 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> {<br>   <span class="hljs-meta">@Autowired(required = false)</span><br>   <span class="hljs-meta">@Qualifier</span> (value = <span class="hljs-string">"dog22"</span>)<br>   <span class="hljs-keyword">private</span> Dog dog;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-meta">@Qualifier(value = "cat11")</span><br>   <span class="hljs-keyword">private</span> Cat cat;<br>   <span class="hljs-keyword">private</span> String name;<br>}<br></code></pre></td></tr></tbody></table></figure><p>xml 配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat11"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Cat"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat111"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Cat"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog22"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Dog"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog222"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.Dog"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.pojo.People"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p><strong>@Resource 默认通过 byName 实现，如果找不到，通过 byType 实现</strong></p><p>使用 @Resource (name=”dog11”) 也可以实现</p><p>区别：</p><ul><li>@Autowire 通过 byType 实现，而且必须要求这个对象存在</li><li> @Resource 默认通过 byName 实现，如果找不到，通过 byType 实现，在两种方式都找不到的情况下报错</li><li>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired 先 byType，@Resource 先 byName。</li></ul><h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><p>在配置文件当中，要引入一个 context 约束，以及配置注解支持</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>指定扫描的包，这个包下的注解即可生效</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p><strong>@Component</strong> 注解实现 Bean 的自动装配</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//@Component 组件</span><br><span class="hljs-comment">//等价于   &lt;bean id="user" class="com.zlw.pojo.User"/&gt;</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">"AWEI"</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p><strong>@Value</strong> 实现属性注入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-comment">//相当于  &lt;property name="name" value="AWEI"/&gt;</span><br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"AWEI"</span>)<br>   <span class="hljs-keyword">public</span> String name;<br>}<br></code></pre></td></tr></tbody></table></figure><p>也可以给 set 方法注入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-keyword">public</span> String name;<br>   <span class="hljs-comment">//相当于  &lt;property name="name" value="AWEI"/&gt;</span><br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"AWEI"</span>)<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span> {<br>      <span class="hljs-built_in">this</span>.name = name;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Component-三个衍生注解"><a href="#Component-三个衍生注解" class="headerlink" title="@Component 三个衍生注解"></a>@Component 三个衍生注解</h2><p>在 web 开发的 MVC 三层结构中使用，三个注解的功能一样，相当于 @Component，都是代表把某个类注册到 Spring，装配 Bean</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h3><p>dao 层</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> {<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><p>service 层</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> {<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p>servlet 层</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> {<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="自动装配注解"><a href="#自动装配注解" class="headerlink" title="自动装配注解"></a>自动装配注解</h2><h3 id="Autowired-1"><a href="#Autowired-1" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>@Autowired 是根据类型进行自动装配的，如果需要按名称进行装配，则需要配合 @Qualifier 使用；</p><h3 id="Resource-1"><a href="#Resource-1" class="headerlink" title="@Resource"></a>@Resource</h3><p>@Resource 默认通过 byName 实现，如果找不到，通过 byType 实现</p><h3 id="Nullable"><a href="#Nullable" class="headerlink" title="@Nullable"></a>@Nullable</h3><p>字段标记了这个注解，代表字段可以为 null</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><p>该注解限定的是作用域</p><p>取值如下</p><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td>singleton</td><td>(默认) 将每个 Spring IoC 容器的单个 bean 定义范围限定为单个对象实例。</td></tr><tr><td>prototype</td><td> 将单个 bean 定义的作用域限定为任意数量的对象实例。</td></tr><tr><td>request</td><td> 将单个 bean 定义的范围限定为单个 HTTP 请求的生命周期。也就是说，每个 HTTP 请求都有一个在单个 bean 定义后面创建的 bean 实例。仅在可感知网络的 Spring <code>ApplicationContext</code> 中有效。</td></tr><tr><td>session</td><td> 将单个 bean 定义的范围限定为 HTTP <code>Session</code> 的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code> 上下文中有效。</td></tr><tr><td>application</td><td> 将单个 bean 定义的范围限定为 <code>ServletContext</code> 的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code> 上下文中有效。</td></tr><tr><td>websocket</td><td> 将单个 bean 定义的范围限定为 <code>WebSocket</code> 的生命周期。仅在可感知网络的 Spring <code>ApplicationContext</code> 上下文中有效。</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>XML 与注解比较</strong></p><ul><li>XML 可以适用任何场景 ，结构清晰，维护方便</li><li>注解不是自己提供的类使用不了，开发简单方便</li></ul><p><strong>xml 与注解整合开发</strong> ：推荐最佳实践</p><ul><li>xml 管理 Bean</li><li> 注解完成属性注入</li><li>使用过程中， 可以不用扫描，扫描是为了类上的注解  </li></ul><h1 id="使用Java的方式配置Spring"><a href="#使用Java的方式配置Spring" class="headerlink" title="使用Java的方式配置Spring"></a>使用 Java 的方式配置 Spring</h1><p> Java 配置支持中的主要注解是 <strong>@Configuration 注解 的类</strong>和 <strong>@Bean  注解 的方法。</strong></p><p><strong>@Configuration    指明该类是个配置类</strong><br><strong>@ComponentScan    指定扫描包，扫描之后不用在下面使用 @Bean 注解，在实体类上使用 @Component 即可，两者二选一</strong></p><p>新建一个配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.config;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//@Configuration    指明该类是个配置类</span><br><span class="hljs-comment">//@ComponentScan    指定扫描包，扫描之后不用在下面使用 @Bean 注解,两者二选一</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan("com.zlw.pojo")</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XmlConfig</span> {<br><span class="hljs-comment">//装配bean，方法名等于bean的id名</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span>{<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-meta">@Value</span> (<span class="hljs-string">"AWEI"</span>)<br>   <span class="hljs-keyword">private</span> String name;<br>}<br></code></pre></td></tr></tbody></table></figure><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zlw.config.XmlConfig;<br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(XmlConfig.class);<br>      <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">"user"</span>, User.class);<br>      System.out.println(user.getName());<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>假如你有多个配置类，使用 @import (配置类的对象) 注解，导入成一个类之类，相当于一个 xml</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式是 SpringAOP 的底层</p><p>代理模式：</p><ul><li>静态代理</li><li>动态代理</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p><strong>静态代理角色分析</strong></p><ul><li><p>抽象角色：一般使用接口或者抽象类来实现抽象角色</p></li><li><p>真实角色：被代理的角色</p></li><li><p>代理角色：代理真实角色；代理真实角色后，一般会做一些附属的操作 </p></li><li><p>客户：使用代理角色来进行一些操作 </p></li></ul><p><strong>抽象角色：结婚接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//抽象角色：结婚接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Marry</span> {<br>   <span class="hljs-comment">//抽象方法：结婚</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">marry</span><span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>真实角色： 人  需要去结婚</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//真实角色： 人  需要去结婚</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Marry</span> {<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span> <span class="hljs-params">(String name)</span> {<br><span class="hljs-built_in">this</span>.name = name;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">marry</span> <span class="hljs-params">()</span> {<br>System.out.println(name + <span class="hljs-string">" 去结婚"</span>);<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>代理角色：婚庆公司</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//代理角色：婚庆公司</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Marry</span> {<br>   <span class="hljs-comment">//代理的真实角色</span><br>   <span class="hljs-keyword">private</span> People people;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span> <span class="hljs-params">(People people)</span> {<br>      <span class="hljs-built_in">this</span>.people = people;<br>   }<br><br>   <span class="hljs-comment">//准备婚礼</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"准备婚礼"</span>);<br>   }<br><br>   <span class="hljs-comment">//婚礼后的工作</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"婚礼后的工作"</span>);<br>   }<br><br>   <span class="hljs-comment">//代理的一系列结婚操作</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">marry</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-built_in">this</span>.prepare();<br>      people.marry();<br>      <span class="hljs-built_in">this</span>.after();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>用户：找婚庆公司</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//用户： 你 作为一个 人 去婚庆公司办理结婚工作</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">You</span>{<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-comment">//张三</span><br><span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">"张三"</span>);<br><span class="hljs-comment">//张三找婚庆公司</span><br><span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(people);<br><span class="hljs-comment">//婚庆公司的一系列操作</span><br>proxy.marry();<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>静态代理的好处:</strong></p><ul><li>可以使得我们的真实角色更加专一，不再去关注一些公共的事情 </li><li> 公共的业务由代理来完成。实现了业务的分工</li><li>公共业务的扩展变得更加方便 </li></ul><p><strong>缺点 :</strong></p><ul><li>类多了，多了代理类，工作量变大了。开发效率降低 </li></ul><p>我们想要静态代理的好处，又不想要静态代理的缺点，所以，就有了动态代理！</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li><p>动态代理的角色和静态代理的一样 .</p></li><li><p> 动态代理的代理类是动态生成的。静态代理的代理类是我们提前写好的</p></li><li><p>动态代理分为两类：一类是基于接口动态代理，一类是基于类的动态代理</p></li><li><ul><li>基于接口的动态代理 –&gt;JDK 动态代理</li><li>基于类的动态代理 –&gt;cglib</li><li> 现在用的比较多的是 javasist (java 字节码) 来生成动态代理。</li></ul></li></ul><h3 id="JDK-的动态代理"><a href="#JDK-的动态代理" class="headerlink" title="JDK 的动态代理"></a><strong>JDK 的动态代理</strong></h3><p><strong>核心 : InvocationHandler 类  和   Proxy 类</strong></p><p>定义一个抽象角色</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> {<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>真实角色</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"增加了一个用户"</span>);<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"删除了一个用户"</span>);<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"更新了一个用户"</span>);<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"查询了一个用户"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>调用处理类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.demo04;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//使用这个类动态生成代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> {<br><span class="hljs-comment">//被代理的接口</span><br><span class="hljs-keyword">private</span> Object object;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObject</span> <span class="hljs-params">(Object object)</span> {<br><span class="hljs-built_in">this</span>.object = object;<br>}<br><br><span class="hljs-comment">//生成代理类</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 三个参数</span><br><span class="hljs-comment"> * loader: 用哪个类加载器去加载代理对象</span><br><span class="hljs-comment"> * interfaces: 动态代理类需要实现的接口</span><br><span class="hljs-comment"> * h: 动态代理方法在执行时，会调用 h 里面的 invoke 方法去执行</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(), object.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>}<br><br><span class="hljs-comment">//处理代理实例，并返回结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* proxy：就是代理对象，newProxyInstance 方法的返回对象</span><br><span class="hljs-comment">* method：调用的方法</span><br><span class="hljs-comment">* args: 方法中的参数</span><br><span class="hljs-comment">* */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span> <span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable {<br>log(method.getName());<br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(object, args);<br><span class="hljs-keyword">return</span> result;<br>}<br><span class="hljs-comment">//代理增强方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span>{<br>System.out.println(<span class="hljs-string">"使用了"</span>+message+<span class="hljs-string">"方法"</span>);<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>用户</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.demo04;<br><br><span class="hljs-keyword">import</span> com.zlw.demo03.Marry;<br><span class="hljs-keyword">import</span> com.zlw.demo03.People;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-comment">//真实角色</span><br>      <span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userServiceImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>      <br>      <span class="hljs-comment">//代理角色：当前是没有的</span><br>      <span class="hljs-type">ProxyInvocationHandler</span> <span class="hljs-variable">proxyInvocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyInvocationHandler</span>();<br>      <span class="hljs-comment">//通过调用程序处理角色来处理我们要调用的接口对象</span><br>      proxyInvocationHandler.setObject(userServiceImpl);<br>      <span class="hljs-comment">//生成动态代理类</span><br>      <span class="hljs-type">UserService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (UserService) proxyInvocationHandler.getProxy();<br>      proxy.add();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="动态代理总结"><a href="#动态代理总结" class="headerlink" title="动态代理总结"></a>动态代理总结</h2><ul><li>公共的业务由代理来完成。实现了业务的分工</li><li>公共业务发生扩展时变得更加集中和方便 </li><li> 一个动态代理，一般代理某一类业务</li><li>一个动态代理可以代理多个类，代理的是接口！</li></ul><p>动态代理的工具类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.demo04;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//使用这个类动态生成代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> {<br>   <span class="hljs-comment">//被代理的接口</span><br>   <span class="hljs-keyword">private</span> Object object;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObject</span> <span class="hljs-params">(Object object)</span> {<br>      <span class="hljs-built_in">this</span>.object = object;<br>   }<br><br>   <span class="hljs-comment">//生成代理类</span><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * newProxyInstance三个参数</span><br><span class="hljs-comment">    * loader: 用哪个类加载器去加载代理对象</span><br><span class="hljs-comment">    * interfaces: 动态代理类需要实现的接口</span><br><span class="hljs-comment">    * h: 动态代理方法在执行时，会调用 h 里面的 invoke 方法去执行</span><br><span class="hljs-comment">    * */</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(), object.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>   }<br><br>   <span class="hljs-comment">//处理代理实例，并返回结果</span><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * invoke三个参数</span><br><span class="hljs-comment">   * proxy：就是代理对象，newProxyInstance 方法的返回对象</span><br><span class="hljs-comment">   * method：调用的方法</span><br><span class="hljs-comment">   * args: 方法中的参数</span><br><span class="hljs-comment">   * */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span> <span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable {<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(object, args);<br>      <span class="hljs-keyword">return</span> result;<br>   }<br>   <span class="hljs-comment">//代理增强方法。。。</span><br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>在软件业，AOP 为 Aspect Oriented Programming 的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP 是 OOP 的延续，是软件开发中的一个热点，也是 Spring 框架中的一个重要内容，是函数式编程的一种衍生范型。利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><strong>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP 是 OOP 的延续，是软件开发中的一个热点，也是 Spring 框架中的一个重要内容，是函数式编程的一种衍生范型。利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</strong></p><h2 id="AOP-中的相关概念"><a href="#AOP-中的相关概念" class="headerlink" title="AOP 中的相关概念"></a>AOP 中的相关概念</h2><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等 ….</li><li>Aspect（切面）： Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。<strong>（一个类）</strong></li><li>Advice（增强）：Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。<strong>（一个方法）</strong></li><li>Target（目标对象）：织入 Advice 的目标对象。<strong>（一个对象）</strong></li><li>Proxy（代理）：向目标对象应用通知之后创建的对象。</li><li>Joint point（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</li><li>Pointcut（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</li></ul><p><strong>AOP 的作用：提供声明式事务；允许用户自定义切面</strong></p><h2 id="使用Spring实现AOP"><a href="#使用Spring实现AOP" class="headerlink" title="使用Spring实现AOP"></a>使用 Spring 实现 AOP</h2><p>首先导入 AOP 依赖包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>然后在 xsi:schemaLocation 下导入 xml 约束</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://www.springframework.org/schema/aop <br>http://www.springframework.org/schema/aop/spring-aop.xsd<br></code></pre></td></tr></tbody></table></figure><h3 id="方式一：使用Spring的API接口"><a href="#方式一：使用Spring的API接口" class="headerlink" title="方式一：使用Spring的API接口"></a>方式一：使用 Spring 的 API 接口</h3><p>编写业务接口和实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> {<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"增加了一个用户"</span>);<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"删除了一个用户"</span>);<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"更新了一个用户"</span>);<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"查询了一个用户"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>编写增强类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.log;<br><br><span class="hljs-keyword">import</span> org.springframework.aop.MethodBeforeAdvice;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeforeLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodBeforeAdvice</span> {<br>   <span class="hljs-comment">//method：要执行的目标对象的方法</span><br>   <span class="hljs-comment">//args：参数</span><br>   <span class="hljs-comment">//target：目标对象</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span> <span class="hljs-params">(Method method, Object[] objects, Object target)</span> <span class="hljs-keyword">throws</span> Throwable {<br>      System.out.println(target.getClass().getName() + <span class="hljs-string">"的"</span> + method.getName() + <span class="hljs-string">"被执行了"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.log;<br><br><span class="hljs-keyword">import</span> org.springframework.aop.AfterReturningAdvice;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AfterReturningAdvice</span> {<br>   <span class="hljs-comment">//returnVaule: 返回值</span><br>   <span class="hljs-comment">//target: 目标对象</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span> <span class="hljs-params">(Object returnVaule, Method method, Object[] objects, Object target)</span> <span class="hljs-keyword">throws</span> Throwable {<br>      System.out.println(<span class="hljs-string">"执行了"</span> + method.getName() + <span class="hljs-string">"的返回结果为:"</span>+returnVaule);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>注册 bean</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--注册bean--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userServiceImpl"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.service.UserServiceImpl"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"beforeLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.log.BeforeLog"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.log.AfterLog"</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!--配置AOP:需要导入AOP约束--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--切入点 expression表达式：execution（修饰词返回值 类名.方法名(参数)）--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* com.zlw.service.UserServiceImpl.*(..))"</span>/&gt;</span><br>      <span class="hljs-comment">&lt;!--执行增强方法！--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"beforeLog"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zlw.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">"beans.xml"</span>);<br>      <span class="hljs-comment">//动态代理的是接口</span><br>      <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">"userServiceImpl"</span>);<br>      userService.add();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="方式二：使用自定义类实现AOP"><a href="#方式二：使用自定义类实现AOP" class="headerlink" title="方式二：使用自定义类实现AOP"></a>方式二：使用自定义类实现 AOP</h3><p>接口与实现类、测试方法与方法一一致</p><p>自定义的增强类（通知方法）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.diy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiyPointCut</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>{<br>      System.out.println(<span class="hljs-string">"--------方法执行前--------"</span>);<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>{<br>      System.out.println(<span class="hljs-string">"--------方法执行后--------"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>注册 bean</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--注册bean--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userServiceImpl"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.service.UserServiceImpl"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"beforeLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.log.BeforeLog"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.log.AfterLog"</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!--配置AOP:需要导入AOP约束--&gt;</span><br><br>   <span class="hljs-comment">&lt;!--方式二--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"diyPointCut"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.diy.DiyPointCut"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--自定义切面，ref需要引用的类--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"diyPointCut"</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--切入点--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"point"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* com.zlw.service.UserServiceImpl.*(..))"</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"point"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"after"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"point"</span>/&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="方式三：使用注解实现AOP"><a href="#方式三：使用注解实现AOP" class="headerlink" title="方式三：使用注解实现AOP"></a>方式三：使用注解实现 AOP</h3><p>接口与实现类、测试方法与方法一一致，在实现类之前需要加入 **@Component** 注解</p><p>注解切入增强</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.diy;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//使用注解方式实现AOP</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//标注这个类是切面</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationPointCut</span> {<br>   <span class="hljs-meta">@Before</span> (<span class="hljs-string">"execution(* com.zlw.service.UserServiceImpl.*(..))"</span>)<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>{<br>      System.out.println(<span class="hljs-string">"--------方法执行前--------"</span>);<br>   }<br><br>   <span class="hljs-meta">@After</span> (<span class="hljs-string">"execution(* com.zlw.service.UserServiceImpl.*(..))"</span>)<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>{<br>      System.out.println(<span class="hljs-string">"--------方法执行后--------"</span>);<br>   }<br>   <br>   <span class="hljs-comment">//在环绕增强中，我们可以给定一个参数，代表我们需要获取处理切入的点</span><br>   <span class="hljs-meta">@Around("execution(* com.zlw.service.UserServiceImpl.*(..))")</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable {<br>      <span class="hljs-comment">//签名</span><br>      System.out.println(joinPoint.getSignature());<br>      System.out.println(<span class="hljs-string">"环绕前"</span>);<br>      joinPoint.proceed();<br>      System.out.println(<span class="hljs-string">"环绕后"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--开启注解--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!--扫描类上的注解--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合 Mybatis</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>导入相关的 jar 包</p><ul><li><p>junit</p></li><li><p>mybatis</p></li><li><p>MySQL 数据库 JDBC</p></li><li><p>spring 相关的包</p></li><li><p>AOP 织入</p></li><li><p>mybatis-spring</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--AOP织入--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--spring操作数据库需要，spring-jdbc--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>编写配置文件</p></li><li><p>测试</p></li></ol><h2 id="Mybatis-Spring"><a href="#Mybatis-Spring" class="headerlink" title="Mybatis-Spring"></a>Mybatis-Spring</h2><ol><li><p>编写数据源文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useSSl=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 Mybatis-Spring 配置文件 <strong>spring-dao.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">"http://www.springframework.org/schema/c"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--加载配置文件--&gt;</span><br><span class="hljs-comment">&lt;!--DataSource:使用Spring的数据源替换mybatis的配置（c3p0 dbcp druid） 这里使用spring提供的JDBC--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:database.properties"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.driver}"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.url}"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.username}"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.password}"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactoryBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span>/&gt;</span><br><span class="hljs-comment">&lt;!--绑定mybatis配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"mybatis-config.xml"</span>/&gt;</span><br><span class="hljs-comment">&lt;!--绑定mapper.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath*:com/zlw/dao/*.xml"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--SqlSessionTemplate 相当于我们的 sqlSession--&gt;</span><br><span class="hljs-comment">&lt;!--只能使用构造器注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSession"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionTemplate"</span></span><br><span class="hljs-tag">      <span class="hljs-attr">c:sqlSessionFactory-ref</span>=<span class="hljs-string">"sqlSessionFactoryBean"</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 mybatis 配置文件 mybatis-config.xml（设置和别名部分）</p><p>由于开启了日志</p><p><strong>导入 log4j 的依赖</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>log4j 配置文件</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span>=<span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] %m%n</span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span>=<span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/zlw.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] %m%n</span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sq1.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></tbody></table></figure><p><strong>mybatis 配置文件</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">      <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="hljs-meta">      <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--日志--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"LOG4J"</span>/&gt;</span><br>      <span class="hljs-comment">&lt;!--驼峰命名--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapUnderscoreToCamelCase"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>      <span class="hljs-comment">&lt;!--缓存开启--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>把 Mybatis-Spring 配置文件导入到总的 Spring 配置文件 <strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw"</span>/&gt;</span><br><span class="hljs-comment">&lt;!--导入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapperImpl"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.dao.UserMapperImpl"</span> <span class="hljs-attr">p:sqlSessionTemplate-ref</span>=<span class="hljs-string">"sqlSession"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapperImpl2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.dao.UserMapperImpl2"</span> <span class="hljs-attr">p:sqlSessionFactory-ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写接口和实现类</p><p><strong>接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> {<br>   <span class="hljs-comment">//查询用户</span><br>   List&lt;User&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>实现类</strong></p><ul><li><p>使用原始方式</p><p>注入 bean</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapperImpl"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.dao.UserMapperImpl"</span> <span class="hljs-attr">p:sqlSessionTemplate-ref</span>=<span class="hljs-string">"sqlSession"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserMapper</span> {<br>   <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSessionTemplate;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSqlSessionTemplate</span> <span class="hljs-params">(SqlSessionTemplate sqlSessionTemplate)</span> {<br>      <span class="hljs-built_in">this</span>.sqlSessionTemplate = sqlSessionTemplate;<br>   }<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUser</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSessionTemplate.getMapper(UserMapper.class);<br>      <span class="hljs-keyword">return</span> mapper.getUser();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>使用 SqlSessionDaoSupport 抽象类</p><p>注入 bean</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapperImpl2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.dao.UserMapperImpl2"</span> <span class="hljs-attr">p:sqlSessionFactory-ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperImpl2</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserMapper</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUser</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUser();<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>测试使用</p><p>例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao;<br><br><span class="hljs-keyword">import</span> com.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperTest</span> {<br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">"applicationContext.xml"</span>);<br>      <span class="hljs-type">UserMapperImpl</span> <span class="hljs-variable">userMapperImpl</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">"userMapperImpl"</span>, UserMapperImpl.class);<br>      <span class="hljs-keyword">for</span> (User user : userMapperImpl.getUser()) {<br>         System.out.println(user);<br>      }<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>要么都成功，要么都失败</li><li>十分重要，涉及到数据一致性</li><li>确保完整性和一致性</li></ul><p>事务的 acid 原则：</p><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多个业务可能操作一个资源，防止数据损坏</li></ul></li><li>持久性<ul><li>事务一旦提交，无论系统发生什么问题，结果都不会被影响。</li></ul></li></ul><h2 id="spring中的事务"><a href="#spring中的事务" class="headerlink" title="spring中的事务"></a>spring 中的事务</h2><ul><li>声明式事务</li><li>编程式事务</li></ul><p> <strong> Spring 中七种 Propagation 类的事务属性详解：</strong></p><p> <strong>REQUIRED</strong>：支持当前事务，如果当前没有事务，就新建一个事务。<strong>这是默认选择。</strong> </p><p> <strong>SUPPORTS</strong>：支持当前事务，如果当前没有事务，就以非事务方式执行。 </p><p> <strong>MANDATORY</strong>：支持当前事务，如果当前没有事务，就抛出异常。 </p><p> <strong>REQUIRES_NEW</strong>：新建事务，如果当前存在事务，把当前事务挂起。 </p><p> <strong>NOT_SUPPORTED</strong>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 </p><p> <strong>NEVER</strong>：以非事务方式执行，如果当前存在事务，则抛出异常。 </p><p> <strong>NESTED</strong>：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</p><p><strong>为什么需要事务？</strong></p><ul><li>如果不配置事务，可能存在数据提交不一致的情况</li><li>如果我们不在 Spring 中去配置声明式事务，我们就需要手动在代码中配置事务</li><li>事务在项目中十分重要，涉及到数据的一致性和完整性</li></ul><h2 id="AOP实现事务织入"><a href="#AOP实现事务织入" class="headerlink" title="AOP实现事务织入"></a>AOP 实现事务织入</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">"http://www.springframework.org/schema/c"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/aop                     </span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/tx </span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--加载配置文件--&gt;</span><br>   <span class="hljs-comment">&lt;!--DataSource:使用Spring的数据源替换mybatis的配置（c3p0 dbcp druid） 这里使用spring提供的JDBC--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">location</span>=<span class="hljs-string">"classpath:db.properties"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.driver}"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.url}"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.username}"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${jdbc.password}"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span>/&gt;</span><br>      <span class="hljs-comment">&lt;!--绑定mybatis配置文件--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"mybatis-config.xml"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath*:com/zlw/dao/*.xml"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--SqlSessionTemplate 相当于我们的 sqlSession--&gt;</span><br>   <span class="hljs-comment">&lt;!--只能使用构造器注入--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSession"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionTemplate"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">c:sqlSessionFactory-ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!--配置声明式事务--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">p:dataSource-ref</span>=<span class="hljs-string">"dataSource"</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span><br>   <span class="hljs-comment">&lt;!--配置事务通知--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txAdvice"</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--给那些方法配置事务--&gt;</span><br>      <span class="hljs-comment">&lt;!--配置事务的传播特性--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"add"</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"update"</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"delete"</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"query"</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"*"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--配置事务切入--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* com.zlw.dao.*.*(..))"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/posts/15608/"/>
    <url>/posts/15608/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>环境：</p><ul><li>JDK 1.8</li><li>MySQL 8.0</li><li>Maven 3.6.3</li><li>IDEA</li></ul><p>回顾：</p><ul><li>JDBC</li><li>Mysql</li><li>Java 基础</li><li> Maven</li><li>Junit</li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是 Mybatis</h2><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Mybatis.png" alt="Mybatis"></p><ul><li>MyBatis 本是 apache 的一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/3406069">开源项目</a> iBatis, 2010<br>年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由 apache software foundation<br>迁移到了 [google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code/2346604)，并且改名为 MyBatis</li><li>2013 年 11 月迁移到 Github</li><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>它支持自定义 SQL、存储过程以及高级映射</li><li> MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</li><li> MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li></ul><p>如何获得 Mybatis：</p><ul><li><p>maven 仓库</p><p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p><a href="https://github.com/mybatis/mybatis-3">GitHub-Mybatis</a></p></li><li><p><a href="https://mybatis.org/mybatis-3/zh/index.html">Mybatis 中文文档</a></p></li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>数据库（jdbc），io 文件持久化</li></ul><p>为什么需要持久化？</p><p>有一些对象，不能让他丢掉，所以需要持久化。</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>Dao 层</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h2 id="为什么需要Mybatis？"><a href="#为什么需要Mybatis？" class="headerlink" title="为什么需要Mybatis？"></a>为什么需要 Mybatis？</h2><ul><li>帮助程序员将数据存入到数据库中</li><li>方便</li><li>传统的 JDBC 代码太过复杂，Mybatis 用于简化 JDBC</li><li> 优点：<ul><li>简单易学</li><li>灵活</li><li>解除 sql 与程序代码的耦合，sql 和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的 orm 字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供 xml 标签，支持编写动态 sql。</li></ul></li></ul><h1 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个 Mybatis 程序</h1><p>思路：搭建环境–&gt; 导入 Mybatis–&gt; 编写代码–&gt; 测试</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>搭建数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `mybatis`;<br><br>USE `mybatis`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br>(<br>    `id`       <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `name`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE <span class="hljs-operator">=</span> innodb,<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`(`id`, `name`, `password`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">'张三'</span>, <span class="hljs-string">'1234567'</span>),<br>       (<span class="hljs-number">2</span>, <span class="hljs-string">'李四'</span>, <span class="hljs-string">'1232456'</span>),<br>       (<span class="hljs-number">3</span>, <span class="hljs-string">'王五'</span>, <span class="hljs-string">'1245474'</span>);<br></code></pre></td></tr></tbody></table></figure><p>新建普通 maven 项目，删除 src 作为父工程</p><p>导入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis-Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h2><ul><li><p>编写 mybatis 核心配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="hljs-meta">        <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"db.properties"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${driver}"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${url}"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${username}"</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${password}"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">""</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 mybatis 工具类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//sqlSessionFactory--&gt;sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtils</span> {<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>   <span class="hljs-keyword">static</span> {<br>      <span class="hljs-keyword">try</span> {<br>         <span class="hljs-comment">//获取sqlSessionFactory对象</span><br>         <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">"mybatis-config.xml"</span>;<br>         <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>         sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>      } <span class="hljs-keyword">catch</span> (Exception e) {<br>         e.printStackTrace();<br>      }<br>   }<br><br>   <span class="hljs-comment">//获取SqlSession对象</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><ul><li><p>实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> String password;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> id;<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span> {<br>      <span class="hljs-built_in">this</span>.id = id;<br>   }<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> name;<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span> {<br>      <span class="hljs-built_in">this</span>.name = name;<br>   }<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">return</span> password;<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span> <span class="hljs-params">(String password)</span> {<br>      <span class="hljs-built_in">this</span>.password = password;<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span> <span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String password)</span> {<br>      <span class="hljs-built_in">this</span>.id = id;<br>      <span class="hljs-built_in">this</span>.name = name;<br>      <span class="hljs-built_in">this</span>.password = password;<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span> <span class="hljs-params">()</span> {<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>Mapper 接口</p></li><li><p>接口实现类由原来的实现类转变成一个 Mapper 配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">      <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="hljs-meta">      <span class="hljs-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.dao.UserMapper"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUsers"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.User"</span>&gt;</span><br>      SELECT *<br>      FROM<br>            Mybatis.User<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> com.zlw.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperTest</span> {<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-comment">//获得SqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-comment">//执行sql</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; users = mapper.getUsers();<br>        <span class="hljs-keyword">for</span> (User user : users) {<br>            System.out.println(user);<br>        }<br>        <span class="hljs-comment">//关闭SqlSession</span><br>        sqlSession.close();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h2><ul><li>绑定的接口错误</li><li> maven 导出资源问题</li><li>返回类型错误</li><li>配置文件没有注册</li><li>方法名不对</li></ul><h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><p>增删改查</p><h3 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间-namespace"></a>命名空间 - namespace</h3><p>namespace 中的包名要和 mapper 接口的包名一致</p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>选择，查询语句</p><ul><li><p>id：就是对应的 namespace 中的方法名</p></li><li><p>resultType：Sql 语句执行的返回值</p></li><li><p>parameterType：参数类型</p></li><li><p>接口方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户</span><br>User <span class="hljs-title function_">getUserById</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>sql 语句</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.User"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span>&gt;</span><br>    SELECT *<br>    FROM<br>            Mybatis.User<br>    WHERE<br>            Id = #{id};<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>{<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUserById(<span class="hljs-number">2</span>);<br>    System.out.println(user);<br>    sqlSession.close();<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><ul><li><p>接口方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//insert一个用户</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span> <span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>sql 语句</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"addUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.zlw.pojo.User"</span>&gt;</span><br>    INSERT INTO<br>            Mybatis.User(Id, Name, Password)<br>    VALUES<br>            (#{id}, #{name}, #{password});<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//增删改需要提交事务</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span> <span class="hljs-params">()</span> {<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4</span>, <span class="hljs-string">"赵六"</span>, <span class="hljs-string">"213123"</span>));<br>    <span class="hljs-keyword">if</span> (i!=<span class="hljs-number">0</span>){<br>        System.out.println(<span class="hljs-string">"插入成功!"</span>);<br>    }<br>    <span class="hljs-comment">//提交事务</span><br>    sqlSession.commit();<br>    sqlSession.close();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><ul><li><p>接口方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改用户</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span> <span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>sql 语句</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.zlw.pojo.User"</span>&gt;</span><br>   UPDATE Mybatis.User<br>   SET<br>         Name     = #{name},<br>         Password = #{password}<br>   WHERE<br>         Id = #{id};<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>   <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"李四"</span>, <span class="hljs-string">"11112222"</span>));<br>   <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) {<br>      System.out.println(<span class="hljs-string">"修改成功!"</span>);<br>   }<br>   sqlSession.commit();<br>   sqlSession.close();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><ul><li><p>接口方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除用户</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>sql 语句</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span>&gt;</span><br>   delete<br>   from<br>         Mybatis.User<br>   where<br>         Id = #{id};<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>   <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.deleteUser(<span class="hljs-number">4</span>);<br>   <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) {<br>      System.out.println(<span class="hljs-string">"删除成功"</span>);<br>   }<br>   sqlSession.commit();<br>   sqlSession.close();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h1 id="Map传参"><a href="#Map传参" class="headerlink" title="Map传参"></a>Map 传参</h1><p>假设我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用 Map</p><p>Map 传递参数，直接在 sql 中取出 key 即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">parameterType=<span class="hljs-string">"map"</span><br></code></pre></td></tr></tbody></table></figure><p>对象传递参数，直接在 sql 中去对象的属性即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">parameterType=<span class="hljs-string">"com.zlw.pojo.User"</span><br></code></pre></td></tr></tbody></table></figure><p>只有一个基本类型参数的情况下，可以直接在 sql 中取到（不用写 parameterType）</p><ul><li><p>接口方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用map根据id查询用户</span><br>User <span class="hljs-title function_">getUserById2</span> <span class="hljs-params">(Map&lt;String, Object&gt; map)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>sql 语句</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserById2"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.User"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span>&gt;</span><br>   SELECT *<br>   FROM<br>         Mybatis.User<br>   WHERE<br>         Id = #{userId};<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserById2</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>   HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>   map.put(<span class="hljs-string">"userId"</span>, <span class="hljs-number">3</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUserById2(map);<br>   System.out.println(user);<br>   sqlSession.close();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h1 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h1><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><ul><li><p>mybatis-config.xml</p></li><li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）<br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="环境配置（environment）"><a href="#环境配置（environment）" class="headerlink" title="环境配置（environment）"></a>环境配置（environment）</h2><p>MyBatis 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>学会使用配置多套运行环境</p><p>mybatis 默认的事务管理器就是 JDBC，连接池：POOLED</p><h2 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h2><p>我们可以通过 properties 属性来实现引用配置文件</p><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置【db.properties】</p><p>编写一个配置文件</p><p>db.properties</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useSSl=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></tbody></table></figure><h2 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h2><ul><li><p>类型别名是为 Java 类型设置一个短的名字</p></li><li><p>存在的意义仅在于减少类完全限定名的冗余</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--给实体类取别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.zlw.pojo.User"</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"User"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>也可以指定一个包名，mybatis 会在包内搜索 JavaBean，并用小写字母代替类名，若有注解，则别名为注解值</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.zlw.pojo"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>例如：com.zlw.pojo.User –&gt;user（User 也是可以的，官方建议为小写）</p></li><li><p>在实体类少的时候使用第一种，实体类多的时候使用第二种</p></li></ul><h2 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h2><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td> cacheEnabled</td><td> 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td> 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>useGeneratedKeys</td><td> 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td>true | false</td><td>False</td></tr><tr><td>mapUnderscoreToCamelCase</td><td> 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true | false</td><td>False</td></tr><tr><td>logImpl</td><td> 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td> 未设置</td></tr></tbody></table><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a><ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li> 通用 mapper</li></ul></li></ul><h2 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h2><p>MapperRegistry：注册绑定我们的 mapper 文件</p><p>方式一：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"com/zlw/dao/UserMapper.xml"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>方式二：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.dao.UserMapper"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>方式三：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.zlw.dao"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><strong>方式二和方式三的注意点：</strong></p><ul><li>接口和他的 mapper 配置文件必须同名</li><li>接口和他的 mapper 配置文件必须在同一个包下</li></ul><h2 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h2><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><ul><li>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。</li><li>局部变量</li></ul><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><ul><li>相当于数据库连接池</li><li> SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</li><li>SqlSessionFactory 的最佳作用域是应用作用域。</li><li>最简单的就是使用单例模式或者静态单例模式。</li></ul><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><ul><li>连接到连接池的一个请求</li><li> SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li><li>用完需要关闭，否则资源被占用</li><li>连接的每一个 mapper 代表一个业务</li></ul><h1 id="解决属性名和字段名不一致的问题"><a href="#解决属性名和字段名不一致的问题" class="headerlink" title="解决属性名和字段名不一致的问题"></a>解决属性名和字段名不一致的问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>数据库中的字段</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Mybatis_%E5%B1%9E%E6%80%A7%E5%90%8D%E5%AD%97%E6%AE%B5%E5%90%8D%E4%B8%8D%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98.png" alt="数据库中的字段"></p><p>测试属性名不一致的问题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String pwd;<br></code></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span>{<br>        <span class="hljs-comment">//获得SqlSession对象</span><br>        SqlSession sqlSession=MybatisUtils.getSqlSession();<br>        <span class="hljs-comment">//执行sql</span><br>        UserMapper mapper=sqlSession.getMapper(UserMapper.class);<br>        User user=mapper.getUserById(<span class="hljs-number">2</span>);<br>        System.out.println(user);<br>        <span class="hljs-comment">//关闭SqlSession</span><br>        sqlSession.close();<br>        }<br></code></pre></td></tr></tbody></table></figure><p>结果：密码为空</p><p>User {id=2, name=’李四’, <strong>pwd=’null’</strong>}</p><p>解决方法：</p><ul><li>起别名</li></ul><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><p>结果集映射</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"UserMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"User"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"pwd"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserById"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"UserMap"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span>&gt;</span><br>SELECT *<br>FROM<br>Mybatis.User<br>WHERE<br>Id = #{id};<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li><code>ResultMap</code> 的优秀之处 —— 你完全可以不用显式地配置它们。</li></ul><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><p>如果一个数据库操作出现了异常，我们需要排错。日志就是最好的助手！</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td> logImpl</td><td> 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td> 未设置</td></tr></tbody></table><ul><li> SLF4J</li><li><strong>LOG4J</strong> (掌握)</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li><strong>STDOUT_LOGGING</strong> (掌握)</li><li>NO_LOGGING</li></ul><p>在 mybatis 中具体使用哪个日志实现，在设置中设定！</p><h2 id="STDOUT-LOGGING标准日志输出"><a href="#STDOUT-LOGGING标准日志输出" class="headerlink" title="STDOUT_LOGGING标准日志输出"></a><strong>STDOUT_LOGGING 标准日志输出</strong></h2><p>在 mybatis 核心配置文件中配置我们的日志</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"STDOUT_LOGGING"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>输出的主要结果：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">Opening JDBC Connection<br>Created connection 530042637.<br>Setting autocommit to <span class="hljs-literal">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@1f97cf0d]<br>==&gt;  Preparing: SELECT * FROM Mybatis.User WHERE Id = ?;<br>==&gt; Parameters: 2(Integer)<br>&lt;==    Columns: <span class="hljs-built_in">id</span>, name, password<br>&lt;==        Row: 2, 李四, 11112222<br>&lt;==      Total: 1<br>User{<span class="hljs-built_in">id</span>=2, name=<span class="hljs-string">'李四'</span>, <span class="hljs-built_in">pwd</span>=<span class="hljs-string">'11112222'</span>}<br>Resetting autocommit to <span class="hljs-literal">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@1f97cf0d]<br>Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@1f97cf0d]<br>Returned connection 530042637 to pool.<br></code></pre></td></tr></tbody></table></figure><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><ul><li><p>Log4j 是 <a href="https://baike.baidu.com/item/Apache/8512995">Apache</a> 的一个开源项目，通过使用 Log4j，我们可以控制日志信息输送的目的地是 控制台、文件、 GUI 组件</p></li><li><p>我们可以控制每一条日志的输出格式</p></li><li><p>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</p></li><li><p>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码</p></li></ul><ol><li><p>先导入 Log4j 的包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>log4j.properties</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] %m%n</span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/zlw.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">%d %p [%c] %m%n</span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sq1.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>配置 log4j 为日志的实现</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"LOG4J"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试运行</p></li></ol><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ol><li><p>导包：import org.apache.log4j.Logger;</p></li><li><p>日志对象，参数为当前类的 class</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(UserMapperTest.class);<br></code></pre></td></tr></tbody></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLog4j</span> <span class="hljs-params">()</span> {<br>   logger.info(<span class="hljs-string">"info:进入了testLog4j方法"</span>);<br>   logger.debug(<span class="hljs-string">"debug:进入了testLog4j方法"</span>);<br>   logger.warn(<span class="hljs-string">"warn:进入了testLog4j方法"</span>);<br>   logger.error(<span class="hljs-string">"error:进入了testLog4j方法"</span>);<br>   logger.fatal(<span class="hljs-string">"fatal:进入了testLog4j方法"</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>为什么需要分页？</p><ul><li>减少数据的处理量</li></ul><h2 id="使用limit分页"><a href="#使用limit分页" class="headerlink" title="使用limit分页"></a>使用 limit 分页</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span><br>LIMIT startindex,pagesize;<br></code></pre></td></tr></tbody></table></figure><h2 id="使用mybatis实现分页，核心是sql"><a href="#使用mybatis实现分页，核心是sql" class="headerlink" title="使用mybatis实现分页，核心是sql"></a>使用 mybatis 实现分页，核心是 sql</h2><ol><li><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询用户</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByLimit</span><span class="hljs-params">(Map&lt;String, Integer&gt; map)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserByLimit"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"UserMap"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span>&gt;</span><br>   SELECT *<br>   FROM<br>         Mybatis.User<br>   LIMIT #{startIndex},#{pageSize}<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUsersByLimit</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>   HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>   map.put(<span class="hljs-string">"startIndex"</span>, <span class="hljs-number">0</span>);<br>   map.put(<span class="hljs-string">"pageSize"</span>, <span class="hljs-number">2</span>);<br>   List&lt;User&gt; userByLimit = mapper.getUserByLimit(map);<br>   <span class="hljs-keyword">for</span> (User user : userByLimit) {<br>      System.out.println(user);<br>   }<br>   sqlSession.close();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="RowBounds分页（面向对象的方法）"><a href="#RowBounds分页（面向对象的方法）" class="headerlink" title="RowBounds分页（面向对象的方法）"></a>RowBounds 分页（面向对象的方法）</h2><p>不再使用 sql 分页</p><ol><li><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询用户</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByRowBounds</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserByRowBounds"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"UserMap"</span>&gt;</span><br>   SELECT *<br>   FROM<br>         Mybatis.User<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUsersByRowBounds</span><span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-comment">//RowBounds实现</span><br>   <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowBounds</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-comment">//通过Java层面实现分页</span><br>   List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">"com.zlw.dao.UserMapper.getUserByRowBounds"</span>,<span class="hljs-literal">null</span>,rowBounds);<br>   <span class="hljs-keyword">for</span> (User user : userList) {<br>      System.out.println(user);<br>   }<br>   sqlSession.close();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><p><a href="https://pagehelper.github.io/docs/">pagehelper 官方文档</a></p><p>了解即可，即用即查</p><ol><li><p>引入 jar 包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>引入配置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 使用下面的方式配置参数，后面会有所有的参数介绍 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"param1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"value1"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><p><strong>三个面向区别</strong></p><ul><li>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性和方法；</li><li>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现；</li><li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题，更多的体现就是对系统整体的架构；</li></ul><h2 id="使用注解开发-1"><a href="#使用注解开发-1" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>底层主要是使用反射</p><ol><li><p>注解在接口上实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select</span> (<span class="hljs-string">"SELECT * FROM Mybatis.User"</span>)<br>List&lt;User&gt; <span class="hljs-title function_">getUsers</span> <span class="hljs-params">()</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.zlw.dao.UserMapper"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p></li></ol><h2 id="使用注解实现CRUD"><a href="#使用注解实现CRUD" class="headerlink" title="使用注解实现CRUD"></a>使用注解实现 CRUD</h2><p>我们可以在工具类实现自动提交事务</p><p><strong>openSession(true);</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取SqlSession对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>{<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>        }<br></code></pre></td></tr></tbody></table></figure><p>示例：</p><p>查询</p><ol><li><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法存在多个参数，所有参数前面必须加上 @Param ()注解</span><br><span class="hljs-meta">@Select</span> (<span class="hljs-string">"SELECT * FROM Mybatis.User WHERE Id = #{id}"</span>)<br>User <span class="hljs-title function_">getUserById</span> <span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">"id"</span>)</span> <span class="hljs-type">int</span> id);<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>{<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-comment">//底层主要是使用反射</span><br>   <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">userById</span> <span class="hljs-operator">=</span> mapper.getUserById(<span class="hljs-number">2</span>);<br>   System.out.println(userById);<br>   sqlSession.close();<br></code></pre></td></tr></tbody></table></figure></li></ol><p>添加：</p><ol><li><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert</span> (<span class="hljs-string">"INSERT INTO Mybatis.User(Id, Name, Password) VALUES (#{id},#{name},#{password})"</span>)<br><span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span> <span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-comment">//底层主要是使用反射</span><br>   <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>   <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.insertUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">5</span>, <span class="hljs-string">"钱七"</span>, <span class="hljs-string">"213123ss"</span>));<br>   <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) {<br>      System.out.println(<span class="hljs-string">"添加成功！"</span>);<br>   }<br>   sqlSession.close();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><p>删除和修改已省略</p><h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><ul><li>Java 库</li><li>插件</li><li>构建工具</li><li>自动化配置你的类</li></ul><p>使用步骤：</p><ol><li><p>在 idea 中安装 Lombok</p></li><li><p>在项目中导入 Lombok 的 jar 包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><p>Lombok 注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and<span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>,<span class="hljs-meta">@RequiredArgsConstructor</span> and<span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Log</span>,<span class="hljs-meta">@Log4j</span>,<span class="hljs-meta">@Log4j2</span>,<span class="hljs-meta">@Slf4j</span>,<span class="hljs-meta">@XSlf4j</span>,<span class="hljs-meta">@CommonsLog</span>,<span class="hljs-meta">@JBossLog</span>,<span class="hljs-meta">@Flogger</span>,<span class="hljs-meta">@CustomLog</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@SuperBuilder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@With</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@val</span><br><span class="hljs-meta">@var</span><br>experimental<span class="hljs-meta">@var</span><br><span class="hljs-meta">@UtilityClass</span><br></code></pre></td></tr></tbody></table></figure><p><strong>@Data：无参构造，get，set，tostring，hashcode，equals</strong></p><p><strong>@AllArgsConstructor：全参构造（默认会删除空参构造）</strong></p><p><strong>@NoArgsConstructor：空参构造</strong></p><p><strong>@EqualsAndHashCode：hashcode，equals</strong></p><p><strong>@ToString ：tostring</strong></p><h1 id="多对一的处理"><a href="#多对一的处理" class="headerlink" title="多对一的处理"></a>多对一的处理</h1><ul><li>多个学生可以上同一个老师的课程–&gt; 多个学生对应一个老师</li><li>对于学生而言，多个学生<strong>关联</strong>一个老师 多对一</li><li>对于老师而言，一个老师<strong>有</strong>很多学生 一对多</li></ul><p>数据库 sql 语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `teacher`<br>(<br>    `id`   <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE <span class="hljs-operator">=</span> INNODB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher (`id`, `name`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">'秦老师'</span>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student`<br>(<br>    `id`   <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `tid`  <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>)     <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>    KEY `fktid` (`tid`),<br>    <span class="hljs-keyword">CONSTRAINT</span> `fktid` <span class="hljs-keyword">FOREIGN</span> KEY (`tid`) <span class="hljs-keyword">REFERENCES</span> `teacher` (`id`)<br>) ENGINE <span class="hljs-operator">=</span> INNODB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">'小明'</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">'小红'</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">'小张'</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">'小李'</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">'小王'</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h2><ol><li><p>导入 Lombok</p></li><li><p>新建实体类 Teacher，Student</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> {<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> Teacher teacher;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>建立 mapper 接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select</span> (<span class="hljs-string">"SELECT * FROM Mybatis.Teacher"</span>)<br>List&lt;Teacher&gt; <span class="hljs-title function_">getTeacher</span> <span class="hljs-params">()</span>;<br><span class="hljs-meta">@Select</span> (<span class="hljs-string">"SELECT * FROM Mybatis.Teacher WHERE Id = #{tid}"</span>)<br>Teacher <span class="hljs-title function_">getTeacherById</span> <span class="hljs-params">(<span class="hljs-meta">@Param</span> (<span class="hljs-string">"tid"</span>)</span> <span class="hljs-type">int</span> id);<br></code></pre></td></tr></tbody></table></figure></li><li><p>建立 mapper.xml</p></li><li><p>在核心配置文件中绑定接口或者 xml 文件</p></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTeacher</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-type">TeacherMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TeacherMapper.class);<br>   List&lt;Teacher&gt; teachers = mapper.getTeacher();<br>   <span class="hljs-keyword">for</span> (Teacher teacher : teachers) {<br>      System.out.println(teacher);<br>   }<br>   sqlSession.close();<br>}<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTeacherById</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-type">TeacherMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TeacherMapper.class);<br>   <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacherById</span> <span class="hljs-operator">=</span> mapper.getTeacherById(<span class="hljs-number">1</span>);<br>   System.out.println(teacherById);<br>   sqlSession.close();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.zlw.dao.StudentMapper"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    思路：</span><br><span class="hljs-comment">    1. 查询所有的学生</span><br><span class="hljs-comment">    2.根据查询出来的学生的tid，寻找对应的老师</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"StudentTeacher"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.zlw.pojo.Student"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--对象使用：association 集合使用：collection--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"teacher"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"com.zlw.pojo.Teacher"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tid"</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"getTeacher"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getStudent"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"StudentTeacher"</span>&gt;</span><br>        SELECT *<br>        FROM<br>        Mybatis.Student;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getTeacher"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.Teacher"</span>&gt;</span><br>        SELECT *<br>        FROM<br>        Mybatis.Teacher<br>        WHERE<br>        id = #{tid};<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按照结果嵌套处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"StudentTeacher2"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.zlw.pojo.Student"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sid"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sname"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"teacher"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"com.zlw.pojo.Teacher"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tid"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tname"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getStudent2"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"StudentTeacher2"</span>&gt;</span><br>SELECT<br>s.Id sid,<br>s.Name sname,<br>t.Id tid,<br>t.Name tname<br>FROM<br>Mybatis.Student s,<br>Mybatis.Teacher t<br>WHERE<br>s.Tid = t.Id;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="一对多处理"><a href="#一对多处理" class="headerlink" title="一对多处理"></a>一对多处理</h1><ul><li>一个老师拥有多个学生</li></ul><p>实体类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tid;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> {<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//一个老师拥有多个学生</span><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="按照查询嵌套"><a href="#按照查询嵌套" class="headerlink" title="按照查询嵌套"></a>按照查询嵌套</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"TeacherStudent2"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Teacher"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"students"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"ArrayList"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"Student"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"getStudent"</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-attr">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getTeacher2"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"TeacherStudent2"</span>&gt;</span><br>SELECT<br>Id,<br>Name<br>FROM<br>Mybatis.Teacher t<br>WHERE<br>id = #{tid};<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getStudent"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Student"</span>&gt;</span><br>SELECT *<br>FROM<br>Mybatis.Student<br>WHERE<br>tid = #{tid};<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="按照结果嵌套"><a href="#按照结果嵌套" class="headerlink" title="按照结果嵌套"></a>按照结果嵌套</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"TeacherStudent"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Teacher"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tid"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tname"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"students"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"ArrayList"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"Student"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sid"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sname"</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"tid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tid"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getTeacher"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"TeacherStudent"</span>&gt;</span><br>SELECT<br>s.Id sid,<br>s.Name sname,<br>t.Id tid,<br>t.Name tname<br>FROM<br>Mybatis.Student s,<br>Mybatis.Teacher t<br>WHERE<br>s.Tid = t.Id<br>AND t.Id = #{tid};<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h1 id="复杂查询小结"><a href="#复杂查询小结" class="headerlink" title="复杂查询小结"></a>复杂查询小结</h1><ul><li>关联：association 多对一</li><li>集合：collection 一对多</li><li> JavaType 和 ofType 都是用来指定对象类型的，但是 JavaType 是用来指定 pojo 中属性的类型，而 ofType 指定的是 映射到 list 集合属性中 pojo 的类型 。</li></ul><p>注意点：</p><ul><li>保证 sql 可读性</li><li>注意一对多，多对一中属性名和字段的问题</li><li>使用日志</li></ul><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态 SQL</h1><p><strong>什么是动态 SQL：动态 sql 就是根据不同条件下生成不同的 sql</strong></p><p><strong>所谓的动态 SQL，本质上还是 SQL 语句，只是我们可以在 SQL 层面，去执行一个逻辑代码</strong></p><p><strong>动态 SQL 就是在拼接 SQL 语句，我们只要保证 SQL 的正确性，按照 SQL 的格式，去排列组合就可以了</strong></p><p>建议：</p><ul><li><p>先在 Mysql 中写出完整的 SQL，再对应的去修改成我们的动态 SQL 实现通用即可</p></li><li><p>if</p></li><li><p>choose (when, otherwise)</p></li><li><p>trim (where, set)</p></li><li><p>foreach</p></li></ul><h2 id="搭建环境-1"><a href="#搭建环境-1" class="headerlink" title="搭建环境"></a>搭建环境</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `blog`<br>(<br>    `id`    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT 博客 id,<br>    `title` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT 博客标题，<br>        `author` <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT 博客作者，<br>        `create_time` DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT 创建时间，<br>        `views` <span class="hljs-type">INT</span> (<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT 浏览量<br>) ENGINE <span class="hljs-operator">=</span> INNODB<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></tbody></table></figure><p>创建一个基础工程：</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> {<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>   <span class="hljs-keyword">private</span> String title;<br>   <span class="hljs-keyword">private</span> String author;<br>   <span class="hljs-keyword">private</span> Date createTime;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> views;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写对应的接口和 xml 文件</p></li><li><p>开启驼峰转换</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapUnderscoreToCamelCase"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryBlogIf"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.Blog"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span>&gt;</span><br>    SELECT<br>    *<br>    FROM<br>    Mybatis.Blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"title != null"</span>&gt;</span><br>            title like #{title}<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"author != null"</span>&gt;</span><br>            and author like #{author}<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryBlogChoose"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.Blog"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span>&gt;</span><br>    SELECT *<br>    FROM<br>    Mybatis.Blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"title != null"</span>&gt;</span><br>                title like #{title}<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"author != null"</span>&gt;</span><br>                author like #{author}<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                views = #{views}<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h2><p>mybatis 的 trim 标签一般用于去除 sql 语句中多余的 and 关键字，逗号，或者给 sql 语句前拼接 “where“、“set“以及 “values (“ 等前缀，或者添加 “)“等后缀，可用于选择性插入、更新、删除或者条件查询等操作。</p><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td> prefix</td><td> 给 sql 语句拼接的前缀</td></tr><tr><td> suffix</td><td> 给 sql 语句拼接的后缀</td></tr><tr><td> prefixOverrides</td><td> 去除 sql 语句前面的关键字或者字符，该关键字或者字符由 prefixOverrides 属性指定，假设该属性指定为 “AND”，当 sql 语句的开头为 “AND”，trim 标签将会去除该 “AND”</td></tr><tr><td>suffixOverrides</td><td> 去除 sql 语句后面的关键字或者字符，该关键字或者字符由 suffixOverrides 属性指定</td></tr></tbody></table><p>和 where 元素等价的自定义 trim 元素：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">"WHERE"</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">"AND |OR "</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>与 set 元素等价的自定义 <em>trim</em> 元素：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">"SET"</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">","</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>set 示例：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateBlog"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span>&gt;</span><br>    UPDATE Mybatis.Blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"title != null"</span>&gt;</span><br>            title = #{title},<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"author != null"</span>&gt;</span><br>            author = #{author}<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    WHERE Id = #{id};<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql 片段</h2><p>使用 sql 标签把公共部分包含起来，实现代码复用</p><ol><li><p>抽取公共部分</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"if-title-author"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"title != null"</span>&gt;</span><br>      title like #{title}<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"author != null"</span>&gt;</span><br>      and author like #{author}<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>使用 include 标签引用</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryBlogIf"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.Blog"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span>&gt;</span><br>   SELECT<br>   *<br>   FROM<br>   Mybatis.Blog<br>   <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">"if-title-author"</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ul><li>最好基于单表来定义 sql 片段</li><li>不要存在 where 标签</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>xml 部分</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"queryBlogForeach"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.zlw.pojo.Blog"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span>&gt;</span><br>    SELECT *<br>    FROM<br>    Mybatis.Blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">"ids"</span> <span class="hljs-attr">item</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">open</span>=<span class="hljs-string">"and ("</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">"or"</span> <span class="hljs-attr">close</span>=<span class="hljs-string">")"</span>&gt;</span><br>            id = #{id}<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBlogForeach</span><span class="hljs-params">()</span>{<br>        SqlSession sqlSession=MybatisUtils.getSqlSession();<br>        BlogMapper mapper=sqlSession.getMapper(BlogMapper.class);<br>        HashMap&lt;Object, Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        ArrayList&lt;Integer&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        map.put(<span class="hljs-string">"ids"</span>,list);<br>        List&lt;Blog&gt; blogs=mapper.queryBlogForeach(map);<br>        <span class="hljs-keyword">for</span>(Blog blog:blogs){<br>        System.out.println(blog);<br>        }<br>        sqlSession.close();<br>        }<br></code></pre></td></tr></tbody></table></figure><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ol><li>什么是缓存 [Cache]？<ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题</li></ul></li><li>为什么使用缓存？<ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率</li></ul></li><li>什么样的数据可以使用缓存？<ul><li>经常查询并且不经常改变的数据 【可以使用缓存】</li></ul></li></ol><h2 id="MyBatis-缓存"><a href="#MyBatis-缓存" class="headerlink" title="MyBatis 缓存"></a>MyBatis 缓存</h2><ul><li>MyBatis 包含一个非常强大的查询缓存特性，它可以非常方便的定制和配置缓存，缓存可以极大的提高查询效率。</li><li>MyBatis 系统中默认定义了两级缓存：一级缓存和二级缓存<ul><li>默认情况下，只有一级缓存开启（SqlSession 级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于 namespace 级别的缓存。</li><li>为了提高可扩展性，MyBatis 定义了缓存接口 Cache。我们可以通过实现 Cache 接口来定义二级缓存。</li></ul></li></ul><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><ul><li>一级缓存也叫本地缓存：SqlSession<ul><li> 与数据库同一次会话期间查询到的数据会放在本地缓存中</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</li></ul></li></ul><p>测试步骤：</p><ol><li><p>开启日志</p></li><li><p>测试在一个 SqlSession 中查询两次相同记录</p></li><li><p>查看日志输出</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E6%B5%8B%E8%AF%95.png" alt="一级缓存测试"></p></li><li><p>缓存失效情况：</p><ol><li><p>询不同的东西</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存</p></li><li><p>查询不同的 Mapper.xml</p></li><li><p>手动清理缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sqlSession.clearCache();<br></code></pre></td></tr></tbody></table></figure></li></ol></li></ol><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><ul><li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</p></li><li><p>基于 namespace 级别的缓存，一个名称空间，对应一个二级缓存</p></li><li><p>工作机制</p><ul><li><p>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</p></li><li><p>如果会话关闭了，这个会员对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</p></li><li><p>新的会话查询信息，就可以从二级缓存中获取内容</p></li><li><p>不同的 mapper 查询出的数据会放在自己对应的缓存（map）中</p></li></ul></li></ul><p>开启步骤：</p><ol><li><p>开启全局缓存</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>在要使用二级缓存的 mapper.xml 中开启二级缓存</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>也可以自定义参数</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">eviction</span>=<span class="hljs-string">"FIFO"</span> <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">"60000"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"512"</span> <span class="hljs-attr">readOnly</span>=<span class="hljs-string">"true"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryUserById</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>   <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>   <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(UserMapper.class);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br>   <span class="hljs-comment">//关闭sqlSession测试二级缓存</span><br>   sqlSession.close();<br><br>   <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> mapper2.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user2);<br>   sqlSession2.close();<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>结果可见是使用二级缓存</strong></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Mybatis_%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E6%B5%8B%E8%AF%95.png" alt="二级缓存测试"></p><p><strong>注意：</strong></p><p>在没有使用缓存策略的情况下需要将实体类序列化，否则报错</p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>只要开启了二级缓存，在同一个 Mapper 下就有效</li><li>所有的数据都会放在一级缓存中</li><li>只有当前会话提交，或者关闭的时候，才会提交到二级缓存中</li></ul><h2 id="Mybatis缓存原理"><a href="#Mybatis缓存原理" class="headerlink" title="Mybatis缓存原理"></a>Mybatis 缓存原理</h2><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Mybatis_%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86.jpg" alt="Mybatis缓存原理"></p><p><strong>注意：</strong></p><p>只有查询才有缓存，根据数据是否需要缓存（修改是否频繁选择是否开启）<strong>useCache=“true”</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">useCache</span>=<span class="hljs-string">"true"</span>&gt;</span><br>    select * from user where id = #{id}<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="自定义缓存-ehcache"><a href="#自定义缓存-ehcache" class="headerlink" title="自定义缓存- ehcache"></a>自定义缓存 - ehcache</h2><p>Ehcache 是一种广泛使用的开源 Java 分布式缓存。主要面向通用缓存</p><ol><li><p>首先需要导包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>在 mapper 中指定使用我们的 ehcache 缓存实现</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>ehcache.xml 配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">"http://ehcache.org/ehcache.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">"false"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"./tmpdir/Tmp_EhCache"</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">         diskStore：指定一个文件目录，当 EHCache 把数据写到硬盘上时，将把数据写到这个文件目录下。 下面的参数这样解释：</span><br><span class="hljs-comment">         user.home – 用户主目录</span><br><span class="hljs-comment">         user.dir      – 用户当前工作目录</span><br><span class="hljs-comment">         java.io.tmpdir – 默认临时文件路径</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">"10000"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">"1800"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">"259200"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">"LRU"</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">name</span>=<span class="hljs-string">"cloud_user"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">"5000"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">"1800"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">"1800"</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">"LRU"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  defaultCache：默认缓存策略，当ehcache找不到定义缓存时，则使用这个策略，只能定义一个</span><br><span class="hljs-comment">  EhCache 给我们提供了丰富的配置来配置缓存的设置。</span><br><span class="hljs-comment">  cache 元素的属性：</span><br><span class="hljs-comment">   name：缓存名称</span><br><span class="hljs-comment">   maxElementsInMemory：内存中最大缓存对象数</span><br><span class="hljs-comment">   maxElementsOnDisk：硬盘中最大缓存对象数，若是 0 表示无穷大</span><br><span class="hljs-comment">   eternal：true 表示对象永不过期，此时会忽略 timeToIdleSeconds 和 timeToLiveSeconds 属性，默认为 false</span><br><span class="hljs-comment">   overflowToDisk：true 表示当内存缓存的对象数目达到了 maxElementsInMemory 界限后，会把溢出的对象写到硬盘缓存中。注意：如果缓存的对象要写入到硬盘中的话，则该对象必须实现了 Serializable 接口才行。</span><br><span class="hljs-comment">     diskSpoolBufferSizeMB：磁盘缓存区大小，默认为 30MB。每个 Cache 都应该有自己的一个缓存区。</span><br><span class="hljs-comment">   diskPersistent：是否缓存虚拟机重启期数据</span><br><span class="hljs-comment">   diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认为 120 秒</span><br><span class="hljs-comment">   timeToIdleSeconds： 设定允许对象处于空闲状态的最长时间，以秒为单位。当对象自从最近一次被访问后，如果处于空闲状态的时间超过了 timeToIdleSeconds 属性值，这个对象就会过期，EHCache 将把它从缓存中清空。只有当 eternal 属性为 false，该属性才有效。如果该属性值为 0，则表示对象可以无限期地处于空闲状态</span><br><span class="hljs-comment">   timeToLiveSeconds：设定对象允许存在于缓存中的最长时间，以秒为单位。当对象自从被存放到缓存中后，如果处于缓存中的时间超过了 timeToLiveSeconds 属性值，这个对象就会过期，EHCache 将把它从缓存中清除。只有当 eternal 属性为 false，该属性才有效。如果该属性值为 0，则表示对象可以无限期地存在于缓存中。timeToLiveSeconds 必须大于 timeToIdleSeconds 属性，才有意义</span><br><span class="hljs-comment">   memoryStoreEvictionPolicy：当达到 maxElementsInMemory 限制时，Ehcache 将会根据指定的策略去清理内存。可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="hljs-comment">  --&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax 和 Json</title>
    <link href="/posts/53027/"/>
    <url>/posts/53027/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</p><p>AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。</p><p>增强 B/S 的体验性</p><p><strong>利用 Ajax 可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行 ID 发送到后台，后台在数据库中删除，数据库删除成功后，在页面 DOM 中将数据行也删除</li></ul><h2 id="Ajax示例"><a href="#Ajax示例" class="headerlink" title="Ajax示例"></a>Ajax 示例</h2><p><strong>登录验证</strong></p><p>请求：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/a3"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">a3</span> <span class="hljs-params">(String name)</span> {<br>   <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">""</span>;<br>   <span class="hljs-type">UserPwd</span> <span class="hljs-variable">userPwd</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   <span class="hljs-keyword">if</span> (!name.isEmpty()) {<br>      userPwd = userService.queryUser(name);<br>      <span class="hljs-keyword">if</span> (userPwd != <span class="hljs-literal">null</span> &amp;&amp; userPwd.getUsername().equals(name)) {<br>         msg = <span class="hljs-string">"ok"</span>;<br>      } <span class="hljs-keyword">else</span> {<br>         msg = <span class="hljs-string">"用户名有误"</span>;<br>      }<br>   } <span class="hljs-keyword">else</span> {<br>      msg = <span class="hljs-string">"用户名不能为空"</span>;<br>   }<br>   <span class="hljs-keyword">return</span> msg;<br>}<br><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">"/a4"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">a4</span> <span class="hljs-params">(String name, String password)</span> {<br>   <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">""</span>;<br>   <span class="hljs-type">UserPwd</span> <span class="hljs-variable">userPwd</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   <span class="hljs-keyword">if</span> (!password.isEmpty()) {<br>      <span class="hljs-keyword">if</span> (!name.isEmpty()) {<br>         userPwd = userService.queryUser(name);<br>         <span class="hljs-keyword">if</span> (userPwd != <span class="hljs-literal">null</span> &amp;&amp; userPwd.getPwd().equals(password)) {<br>            msg = <span class="hljs-string">"ok"</span>;<br>         } <span class="hljs-keyword">else</span> {<br>            msg = <span class="hljs-string">"密码错误"</span>;<br>         }<br>      } <span class="hljs-keyword">else</span> {<br>         msg = <span class="hljs-string">"请先输入用户名"</span>;<br>      }<br>   } <span class="hljs-keyword">else</span> {<br>      msg = <span class="hljs-string">"密码不能为空"</span>;<br>   }<br>   <span class="hljs-keyword">return</span> msg;<br>}<br></code></pre></td></tr></tbody></table></figure><p>登录页面：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">8</span>/<span class="hljs-number">12</span><br>  Time: <span class="hljs-number">17</span>:<span class="hljs-number">10</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;title&gt;Title&lt;/title&gt;<br>      &lt;script src=<span class="hljs-string">"${pageContext.request.contextPath}/res/jquery-3.6.0.js"</span>&gt;&lt;/script&gt;<br>      &lt;script&gt;<br>         function <span class="hljs-title function_">a1</span><span class="hljs-params">()</span> {<br>            $.post({<br>               url: <span class="hljs-string">"${pageContext.request.contextPath}/a3"</span>,<br>               data: {<span class="hljs-string">"name"</span>: $(<span class="hljs-string">"#name"</span>).val()},<br>               success: function (data) {<br>                  <span class="hljs-keyword">if</span> (data.toString() === <span class="hljs-string">"ok"</span>) {<br>                     $(<span class="hljs-string">"#userInfo"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"green"</span>);<br>                  }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.toString() === <span class="hljs-string">"用户名有误"</span> || data.toString() === <span class="hljs-string">"用户名不能为空"</span>){<br>                     $(<span class="hljs-string">"#userInfo"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"red"</span>);<br>                  }<br>                  $(<span class="hljs-string">"#userInfo"</span>).html(data);<br>               }<br>            })<br>         }<br><br>         function <span class="hljs-title function_">password</span><span class="hljs-params">()</span> {<br>            $.post({<br>               url: <span class="hljs-string">"${pageContext.request.contextPath}/a4"</span>,<br>               data: {<span class="hljs-string">"name"</span>: $(<span class="hljs-string">"#name"</span>).val(),<span class="hljs-string">"password"</span>: $(<span class="hljs-string">"#pwd"</span>).val()},<br>               success: function (data) {<br>                  <span class="hljs-keyword">if</span> (data.toString() === <span class="hljs-string">"ok"</span>) {<br>                     $(<span class="hljs-string">"#pwdInfo"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"green"</span>);<br>                  }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.toString() === <span class="hljs-string">"密码错误"</span> || data.toString() === <span class="hljs-string">"请先输入用户名"</span>|| data.toString() === <span class="hljs-string">"密码不能为空"</span>){<br>                     $(<span class="hljs-string">"#pwdInfo"</span>).css(<span class="hljs-string">"color"</span>, <span class="hljs-string">"red"</span>);<br>                  }<br>                  $(<span class="hljs-string">"#pwdInfo"</span>).html(data);<br>               }<br>            })<br>         }<br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;p&gt;<br>         用户名: &lt;input type=<span class="hljs-string">"text"</span> id=<span class="hljs-string">"name"</span> onblur=<span class="hljs-string">"a1()"</span>&gt;<br>         &lt;span id=<span class="hljs-string">"userInfo"</span>&gt;&lt;/span&gt;<br>      &lt;/p&gt;<br><br>      &lt;p&gt;<br>         密码: &lt;input type=<span class="hljs-string">"password"</span> id=<span class="hljs-string">"pwd"</span> onblur=<span class="hljs-string">"password()"</span>&gt;<br>         &lt;span id=<span class="hljs-string">"pwdInfo"</span>&gt;&lt;/span&gt;<br>      &lt;/p&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是 JSON</h2><ul><li>JSON (JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。</li><li>采用完全独立于编程语言的文本格式来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 </li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何 JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><h2 id="JSON-与-JS-对象的关系"><a href="#JSON-与-JS-对象的关系" class="headerlink" title="JSON 与 JS 对象的关系"></a>JSON 与 JS 对象的关系</h2><p>很多人搞不清楚 JSON 和 JS 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p><strong>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</strong></p><p>JSON 键值对是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键 / 值对组合中的键名写在前面并用双引号” “包裹，使用冒号：分隔，然后紧接着值</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">a</span>: <span class="hljs-string">"hello"</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">"world"</span>}; <span class="hljs-comment">//这是一个对象，键名也可以用双引号包裹</span><br><span class="hljs-keyword">var</span> json = <span class="hljs-string">'{"a": "hello", "b": "world"}'</span> <span class="hljs-comment">//这是JSON字符串，本质是字符串</span><br></code></pre></td></tr></tbody></table></figure><p>JavaScript 对象转换为 JSON 字符串</p><p>JSON.stringify()</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">a</span>: <span class="hljs-string">"hello"</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">"world"</span>}; <br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj);<br><span class="hljs-comment">//结果为：{"a": "hello", "b": "world"}</span><br></code></pre></td></tr></tbody></table></figure><p>JSON 字符串转换为 Javascript 对象</p><p>JSON.parse()</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> json = <span class="hljs-string">'{"a": "hello", "b": "world"}'</span> <span class="hljs-comment">//这是JSON字符串，本质是字符串</span><br><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(json)<br><span class="hljs-comment">//结果为：{a: "hello", b: "world"}</span><br></code></pre></td></tr></tbody></table></figure><p>测试代码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-comment">//编写一个JavaScript对象</span></span><br><span class="language-javascript">         <span class="hljs-keyword">var</span> user = {</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">"AWEI"</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>: <span class="hljs-string">"21"</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>: <span class="hljs-string">"男"</span></span><br><span class="language-javascript">         }</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);</span><br><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-comment">//JavaScript对象转换为JSON字符串</span></span><br><span class="language-javascript">         user = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user);</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);</span><br><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-comment">//JSON字符串转换为Javascript对象</span></span><br><span class="language-javascript">         user = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(user);</span><br><span class="language-javascript">         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);</span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="使用Jackson"><a href="#使用Jackson" class="headerlink" title="使用Jackson"></a>使用 Jackson</h2><p>Jackson 是一种 JSON 解析工具</p><p><strong>使用 Jackson 需要导入它的 jar 包</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>配置 <strong>web.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>配置 <strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">                     http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.zlw"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>编写一个<strong>实体类 User</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> age;<br>   <span class="hljs-keyword">private</span> String sex;<br>}<br></code></pre></td></tr></tbody></table></figure><p>编写 <strong>UserController</strong></p><p><strong>@RestController</strong>  下面的所有方法都只会返回字符串<br><strong>@ResponseBody</strong>  不会走视图解析器，直接返回一个字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.controller;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//@Controller</span><br><span class="hljs-meta">@RestController</span> <span class="hljs-comment">//下面的所有方法都只会返回字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> {<br><span class="hljs-meta">@RequestMapping(value = "/j1")</span><br><span class="hljs-comment">//@ResponseBody //不会走视图解析器，直接返回一个字符串</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException {<br><br><span class="hljs-comment">//json      ObjectMapper</span><br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br><br><span class="hljs-comment">//返回JSON字符串</span><br><span class="hljs-keyword">return</span> str;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h3><p>在 spring 配置文件中添加</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"objectMapper"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"failOnEmptyBeans"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="返回类型例子"><a href="#返回类型例子" class="headerlink" title="返回类型例子"></a>返回类型例子</h3><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = "/j2")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException {<br>   List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;User&gt;();<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 1"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 2"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 3"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 4"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 5"</span>,<span class="hljs-number">21</span>,<span class="hljs-string">"男"</span>);<br>   <br>   list.add(user1);<br>   list.add(user2);<br>   list.add(user3);<br>   list.add(user4);<br>   list.add(user5);<br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(list);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = "/j3")</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException {<br>   <span class="hljs-comment">//ObjectMapper 时间解析后的默认格式为 时间戳</span><br>   <br>   <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>   <span class="hljs-comment">//使用ObjectMapper解决时间戳</span><br>   <span class="hljs-comment">//关闭时间戳显示</span><br>   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-literal">false</span>);<br>   <br>   <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <br>   <span class="hljs-comment">//自定义日期格式</span><br>   <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);<br>   mapper.setDateFormat(sdf);<br>   <br>   <span class="hljs-keyword">return</span> mapper.writeValueAsString(date);<br>   <span class="hljs-comment">//使用java解决时间戳</span><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * ObjectMapper mapper = new ObjectMapper();</span><br><span class="hljs-comment">   * Date date = new Date();</span><br><span class="hljs-comment">   * SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span><br><span class="hljs-comment">   * return mapper.writeValueAsString(sdf.format(date));</span><br><span class="hljs-comment">   * */</span><br>   <br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="整理Jackson工具类"><a href="#整理Jackson工具类" class="headerlink" title="整理Jackson工具类"></a>整理 Jackson 工具类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.utils;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/8/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonUtils</span> {<br><span class="hljs-comment">//返回json字符串的工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getJson</span><span class="hljs-params">(Object object)</span> {<br><span class="hljs-comment">//利用重载以及给定默认值的思想编写开源工具类</span><br><span class="hljs-keyword">return</span> getJson(object, <span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);<br>}<br><br><span class="hljs-comment">//返回json时间字符串的工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getJson</span><span class="hljs-params">(Object object,String dataFormat)</span>{<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-literal">false</span>);<br>objectMapper.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(dataFormat));<br><span class="hljs-keyword">try</span> {<br><span class="hljs-keyword">return</span> objectMapper.writeValueAsString(object);<br>} <span class="hljs-keyword">catch</span> (JsonProcessingException e) {<br>e.printStackTrace();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="使用Fastjson"><a href="#使用Fastjson" class="headerlink" title="使用Fastjson"></a>使用 Fastjson</h2><p>使用步骤：</p><p>首先先导包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">"/j4"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json4</span> <span class="hljs-params">()</span> {<br>   List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;User&gt;();<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 1"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 2"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 3"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 4"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   <span class="hljs-type">User</span> <span class="hljs-variable">user5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">"AWEI 5"</span>, <span class="hljs-number">21</span>, <span class="hljs-string">"男"</span>);<br>   list.add(user1);<br>   list.add(user2);<br>   list.add(user3);<br>   list.add(user4);<br>   list.add(user5);<br>   <span class="hljs-keyword">return</span> JSON.toJSONString(list);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="返回时间字符串"><a href="#返回时间字符串" class="headerlink" title="返回时间字符串"></a>返回时间字符串</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">"/j4"</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">json4</span> <span class="hljs-params">()</span> {<br>   <span class="hljs-keyword">return</span> JSON.toJSONString(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), SerializerFeature.DisableCircularReferenceDetect, SerializerFeature.WriteDateUseDateFormat);<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSP 项目 - 超市订单管理系统（SMBMS）</title>
    <link href="/posts/32359/"/>
    <url>/posts/32359/</url>
    
    <content type="html"><![CDATA[<h1 id="SMBMS"><a href="#SMBMS" class="headerlink" title="SMBMS"></a>SMBMS</h1><p>超市订单管理系统：supermarket bill management system</p><h2 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for smbms_address</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `smbms_address`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `smbms_address` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'主键ID'</span>,<br>  `contact` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'联系人姓名'</span>,<br>  `addressDesc` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'收货地址明细'</span>,<br>  `postCode` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'邮编'</span>,<br>  `tel` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'联系人电话'</span>,<br>  `createdBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建者'</span>,<br>  `creationDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建时间'</span>,<br>  `modifyBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'修改者'</span>,<br>  `modifyDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'修改时间'</span>,<br>  `userId` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'用户ID'</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">7</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_unicode_ci;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of smbms_address</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_address` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'1'</span>, <span class="hljs-string">'王丽'</span>, <span class="hljs-string">'北京市东城区东交民巷44号'</span>, <span class="hljs-string">'100010'</span>, <span class="hljs-string">'13678789999'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'1'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_address` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'2'</span>, <span class="hljs-string">'张红丽'</span>, <span class="hljs-string">'北京市海淀区丹棱街3号'</span>, <span class="hljs-string">'100000'</span>, <span class="hljs-string">'18567672312'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'1'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_address` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'3'</span>, <span class="hljs-string">'任志强'</span>, <span class="hljs-string">'北京市东城区美术馆后街23号'</span>, <span class="hljs-string">'100021'</span>, <span class="hljs-string">'13387906742'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'1'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_address` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'4'</span>, <span class="hljs-string">'曹颖'</span>, <span class="hljs-string">'北京市朝阳区朝阳门南大街14号'</span>, <span class="hljs-string">'100053'</span>, <span class="hljs-string">'13568902323'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'2'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_address` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'5'</span>, <span class="hljs-string">'李慧'</span>, <span class="hljs-string">'北京市西城区三里河路南三巷3号'</span>, <span class="hljs-string">'100032'</span>, <span class="hljs-string">'18032356666'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'3'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_address` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'6'</span>, <span class="hljs-string">'王国强'</span>, <span class="hljs-string">'北京市顺义区高丽营镇金马工业区18号'</span>, <span class="hljs-string">'100061'</span>, <span class="hljs-string">'13787882222'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'3'</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for smbms_bill</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `smbms_bill`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `smbms_bill` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'主键ID'</span>,<br>  `billCode` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'账单编码'</span>,<br>  `productName` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'商品名称'</span>,<br>  `productDesc` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'商品描述'</span>,<br>  `productUnit` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'商品单位'</span>,<br>  `productCount` <span class="hljs-type">decimal</span>(<span class="hljs-number">20</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'商品数量'</span>,<br>  `totalPrice` <span class="hljs-type">decimal</span>(<span class="hljs-number">20</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'商品总额'</span>,<br>  `isPayment` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'是否支付（1：未支付 2：已支付）'</span>,<br>  `createdBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建者（userId）'</span>,<br>  `creationDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建时间'</span>,<br>  `modifyBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'更新者（userId）'</span>,<br>  `modifyDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'更新时间'</span>,<br>  `providerId` <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'供应商ID'</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">18</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_unicode_ci;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of smbms_bill</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'1'</span>, <span class="hljs-string">'BILL2016_001'</span>, <span class="hljs-string">'洗发水、护发素'</span>, <span class="hljs-string">'日用品-洗发、护发'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'500.00'</span>, <span class="hljs-string">'25000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2014-12-14 13:02:03'</span>, <span class="hljs-string">'15'</span>, <span class="hljs-string">'2019-04-16 21:43:12'</span>, <span class="hljs-string">'13'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'2'</span>, <span class="hljs-string">'BILL2016_002'</span>, <span class="hljs-string">'香皂、肥皂、药皂'</span>, <span class="hljs-string">'日用品-皂类'</span>, <span class="hljs-string">'块'</span>, <span class="hljs-string">'1000.00'</span>, <span class="hljs-string">'10000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-03-23 04:20:40'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'13'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'3'</span>, <span class="hljs-string">'BILL2016_003'</span>, <span class="hljs-string">'大豆油'</span>, <span class="hljs-string">'食品-食用油'</span>, <span class="hljs-string">'斤'</span>, <span class="hljs-string">'300.00'</span>, <span class="hljs-string">'5890.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2014-12-14 13:02:03'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'6'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'4'</span>, <span class="hljs-string">'BILL2016_004'</span>, <span class="hljs-string">'橄榄油'</span>, <span class="hljs-string">'食品-进口食用油'</span>, <span class="hljs-string">'斤'</span>, <span class="hljs-string">'200.00'</span>, <span class="hljs-string">'9800.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2013-10-10 03:12:13'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'7'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'5'</span>, <span class="hljs-string">'BILL2016_005'</span>, <span class="hljs-string">'洗洁精'</span>, <span class="hljs-string">'日用品-厨房清洁'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'500.00'</span>, <span class="hljs-string">'7000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2014-12-14 13:02:03'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'9'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'6'</span>, <span class="hljs-string">'BILL2016_006'</span>, <span class="hljs-string">'美国大杏仁'</span>, <span class="hljs-string">'食品-坚果'</span>, <span class="hljs-string">'袋'</span>, <span class="hljs-string">'300.00'</span>, <span class="hljs-string">'5000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-14 06:08:09'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'4'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'7'</span>, <span class="hljs-string">'BILL2016_007'</span>, <span class="hljs-string">'沐浴液、精油'</span>, <span class="hljs-string">'日用品-沐浴类'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'500.00'</span>, <span class="hljs-string">'23000.00'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-07-22 10:10:22'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'14'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'8'</span>, <span class="hljs-string">'BILL2016_008'</span>, <span class="hljs-string">'不锈钢盘碗'</span>, <span class="hljs-string">'日用品-厨房用具'</span>, <span class="hljs-string">'个'</span>, <span class="hljs-string">'600.00'</span>, <span class="hljs-string">'6000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-14 05:12:13'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'14'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'9'</span>, <span class="hljs-string">'BILL2016_009'</span>, <span class="hljs-string">'塑料杯'</span>, <span class="hljs-string">'日用品-杯子'</span>, <span class="hljs-string">'个'</span>, <span class="hljs-string">'350.00'</span>, <span class="hljs-string">'1750.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-02-04 11:40:20'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'14'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'10'</span>, <span class="hljs-string">'BILL2016_010'</span>, <span class="hljs-string">'豆瓣酱'</span>, <span class="hljs-string">'食品-调料'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'200.00'</span>, <span class="hljs-string">'2000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2013-10-29 05:07:03'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'8'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'11'</span>, <span class="hljs-string">'BILL2016_011'</span>, <span class="hljs-string">'海之蓝'</span>, <span class="hljs-string">'饮料-国酒'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'50.00'</span>, <span class="hljs-string">'10000.00'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-14 16:16:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'1'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'12'</span>, <span class="hljs-string">'BILL2016_012'</span>, <span class="hljs-string">'芝华士'</span>, <span class="hljs-string">'饮料-洋酒'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'20.00'</span>, <span class="hljs-string">'6000.00'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-09-09 17:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'1'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'13'</span>, <span class="hljs-string">'BILL2016_013'</span>, <span class="hljs-string">'长城红葡萄酒'</span>, <span class="hljs-string">'饮料-红酒'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'60.00'</span>, <span class="hljs-string">'800.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-11-14 15:23:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'1'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'14'</span>, <span class="hljs-string">'BILL2016_014'</span>, <span class="hljs-string">'泰国香米'</span>, <span class="hljs-string">'食品-大米'</span>, <span class="hljs-string">'斤'</span>, <span class="hljs-string">'400.00'</span>, <span class="hljs-string">'5000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-10-09 15:20:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'3'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'15'</span>, <span class="hljs-string">'BILL2016_015'</span>, <span class="hljs-string">'东北大米'</span>, <span class="hljs-string">'食品-大米'</span>, <span class="hljs-string">'斤'</span>, <span class="hljs-string">'600.00'</span>, <span class="hljs-string">'4000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-11-14 14:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'3'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'16'</span>, <span class="hljs-string">'BILL2016_016'</span>, <span class="hljs-string">'可口可乐'</span>, <span class="hljs-string">'饮料'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'2000.00'</span>, <span class="hljs-string">'6000.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2012-03-27 13:03:01'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'2'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_bill` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'17'</span>, <span class="hljs-string">'BILL2016_017'</span>, <span class="hljs-string">'脉动'</span>, <span class="hljs-string">'饮料'</span>, <span class="hljs-string">'瓶'</span>, <span class="hljs-string">'1500.00'</span>, <span class="hljs-string">'4500.00'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-05-10 12:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">'2'</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for smbms_provider</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `smbms_provider`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `smbms_provider` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'主键ID'</span>,<br>  `proCode` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'供应商编码'</span>,<br>  `proName` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'供应商名称'</span>,<br>  `proDesc` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'供应商详细描述'</span>,<br>  `proContact` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'供应商联系人'</span>,<br>  `proPhone` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'联系电话'</span>,<br>  `proAddress` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'地址'</span>,<br>  `proFax` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'传真'</span>,<br>  `createdBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建者（userId）'</span>,<br>  `creationDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建时间'</span>,<br>  `modifyDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'更新时间'</span>,<br>  `modifyBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'更新者（userId）'</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">14</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_unicode_ci;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of smbms_provider</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'1'</span>, <span class="hljs-string">'BJ_GYS001'</span>, <span class="hljs-string">'北京三木堂商贸有限公司'</span>, <span class="hljs-string">'长期合作伙伴，主营产品:茅台、五粮液、郎酒、酒鬼酒、泸州老窖、赖茅酒、法国红酒等'</span>, <span class="hljs-string">'张国强'</span>, <span class="hljs-string">'13566669999'</span>, <span class="hljs-string">'北京市丰台区育芳园北路'</span>, <span class="hljs-string">'010-58858787'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2013-03-21 16:52:07'</span>, <span class="hljs-string">'2019-04-12 16:44:03'</span>, <span class="hljs-string">'10'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'2'</span>, <span class="hljs-string">'HB_GYS001'</span>, <span class="hljs-string">'石家庄帅益食品贸易有限公司'</span>, <span class="hljs-string">'长期合作伙伴，主营产品:饮料、水饮料、植物蛋白饮料、休闲食品、果汁饮料、功能饮料等'</span>, <span class="hljs-string">'王军'</span>, <span class="hljs-string">'13309094212'</span>, <span class="hljs-string">'河北省石家庄新华区'</span>, <span class="hljs-string">'0311-67738876'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 04:20:40'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'3'</span>, <span class="hljs-string">'GZ_GYS001'</span>, <span class="hljs-string">'深圳市泰香米业有限公司'</span>, <span class="hljs-string">'初次合作伙伴，主营产品：良记金轮米,龙轮香米等'</span>, <span class="hljs-string">'郑程瀚'</span>, <span class="hljs-string">'13402013312'</span>, <span class="hljs-string">'广东省深圳市福田区深南大道6006华丰大厦'</span>, <span class="hljs-string">'0755-67776212'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2014-03-21 16:56:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'4'</span>, <span class="hljs-string">'GZ_GYS002'</span>, <span class="hljs-string">'深圳市喜来客商贸有限公司'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：坚果炒货.果脯蜜饯.天然花茶.营养豆豆.特色美食.进口食品.海味零食.肉脯肉'</span>, <span class="hljs-string">'林妮'</span>, <span class="hljs-string">'18599897645'</span>, <span class="hljs-string">'广东省深圳市福龙工业区B2栋3楼西'</span>, <span class="hljs-string">'0755-67772341'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2013-03-22 16:52:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'5'</span>, <span class="hljs-string">'JS_GYS001'</span>, <span class="hljs-string">'兴化佳美调味品厂'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：天然香辛料、鸡精、复合调味料'</span>, <span class="hljs-string">'徐国洋'</span>, <span class="hljs-string">'13754444221'</span>, <span class="hljs-string">'江苏省兴化市林湖工业区'</span>, <span class="hljs-string">'0523-21299098'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2015-11-22 16:52:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'6'</span>, <span class="hljs-string">'BJ_GYS002'</span>, <span class="hljs-string">'北京纳福尔食用油有限公司'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：山茶油、大豆油、花生油、橄榄油等'</span>, <span class="hljs-string">'马莺'</span>, <span class="hljs-string">'13422235678'</span>, <span class="hljs-string">'北京市朝阳区珠江帝景1号楼'</span>, <span class="hljs-string">'010-588634233'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2012-03-21 17:52:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'7'</span>, <span class="hljs-string">'BJ_GYS003'</span>, <span class="hljs-string">'北京国粮食用油有限公司'</span>, <span class="hljs-string">'初次合作伙伴，主营产品：花生油、大豆油、小磨油等'</span>, <span class="hljs-string">'王驰'</span>, <span class="hljs-string">'13344441135'</span>, <span class="hljs-string">'北京大兴青云店开发区'</span>, <span class="hljs-string">'010-588134111'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'8'</span>, <span class="hljs-string">'ZJ_GYS001'</span>, <span class="hljs-string">'慈溪市广和绿色食品厂'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：豆瓣酱、黄豆酱、甜面酱，辣椒，大蒜等农产品'</span>, <span class="hljs-string">'薛圣丹'</span>, <span class="hljs-string">'18099953223'</span>, <span class="hljs-string">'浙江省宁波市慈溪周巷小安村'</span>, <span class="hljs-string">'0574-34449090'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2013-11-21 06:02:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'9'</span>, <span class="hljs-string">'GX_GYS001'</span>, <span class="hljs-string">'优百商贸有限公司'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：日化产品'</span>, <span class="hljs-string">'李立国'</span>, <span class="hljs-string">'13323566543'</span>, <span class="hljs-string">'广西南宁市秀厢大道42-1号'</span>, <span class="hljs-string">'0771-98861134'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2013-03-21 19:52:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'10'</span>, <span class="hljs-string">'JS_GYS002'</span>, <span class="hljs-string">'南京火头军信息技术有限公司'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：不锈钢厨具等'</span>, <span class="hljs-string">'陈女士'</span>, <span class="hljs-string">'13098992113'</span>, <span class="hljs-string">'江苏省南京市浦口区浦口大道1号新城总部大厦A座903室'</span>, <span class="hljs-string">'025-86223345'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2013-03-25 16:52:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'11'</span>, <span class="hljs-string">'GZ_GYS003'</span>, <span class="hljs-string">'广州市白云区美星五金制品厂'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：海绵床垫、坐垫、靠垫、海绵枕头、头枕等'</span>, <span class="hljs-string">'梁天'</span>, <span class="hljs-string">'13562276775'</span>, <span class="hljs-string">'广州市白云区钟落潭镇福龙路20号'</span>, <span class="hljs-string">'020-85542231'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-12-21 06:12:17'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'12'</span>, <span class="hljs-string">'BJ_GYS004'</span>, <span class="hljs-string">'北京隆盛日化科技'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：日化环保清洗剂，家居洗涤专卖、洗涤用品网、墙体除霉剂、墙面霉菌清除剂等'</span>, <span class="hljs-string">'孙欣'</span>, <span class="hljs-string">'13689865678'</span>, <span class="hljs-string">'北京市大兴区旧宫'</span>, <span class="hljs-string">'010-35576786'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2014-11-21 12:51:11'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_provider` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'13'</span>, <span class="hljs-string">'SD_GYS001'</span>, <span class="hljs-string">'山东豪克华光联合发展有限公司'</span>, <span class="hljs-string">'长期合作伙伴，主营产品：洗衣皂、洗衣粉、洗衣液、洗洁精、消杀类、香皂等'</span>, <span class="hljs-string">'吴洪转'</span>, <span class="hljs-string">'13245468787'</span>, <span class="hljs-string">'山东济阳济北工业区仁和街21号'</span>, <span class="hljs-string">'0531-53362445'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2015-01-28 10:52:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for smbms_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `smbms_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `smbms_role` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'主键ID'</span>,<br>  `roleCode` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'角色编码'</span>,<br>  `roleName` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'角色名称'</span>,<br>  `createdBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建者'</span>,<br>  `creationDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建时间'</span>,<br>  `modifyBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'修改者'</span>,<br>  `modifyDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'修改时间'</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_unicode_ci;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of smbms_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'1'</span>, <span class="hljs-string">'SMBMS_ADMIN'</span>, <span class="hljs-string">'系统管理员'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'2'</span>, <span class="hljs-string">'SMBMS_MANAGER'</span>, <span class="hljs-string">'经理'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'3'</span>, <span class="hljs-string">'SMBMS_EMPLOYEE'</span>, <span class="hljs-string">'普通员工'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-13 00:00:00'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for smbms_user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `smbms_user`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `smbms_user` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'主键ID'</span>,<br>  `userCode` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'用户编码'</span>,<br>  `userName` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'用户名称'</span>,<br>  `userPassword` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'用户密码'</span>,<br>  `gender` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'性别（1:女、 2:男）'</span>,<br>  `birthday` <span class="hljs-type">date</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'出生日期'</span>,<br>  `phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'手机'</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">COLLATE</span> utf8_unicode_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'地址'</span>,<br>  `userRole` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'用户角色（取自角色表-角色id）'</span>,<br>  `createdBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建者（userId）'</span>,<br>  `creationDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'创建时间'</span>,<br>  `modifyBy` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'更新者（userId）'</span>,<br>  `modifyDate` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'更新时间'</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">16</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_unicode_ci;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of smbms_user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'1'</span>, <span class="hljs-string">'wen'</span>, <span class="hljs-string">'系统管理员'</span>, <span class="hljs-string">'123'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1997-01-01'</span>, <span class="hljs-string">'15200981234'</span>, <span class="hljs-string">'湖南省衡阳市蒸湘区南华大学'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2019-04-07 10:15:55'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'5'</span>, <span class="hljs-string">'hanlubiao'</span>, <span class="hljs-string">'韩路彪'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1984-06-05'</span>, <span class="hljs-string">'18567542321'</span>, <span class="hljs-string">'北京市朝阳区北辰中心12号'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2014-12-31 19:52:09'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'6'</span>, <span class="hljs-string">'zhanghua'</span>, <span class="hljs-string">'张华'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1983-06-15'</span>, <span class="hljs-string">'13544561111'</span>, <span class="hljs-string">'北京市海淀区学院路61号'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2013-02-11 10:51:17'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'7'</span>, <span class="hljs-string">'wangyang'</span>, <span class="hljs-string">'王洋'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1982-12-31'</span>, <span class="hljs-string">'13444561124'</span>, <span class="hljs-string">'北京市海淀区西二旗辉煌国际16层'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2014-06-11 19:09:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'8'</span>, <span class="hljs-string">'zhaoyan'</span>, <span class="hljs-string">'赵燕'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1986-03-07'</span>, <span class="hljs-string">'18098764545'</span>, <span class="hljs-string">'北京市海淀区回龙观小区10号楼'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-21 13:54:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'10'</span>, <span class="hljs-string">'sunlei'</span>, <span class="hljs-string">'孙磊'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1981-01-04'</span>, <span class="hljs-string">'13387676765'</span>, <span class="hljs-string">'北京市朝阳区管庄新月小区12楼'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2015-05-06 10:52:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'11'</span>, <span class="hljs-string">'sunxing'</span>, <span class="hljs-string">'孙兴'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1978-03-12'</span>, <span class="hljs-string">'13367890900'</span>, <span class="hljs-string">'北京市朝阳区建国门南大街10号'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-11-09 16:51:17'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'12'</span>, <span class="hljs-string">'zhangchen'</span>, <span class="hljs-string">'张晨'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1986-03-28'</span>, <span class="hljs-string">'18098765434'</span>, <span class="hljs-string">'朝阳区管庄路口北柏林爱乐三期13号楼'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-08-09 05:52:37'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-04-14 14:15:36'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'13'</span>, <span class="hljs-string">'dengchao'</span>, <span class="hljs-string">'邓超'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1981-11-04'</span>, <span class="hljs-string">'13689674534'</span>, <span class="hljs-string">'北京市海淀区北航家属院10号楼'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2016-07-11 08:02:47'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'14'</span>, <span class="hljs-string">'yangguo'</span>, <span class="hljs-string">'杨过'</span>, <span class="hljs-string">'0000000'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'1980-01-01'</span>, <span class="hljs-string">'13388886623'</span>, <span class="hljs-string">'北京市朝阳区北苑家园茉莉园20号楼'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2015-02-01 03:52:07'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `smbms_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'15'</span>, <span class="hljs-string">'test'</span>, <span class="hljs-string">'test'</span>, <span class="hljs-string">'111'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2019-04-16'</span>, <span class="hljs-string">'123456789'</span>, <span class="hljs-string">'南华大学'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2019-04-16 19:52:37'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><br></code></pre></td></tr></tbody></table></figure><h2 id="项目搭建的方式"><a href="#项目搭建的方式" class="headerlink" title="项目搭建的方式"></a>项目搭建的方式</h2><p>考虑是否使用 maven？</p><ul><li>使用 maven 需要注意依赖</li><li>不使用 maven 考虑 jar 包</li></ul><h1 id="项目搭建准备工作"><a href="#项目搭建准备工作" class="headerlink" title="项目搭建准备工作"></a>项目搭建准备工作</h1><ol><li><p>搭建一个 maven web 项目</p></li><li><p>配置 Tomcat</p></li><li><p>测试项目是否可以跑起来</p></li><li><p>导入项目中可能会需要的 jar 包以及依赖</p><ul><li>servlet、jsp、mysql-jdbc、jstl、standard</li></ul></li><li><p> 创建项目包结构</p><ul><li>pojo - 实体类（实现 Serializable 标记接口，序列化）</li><li>dao - 数据库增删改查</li><li> service - 业务层</li><li> servlet - 控制层</li><li> util - 工具类</li><li> filter - 过滤器</li></ul></li><li><p>编写实体类</p><ul><li>ORM 映射：表 - 类映射</li></ul></li><li><p>编写基础公共类</p><ul><li><p>数据库配置文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/smbms?useUnicode=ture&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写数据库的公共类</p></li><li><p>编写字符编码过滤器</p></li></ul></li><li><p>导入静态资源</p></li></ol><h1 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h1><ol><li><p>编写前端页面</p></li><li><p>设置欢迎页</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>login.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 dao 层登录用户的登录接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao.user;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> {<br><span class="hljs-comment">//得到登录用户</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getLoginUser</span> <span class="hljs-params">(Connection connection, String userCode,String password)</span> <span class="hljs-keyword">throws</span> SQLException;<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 dao 接口的实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao.user;<br><br><span class="hljs-keyword">import</span> com.zlw.dao.BaseDao;<br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getLoginUser</span> <span class="hljs-params">(Connection connection, String userCode)</span> <span class="hljs-keyword">throws</span> SQLException {<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) {<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"select * from smbms_user where userCode=?"</span>;<br>Object[] params = {userCode};<br>resultSet = BaseDao.execute(connection, preparedStatement, resultSet, sql, params);<br><span class="hljs-keyword">if</span> (resultSet.next()) {<br>user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setId(resultSet.getInt(<span class="hljs-string">"id"</span>));<br>user.setUserCode(resultSet.getString(<span class="hljs-string">"usercode"</span>));<br>user.setUserName(resultSet.getString(<span class="hljs-string">"username"</span>));<br>user.setUserPassword(resultSet.getString(<span class="hljs-string">"userpassword"</span>));<br>user.setGender(resultSet.getInt(<span class="hljs-string">"gender"</span>));<br>user.setBirthday(resultSet.getDate(<span class="hljs-string">"birthday"</span>));<br>user.setPhone(resultSet.getString(<span class="hljs-string">"phone"</span>));<br>user.setAddress(resultSet.getString(<span class="hljs-string">"address"</span>));<br>user.setUserRole(resultSet.getInt(<span class="hljs-string">"userrole"</span>));<br>user.setCreatedBy(resultSet.getInt(<span class="hljs-string">"createdby"</span>));<br>user.setCreationDate(resultSet.getTimestamp(<span class="hljs-string">"creationdate"</span>));<br>user.setModifyBy(resultSet.getInt(<span class="hljs-string">"modifyby"</span>));<br>user.setModifyDate(resultSet.getTimestamp(<span class="hljs-string">"modifydate"</span>));<br>}<br>BaseDao.closeResource(<span class="hljs-literal">null</span>, preparedStatement, resultSet);<br>}<br><span class="hljs-keyword">return</span> user;<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>业务层接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service.user;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> {<br><span class="hljs-comment">//用户登录</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span> <span class="hljs-params">(String userCode, String password)</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>业务层实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service.user;<br><br><span class="hljs-keyword">import</span> com.zlw.dao.BaseDao;<br><span class="hljs-keyword">import</span> com.zlw.dao.user.UserDao;<br><span class="hljs-keyword">import</span> com.zlw.dao.user.UserDaoImpl;<br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> {<br><span class="hljs-comment">//业务层都会调用Dao层，我们需要引入Dao层</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span> <span class="hljs-params">()</span> {<br>userDao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span> <span class="hljs-params">(String userCode, String password)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>connection = BaseDao.getConnection();<br>user = userDao.getLoginUser(connection, userCode,password);<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>BaseDao.closeResource(connection, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>}<br><span class="hljs-keyword">return</span> user;<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 Servlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.servlet.user; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/14</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> com.zlw.service.user.UserService;<br><span class="hljs-keyword">import</span> com.zlw.service.user.UserServiceImpl;<br><span class="hljs-keyword">import</span> com.zlw.util.Constants;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"LoginServlet"</span>, value = <span class="hljs-string">"/login.do"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-comment">//Servlet:控制层，调用业务层代码</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>System.out.println(<span class="hljs-string">"进入LoginServlet"</span>);<br><br><span class="hljs-comment">//获取用户名密码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">userCode</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"userCode"</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">userPassword</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"userPassword"</span>);<br><br><span class="hljs-comment">//和数据库中的用户名密码对比,调用业务层</span><br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.login(userCode, userPassword);<br><span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) {<br><span class="hljs-comment">//可以登录</span><br>request.getSession().setAttribute(Constants.USER_SESSION, user);<br>response.sendRedirect(<span class="hljs-string">"jsp/frame.jsp"</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-comment">//无法登录</span><br>request.setAttribute(<span class="hljs-string">"error"</span>, <span class="hljs-string">"用户名或密码错误!"</span>);<br>request.getRequestDispatcher(<span class="hljs-string">"login.jsp"</span>).forward(request, response);<br>}<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="登录优化"><a href="#登录优化" class="headerlink" title="登录优化"></a>登录优化</h1><ol><li><p>注销功能：移除 Session，返回登录界面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.servlet.user; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/14</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.zlw.util.Constants;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"LogoutServlet"</span>, value = <span class="hljs-string">"/user/logout"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogoutServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-comment">//移除用户的session</span><br>request.getSession().removeAttribute(Constants.USER_SESSION);<br>response.sendRedirect(<span class="hljs-string">"/smbms/login.jsp"</span>);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>权限过滤器拦截</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.filter; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/14</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> com.zlw.util.Constants;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter</span> (filterName = <span class="hljs-string">"SysFilter"</span>, urlPatterns = <span class="hljs-string">"/jsp/*"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span> <span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException {<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span> <span class="hljs-params">()</span> {<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span> <span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) req;<br><span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) resp;<br><br><span class="hljs-comment">//从session中获取用户</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) request.getSession().getAttribute(Constants.USER_SESSION);<br><span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) {<br><span class="hljs-comment">//已经移除/注销/未登录</span><br>response.sendRedirect(<span class="hljs-string">"/smbms/error.jsp"</span>);<br>}<span class="hljs-keyword">else</span> {<br>chain.doFilter(req, resp);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li></ol><h1 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h1><ol><li><p>导入前端素材</p></li><li><p>从底层开始写项目</p></li><li><p>UserDao 接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updatePwd</span> <span class="hljs-params">(Connection connection, <span class="hljs-type">int</span> id, <span class="hljs-type">int</span> password)</span> <span class="hljs-keyword">throws</span> SQLException;<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserDao 接口实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改当前用户密码</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updatePwd</span> <span class="hljs-params">(Connection connection, <span class="hljs-type">int</span> id, <span class="hljs-type">int</span> password)</span> <span class="hljs-keyword">throws</span> SQLException {<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) {<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"UPDATE Smbms_User set Userpassword = ? WHERE Id = ?"</span>;<br>Object[] params = {password, id};<br>flag = BaseDao.execute(connection, preparedStatement, sql, params);<br>BaseDao.closeResource(<span class="hljs-literal">null</span>, preparedStatement, <span class="hljs-literal">null</span>);<br>}<br><span class="hljs-keyword">return</span> flag;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserService 接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//调用dao层，根据id修改当前用户密码</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updatePwd</span> <span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> password)</span> <span class="hljs-keyword">throws</span> SQLException;<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserService 接口实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updatePwd</span> <span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> password)</span> <span class="hljs-keyword">throws</span> SQLException {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>connection = BaseDao.getConnection();<br><span class="hljs-keyword">if</span> (userDao.updatePwd(connection, id, password)) {<br>flag = <span class="hljs-literal">true</span>;<br>}<br>BaseDao.closeResource(connection, <span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> flag;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写复用 Servlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.servlet.user; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/15</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.mysql.cj.util.StringUtils;<br><span class="hljs-keyword">import</span> com.zlw.pojo.User;<br><span class="hljs-keyword">import</span> com.zlw.service.user.UserServiceImpl;<br><span class="hljs-keyword">import</span> com.zlw.util.Constants;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"UserServlet"</span>, value = <span class="hljs-string">"/jsp/user.do"</span>)<br><span class="hljs-comment">//实现Servlet复用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"method"</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-string">"savepwd"</span>.equals(method) &amp;&amp; method != <span class="hljs-literal">null</span>) {<br><span class="hljs-built_in">this</span>.updatePwd(request, response);<br>}<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br><br><span class="hljs-comment">//修改密码的请求</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePwd</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> {<br><span class="hljs-comment">//从Session里面拿ID</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(Constants.USER_SESSION);<br><span class="hljs-type">String</span> <span class="hljs-variable">newpassword</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"newpassword"</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//一般不用StringUtils工具类，attribute != null &amp;&amp; newpassword != null &amp;&amp; newpassword.length() != 0</span><br><span class="hljs-keyword">if</span> (attribute != <span class="hljs-literal">null</span> &amp;&amp; newpassword != <span class="hljs-literal">null</span> &amp;&amp; newpassword.length() != <span class="hljs-number">0</span>) {<br><span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>flag = userService.updatePwd(((User) attribute).getId(), newpassword);<br><span class="hljs-keyword">if</span> (flag) {<br>request.setAttribute(Constants.MESSAGE_SESSION, <span class="hljs-string">"修改密码成功，请退出，使用新密码登录！"</span>);<br><span class="hljs-comment">//密码修改成功移除Session</span><br>request.getSession().removeAttribute(Constants.USER_SESSION);<br>} <span class="hljs-keyword">else</span> {<br>request.setAttribute(Constants.MESSAGE_SESSION, <span class="hljs-string">"密码修改失败"</span>);<br>}<br>} <span class="hljs-keyword">else</span> {<br>request.setAttribute(Constants.MESSAGE_SESSION, <span class="hljs-string">"新密码格式错误"</span>);<br>}<br><span class="hljs-keyword">try</span> {<br>request.getRequestDispatcher(<span class="hljs-string">"pwdmodify.jsp"</span>).forward(request, response);<br>} <span class="hljs-keyword">catch</span> (Exception e) {<br>e.printStackTrace();<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p></li></ol><h1 id="优化密码修改：使用Ajax"><a href="#优化密码修改：使用Ajax" class="headerlink" title="优化密码修改：使用Ajax"></a>优化密码修改：使用 Ajax</h1><ol><li><p>阿里巴巴的 fastjson</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure></li><li><p>后台代码修改</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//验证旧密码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pwdModify</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> {<br><span class="hljs-type">Object</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(Constants.USER_SESSION);<br><span class="hljs-type">String</span> <span class="hljs-variable">oldpassword</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"oldpassword"</span>);<span class="hljs-comment">//ajax传的oldpassword</span><br><span class="hljs-comment">//使用Map集合</span><br>Map&lt;String, String&gt; resultMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br><span class="hljs-keyword">if</span> (attribute == <span class="hljs-literal">null</span>) {<span class="hljs-comment">//Session过期/失效</span><br>resultMap.put(<span class="hljs-string">"result"</span>, <span class="hljs-string">"sessionerror"</span>);<br>} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.isNullOrEmpty(oldpassword)) {<span class="hljs-comment">//输入密码为空</span><br>resultMap.put(<span class="hljs-string">"result"</span>, <span class="hljs-string">"error"</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-comment">//Session中用户的密码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">userPassword</span> <span class="hljs-operator">=</span> ((User) attribute).getUserPassword();<br><span class="hljs-keyword">if</span> (oldpassword.equals(userPassword)) {<span class="hljs-comment">//匹配成功</span><br>resultMap.put(<span class="hljs-string">"result"</span>, <span class="hljs-string">"true"</span>);<br>} <span class="hljs-keyword">else</span> {<span class="hljs-comment">//匹配失败</span><br>resultMap.put(<span class="hljs-string">"result"</span>, <span class="hljs-string">"false"</span>);<br>}<br>}<br><span class="hljs-keyword">try</span> {<br>response.setContentType(<span class="hljs-string">"application/json"</span>);<br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br><span class="hljs-comment">//JSONArray阿里巴巴Json工具类,转换格式</span><br>writer.write(JSONArray.toJSONString(resultMap));<br>writer.flush();<br>writer.close();<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>}<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>测试</p></li></ol><h1 id="用户管理实现"><a href="#用户管理实现" class="headerlink" title="用户管理实现"></a>用户管理实现</h1><ol><li>分页工具类导入</li><li>用户列表页面导入</li></ol><h2 id="获取用户数量"><a href="#获取用户数量" class="headerlink" title="获取用户数量"></a>获取用户数量</h2><ol><li><p>UserDao</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据用户名或者角色查询用户总数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUserCount</span> <span class="hljs-params">(Connection connection, String userName, <span class="hljs-type">int</span> userRole)</span> <span class="hljs-keyword">throws</span> SQLException;<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserDaoImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUserCount</span> <span class="hljs-params">(Connection connection, String userName, <span class="hljs-type">int</span> userRole)</span> <span class="hljs-keyword">throws</span> SQLException {<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//存放参数</span><br>ArrayList&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) {<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>sql.append(<span class="hljs-string">"SELECT COUNT(1) AS count from Smbms_User u,Smbms_Role r WHERE u.Userrole = r.Id"</span>);<br><span class="hljs-keyword">if</span> (!StringUtils.isNullOrEmpty(userName)) {<br>sql.append(<span class="hljs-string">" AND u.Username LIKE ?"</span>);<br>list.add(<span class="hljs-string">"%"</span> + userName + <span class="hljs-string">"%"</span>);<span class="hljs-comment">//index:0</span><br>}<br><span class="hljs-keyword">if</span> (userRole &gt; <span class="hljs-number">0</span>) {<br>sql.append(<span class="hljs-string">" AND u.Userrole = ?"</span>);<br>list.add(userRole);<span class="hljs-comment">//index:1</span><br>}<br><span class="hljs-comment">//把list转换成数组</span><br>Object[] params = list.toArray();<br>resultSet = BaseDao.execute(connection, preparedStatement, resultSet, sql.toString(), params);<br><span class="hljs-keyword">if</span> (resultSet.next()) {<br>count = resultSet.getInt(<span class="hljs-string">"count"</span>);<br>}<br>BaseDao.closeResource(<span class="hljs-literal">null</span>, preparedStatement, resultSet);<br>}<br><span class="hljs-keyword">return</span> count;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserService</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询记录数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUserCount</span> <span class="hljs-params">(String userName, <span class="hljs-type">int</span> userRole)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserServiceImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUserCount</span> <span class="hljs-params">(String userName, <span class="hljs-type">int</span> userRole)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">userCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> {<br>connection = BaseDao.getConnection();<br>userCount = userDao.getUserCount(connection, userName, userRole);<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>BaseDao.closeResource(connection, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>}<br><span class="hljs-keyword">return</span> userCount;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="获取用户列表"><a href="#获取用户列表" class="headerlink" title="获取用户列表"></a>获取用户列表</h2><ol><li><p>UserDao</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询用户集合</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUserList</span> <span class="hljs-params">(Connection connection, String userName, <span class="hljs-type">int</span> userRole, <span class="hljs-type">int</span> currentPageNo, <span class="hljs-type">int</span> pageSize)</span> <span class="hljs-keyword">throws</span> Exception;<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserDaoImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUserList</span> <span class="hljs-params">(Connection connection, String userName, <span class="hljs-type">int</span> userRole, <span class="hljs-type">int</span> currentPageNo, <span class="hljs-type">int</span> pageSize)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstm</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;User&gt;();<br><span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) {<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>sql.append(<span class="hljs-string">"select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole = r.id"</span>);<br>List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><span class="hljs-keyword">if</span> (!StringUtils.isNullOrEmpty(userName)) {<br>sql.append(<span class="hljs-string">" and u.userName like ?"</span>);<br>list.add(<span class="hljs-string">"%"</span> + userName + <span class="hljs-string">"%"</span>);<br>}<br><span class="hljs-keyword">if</span> (userRole &gt; <span class="hljs-number">0</span>) {<br>sql.append(<span class="hljs-string">" and u.userRole = ?"</span>);<br>list.add(userRole);<br>}<br>sql.append(<span class="hljs-string">" order by creationDate DESC limit ?,?"</span>);<br>currentPageNo = (currentPageNo - <span class="hljs-number">1</span>) * pageSize;<br>list.add(currentPageNo);<br>list.add(pageSize);<br>Object[] params = list.toArray();<br>rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);<br><span class="hljs-keyword">while</span> (rs.next()) {<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setId(rs.getInt(<span class="hljs-string">"id"</span>));<br>user.setUserCode(rs.getString(<span class="hljs-string">"userCode"</span>));<br>user.setUserName(rs.getString(<span class="hljs-string">"userName"</span>));<br>user.setGender(rs.getInt(<span class="hljs-string">"gender"</span>));<br>user.setBirthday(rs.getDate(<span class="hljs-string">"birthday"</span>));<br>user.setPhone(rs.getString(<span class="hljs-string">"phone"</span>));<br>user.setUserRole(rs.getInt(<span class="hljs-string">"userRole"</span>));<br>user.setUserRoleName(rs.getString(<span class="hljs-string">"userRoleName"</span>));<br>userList.add(user);<br>}<br>BaseDao.closeResource(<span class="hljs-literal">null</span>, pstm, rs);<br>}<br><span class="hljs-keyword">return</span> userList;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserService</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据条件查询用户列表</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">(String queryUserName, <span class="hljs-type">int</span> queryUserRole, <span class="hljs-type">int</span> currentPageNo, <span class="hljs-type">int</span> pageSize)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>UserServiceImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">(String queryUserName, <span class="hljs-type">int</span> queryUserRole, <span class="hljs-type">int</span> currentPageNo, <span class="hljs-type">int</span> pageSize)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>List&lt;User&gt; userList = <span class="hljs-literal">null</span>;<br>System.out.println(<span class="hljs-string">"queryUserName ---- &gt; "</span> + queryUserName);<br>System.out.println(<span class="hljs-string">"queryUserRole ---- &gt; "</span> + queryUserRole);<br>System.out.println(<span class="hljs-string">"currentPageNo ---- &gt; "</span> + currentPageNo);<br>System.out.println(<span class="hljs-string">"pageSize ---- &gt; "</span> + pageSize);<br><span class="hljs-keyword">try</span> {<br>connection = BaseDao.getConnection();<br>userList = userDao.getUserList(connection, queryUserName,queryUserRole,currentPageNo,pageSize);<br>} <span class="hljs-keyword">catch</span> (Exception e) {<br>e.printStackTrace();<br>}<span class="hljs-keyword">finally</span>{<br>BaseDao.closeResource(connection, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>}<br><span class="hljs-keyword">return</span> userList;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="获取角色操作"><a href="#获取角色操作" class="headerlink" title="获取角色操作"></a>获取角色操作</h2><p>为了职责统一，可以把角色操作单独放在一个包中，和 pojo 类对应</p><ol><li><p>RoleDao</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao.role;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.Role;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RoleDao</span> {<span class="hljs-comment">//获取角色列表</span><br><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title function_">getRoleList</span> <span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException;<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>RoleDaoImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.dao.role;<br><br><span class="hljs-keyword">import</span> com.zlw.dao.BaseDao;<br><span class="hljs-keyword">import</span> com.zlw.pojo.Role;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RoleDao</span>{<br><span class="hljs-comment">//获取角色列表</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title function_">getRoleList</span> <span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException {<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>ArrayList&lt;Role&gt; roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Role&gt;();<br><span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) {<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT * FROM Smbms_Role"</span>;<br>Object[] params = {};<br>resultSet = BaseDao.execute(connection, preparedStatement, resultSet, sql, params);<br><span class="hljs-keyword">while</span> (resultSet.next()) {<br><span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Role</span>();<br>role.setId(resultSet.getInt(<span class="hljs-string">"id"</span>));<br>role.setRoleCode(resultSet.getString(<span class="hljs-string">"rolecode"</span>));<br>role.setRoleName(resultSet.getString(<span class="hljs-string">"rolename"</span>));<br>roles.add(role);<br>}<br>BaseDao.closeResource(<span class="hljs-literal">null</span>, preparedStatement, resultSet);<br>}<br><span class="hljs-keyword">return</span> roles;<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>RoleService</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service.role;<br><br><span class="hljs-keyword">import</span> com.zlw.pojo.Role;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RoleService</span> {<br><span class="hljs-comment">//获取角色列表</span><br><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title function_">getRoleList</span> <span class="hljs-params">()</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>RoleServiceImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.service.role;<br><br><span class="hljs-keyword">import</span> com.zlw.dao.BaseDao;<br><span class="hljs-keyword">import</span> com.zlw.dao.role.RoleDao;<br><span class="hljs-keyword">import</span> com.zlw.dao.role.RoleDaoImpl;<br><span class="hljs-keyword">import</span> com.zlw.pojo.Role;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RoleService</span>{<br><span class="hljs-comment">//引入Dao</span><br><span class="hljs-keyword">private</span> RoleDao roleDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RoleServiceImpl</span> <span class="hljs-params">()</span> {<br>roleDao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleDaoImpl</span>();<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title function_">getRoleList</span> <span class="hljs-params">()</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>List&lt;Role&gt; roleList = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>connection = BaseDao.getConnection();<br>roleList = roleDao.getRoleList(connection);<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>}<span class="hljs-keyword">finally</span> {<br>    BaseDao.closeResource(connection,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>}<br><span class="hljs-keyword">return</span> roleList;<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="用户显示Servlet"><a href="#用户显示Servlet" class="headerlink" title="用户显示Servlet"></a>用户显示 Servlet</h2><ol><li>获取前端数据</li><li>判断请求是否需要执行</li><li>用户列表显示</li><li>返回前端 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用户管理页面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> {<br>    <span class="hljs-comment">//查询用户列表</span><br>    <span class="hljs-comment">//从前端获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">queryname</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"queryname"</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">queryTempUserRole</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"queryUserRole"</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pageIndex</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"pageIndex"</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">queryUserRole</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//获取用户列表</span><br>    <span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>    List&lt;User&gt; userList = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//第一次走这个请求一定是第一页，页面大小是固定的</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<span class="hljs-comment">//可以写到配置文件，方便修改</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">currentPageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//当前页码,默认第一页</span><br><br>    <span class="hljs-keyword">if</span> (queryname == <span class="hljs-literal">null</span>) {<br>        queryname = <span class="hljs-string">""</span>;<br>    }<br>    <span class="hljs-keyword">if</span> (queryTempUserRole != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">""</span>.equals(queryTempUserRole)) {<br>        queryUserRole = Integer.parseInt(queryTempUserRole);<span class="hljs-comment">//给查询赋值:0,1,2,3</span><br>    }<br>    <span class="hljs-keyword">if</span> (pageIndex != <span class="hljs-literal">null</span>) {<br>        <span class="hljs-keyword">try</span> {<br>            currentPageNo = Integer.parseInt(pageIndex);<br>        } <span class="hljs-keyword">catch</span> (Exception e) {<br>            <span class="hljs-keyword">try</span> {<br>                response.sendRedirect(<span class="hljs-string">"error.jsp"</span>);<br>            } <span class="hljs-keyword">catch</span> (IOException ioException) {<br>                ioException.printStackTrace();<br>            }<br>        }<br>    }<br><br>    <span class="hljs-comment">//获取用户总数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> userService.getUserCount(queryname, queryUserRole);<br>    <span class="hljs-comment">//总页数支持</span><br>    <span class="hljs-type">PageSupport</span> <span class="hljs-variable">pageSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageSupport</span>();<br>    pageSupport.setCurrentPageNo(currentPageNo);<span class="hljs-comment">//设置当前页</span><br>    pageSupport.setPageSize(pageSize);<span class="hljs-comment">//设置页面大小</span><br>    pageSupport.setTotalCount(totalCount);<span class="hljs-comment">//设置总页数</span><br><br>    <span class="hljs-comment">//控制首页和尾页</span><br>    <span class="hljs-comment">//获取总页数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">totalPageCount</span> <span class="hljs-operator">=</span> pageSupport.getTotalPageCount();<br>    <span class="hljs-comment">//如果跳转页面小于1，显示第一页</span><br>    <span class="hljs-keyword">if</span> (currentPageNo &lt; <span class="hljs-number">1</span>) {<br>        currentPageNo = <span class="hljs-number">1</span>;<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentPageNo &gt; totalPageCount) {<br>        <span class="hljs-comment">//跳转页面大于总页数，显示最后一页</span><br>        currentPageNo = totalPageCount;<br>    }<br><br>    <span class="hljs-comment">//获取用户列表展示</span><br>    userList = userService.getUserList(queryname, queryUserRole, currentPageNo, pageSize);<br>    request.setAttribute(<span class="hljs-string">"userList"</span>,userList);<br><br>    <span class="hljs-comment">//获取角色列表展示</span><br>    <span class="hljs-type">RoleServiceImpl</span> <span class="hljs-variable">roleService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoleServiceImpl</span>();<br>    List&lt;Role&gt; roleList = roleService.getRoleList();<br>    request.setAttribute(<span class="hljs-string">"roleList"</span>, roleList);<br><br>    <span class="hljs-comment">//传页数相关数据</span><br>    request.setAttribute(<span class="hljs-string">"totalCount"</span>,totalCount);<br>    request.setAttribute(<span class="hljs-string">"currentPageNo"</span>,currentPageNo);<br>    request.setAttribute(<span class="hljs-string">"totalPageCount"</span>,totalPageCount);<br><br>    <span class="hljs-comment">//返回前端</span><br>    <span class="hljs-keyword">try</span> {<br>        request.getRequestDispatcher(<span class="hljs-string">"userlist.jsp"</span>).forward(request, response);<br>    } <span class="hljs-keyword">catch</span> (ServletException e) {<br>        e.printStackTrace();<br>    } <span class="hljs-keyword">catch</span> (IOException e) {<br>        e.printStackTrace();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Centos6.8 的 Hadoop 分布式集群安装</title>
    <link href="/posts/6262/"/>
    <url>/posts/6262/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><p>安装克隆三台 Linux 虚拟机，Centos 版本为：6.8</p></li><li><p>虚拟机已经进行网络配置，可以为桥接、NAT 等模式，保证可以 ping 通外网（即可以上网）</p></li><li><p>ssh 连接工具，包括但不限于 Xshell，vscode 等。。。</p></li><li><p>远程文件传输工具：FileZilla</p></li><li><p>文本编辑器：Notepad++</p></li></ul><h1 id="下载准备"><a href="#下载准备" class="headerlink" title="下载准备"></a>下载准备</h1><p><a href="https://hadoop.apache.org/release/3.1.2.html">点击进入 Hadoop 官网</a>下载 3.1.2 版本 Hadoop 源码包</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_Hadoop.png" alt="Hadoop版本"></p><p><a href="https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html">点击这里下载</a>下图 JDK1.8</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_JDK.png" alt="JDK版本"></p><h1 id="虚拟机准备"><a href="#虚拟机准备" class="headerlink" title="虚拟机准备"></a>虚拟机准备</h1><h2 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>执行下面命令，修改对应主机名为：Hadoop (x):x 为节点名</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># vim /etc/sysconfig/network</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D.png" alt="修改主机名"></p><p>配置完成后重启虚拟机，执行下面命令查看是否修改成功</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># hostname</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E4%BF%AE%E6%94%B9%E7%BB%93%E6%9E%9C.png" alt="修改结果"></p><h2 id="修改映射文件"><a href="#修改映射文件" class="headerlink" title="修改映射文件"></a>修改映射文件</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>命令:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># vim /etc/hosts</span><br></code></pre></td></tr></tbody></table></figure><p>修改三个虚拟机的映射文件如下图，分别为你的虚拟机的 IP + 你修改的主机名.hadoop.com + 你修改的主机名<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E4%BF%AE%E6%94%B9hosts%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6.png" alt="修改映射文件"></p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机执行下面命令，用于关闭防火墙，以及防火墙开机自启</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># service iptables stop</span><br>[root@Hadoop1 ~]<span class="hljs-comment"># chkconfig iptables off</span><br>[root@Hadoop1 ~]<span class="hljs-comment"># service iptables status #查看防火墙状态</span><br></code></pre></td></tr></tbody></table></figure><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>创建目录用于放置文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># mkdir /opt/module</span><br>[root@Hadoop1 ~]<span class="hljs-comment"># mkdir /opt/software</span><br></code></pre></td></tr></tbody></table></figure><h2 id="卸载Linux自带JDK"><a href="#卸载Linux自带JDK" class="headerlink" title="卸载Linux自带JDK"></a>卸载 Linux 自带 JDK</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>查询自带的 JDK</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># rpm -qa |grep java</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E6%9F%A5%E8%AF%A2JDK%E7%89%88%E6%9C%AC.png" alt="查询JDK版本"></p><p>卸载 JDK</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># rpm -e java-1.7.0-openjdk-1.7.0.99-2.6.5.1.el6.x86_64</span><br>[root@Hadoop1 ~]<span class="hljs-comment"># rpm -e java-1.6.0-openjdk-1.6.0.38-1.13.10.4.el6.x86_64</span><br>[root@Hadoop1 ~]<span class="hljs-comment"># rpm -e tzdata-java-2016c-1.el6.noarch</span><br></code></pre></td></tr></tbody></table></figure><h2 id="上传文件包至Linux"><a href="#上传文件包至Linux" class="headerlink" title="上传文件包至Linux"></a>上传文件包至 Linux</h2><p>在三台虚拟机使用 FileZilla</p><ul><li>上传 JDK 软件包至 /opt/software</li><li> 上传 Hadoop 软件包至节点 1 的 /opt/software</li><li> 剩余节点我们使用分发命令即可</li></ul><h2 id="三台虚拟机关闭selinux"><a href="#三台虚拟机关闭selinux" class="headerlink" title="三台虚拟机关闭selinux"></a>三台虚拟机关闭 selinux</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 hadoop]<span class="hljs-comment"># vim /etc/selinux/config</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E5%85%B3%E9%97%AD.png" alt="关闭selinux"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 hadoop]<span class="hljs-comment"># source /etc/selinux/config</span><br></code></pre></td></tr></tbody></table></figure><h2 id="实现免密登录"><a href="#实现免密登录" class="headerlink" title="实现免密登录"></a>实现免密登录</h2><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机执行命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 hadoop]<span class="hljs-comment"># ssh-keygen -t rsa</span><br></code></pre></td></tr></tbody></table></figure><p>按下三次回车键，生成公钥<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5.png" alt="生成公钥"></p><h3 id="公钥拷贝"><a href="#公钥拷贝" class="headerlink" title="公钥拷贝"></a>公钥拷贝</h3><p>在节点 2 和节点 3 执行下面命令</p><p>在节点 2 和节点 3 执行下面命令</p><p>在节点 2 和节点 3 执行下面命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop2 software]<span class="hljs-comment"># ssh-copy-id Hadoop1</span><br></code></pre></td></tr></tbody></table></figure><p>输入 yes 按继续回车（可能一次也可能两次），再输入节点 1 的登录密码</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E6%8B%B7%E8%B4%9D%E5%85%AC%E9%92%A5.png" alt="拷贝公钥"></p><h3 id="复制第一台机器的认证到其他机器"><a href="#复制第一台机器的认证到其他机器" class="headerlink" title="复制第一台机器的认证到其他机器"></a>复制第一台机器的认证到其他机器</h3><p>只在第一台机器上面执行以下命令</p><p>只在第一台机器上面执行以下命令</p><p>只在第一台机器上面执行以下命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 hadoop]<span class="hljs-comment"># scp /root/.ssh/authorized_keys Hadoop2:/root/.ssh</span><br>[root@Hadoop1 hadoop]<span class="hljs-comment"># scp /root/.ssh/authorized_keys Hadoop3:/root/.ssh</span><br></code></pre></td></tr></tbody></table></figure><p>输入 yes 按继续回车（可能一次也可能两次），再输入节点 2（节点 3）的登录密码，生成私钥</p><h3 id="相互验证登录"><a href="#相互验证登录" class="headerlink" title="相互验证登录"></a>相互验证登录</h3><p>根据提示输入 yes 和登录密码即可</p><p>在节点 1 执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 hadoop]<span class="hljs-comment"># ssh Hadoop1</span><br>[root@Hadoop1 hadoop]<span class="hljs-comment"># ssh Hadoop2</span><br>[root@Hadoop1 hadoop]<span class="hljs-comment"># ssh Hadoop3</span><br>[root@Hadoop1 hadoop-3.1.2]<span class="hljs-comment"># ssh-copy-id 192.168.173.171</span><br>[root@Hadoop1 hadoop-3.1.2]<span class="hljs-comment"># ssh-copy-id 192.168.173.172</span><br>[root@Hadoop1 hadoop-3.1.2]<span class="hljs-comment"># ssh-copy-id 192.168.173.173</span><br></code></pre></td></tr></tbody></table></figure><p>后面三条命令加的是三个节点的 IP</p><p>在节点 2 执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop2 hadoop]<span class="hljs-comment"># ssh Hadoop1</span><br>[root@Hadoop2 hadoop]<span class="hljs-comment"># ssh Hadoop2</span><br>[root@Hadoop2 hadoop]<span class="hljs-comment"># ssh Hadoop3</span><br></code></pre></td></tr></tbody></table></figure><p>在节点 3 执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop3 hadoop]<span class="hljs-comment"># ssh Hadoop1</span><br>[root@Hadoop3 hadoop]<span class="hljs-comment"># ssh Hadoop2</span><br>[root@Hadoop3 hadoop]<span class="hljs-comment"># ssh Hadoop3</span><br></code></pre></td></tr></tbody></table></figure><h2 id="实现时钟同步"><a href="#实现时钟同步" class="headerlink" title="实现时钟同步"></a>实现时钟同步</h2><p>为什么需要时间同步？</p><p>因为很多分布式系统是有状态的，比如说存储一个数据，A 节点 记录的时间是 1, B 节点 记录的时间是 2, 就会出问题。</p><p>首先配置好 yum 源，可参考<a href="https://www.inencoding.com/posts/13607/#%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9Cyum%E6%BA%90">这篇文章</a></p><p>在三台虚拟机上执行命令</p><p>在三台虚拟机上执行命令</p><p>在三台虚拟机上执行命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 software]<span class="hljs-comment"># yum install -y ntp</span><br>[root@Hadoop1 hadoop]<span class="hljs-comment"># crontab -e</span><br></code></pre></td></tr></tbody></table></figure><p>按 i 输入</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">*/1 * * * * /usr/sbin/ntpdate ntp4.aliyun.com;<br></code></pre></td></tr></tbody></table></figure><p>接着保存退出</p><p>执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 hadoop]<span class="hljs-comment"># crontab -l</span><br></code></pre></td></tr></tbody></table></figure><p>若返回的是刚刚录入的数据，则表示成功</p><h1 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置 JDK</h1><h2 id="解压JDK"><a href="#解压JDK" class="headerlink" title="解压JDK"></a>解压 JDK</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>解压 JDK 至 /opt/module</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># cd /opt/software</span><br>[root@Hadoop1 software]<span class="hljs-comment"># tar -zxvf jdk-8u291-linux-x64.tar.gz -C /opt/module/</span><br></code></pre></td></tr></tbody></table></figure><h2 id="获取JDK路径"><a href="#获取JDK路径" class="headerlink" title="获取JDK路径"></a>获取 JDK 路径</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 software]<span class="hljs-comment"># cd /opt/module/jdk1.8.0_291</span><br>[root@Hadoop1 jdk1.8.0_291]<span class="hljs-comment"># pwd</span><br>/opt/module/jdk1.8.0_291<br></code></pre></td></tr></tbody></table></figure><h2 id="打开-etc-profile-文件末尾配置环境变量"><a href="#打开-etc-profile-文件末尾配置环境变量" class="headerlink" title="打开/etc/profile 文件末尾配置环境变量"></a>打开 /etc/profile 文件末尾配置环境变量</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 jdk1.8.0_291]<span class="hljs-comment"># vim /etc/profile</span><br></code></pre></td></tr></tbody></table></figure><p>我的环境变量</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">export JAVA_HOME=/opt/module/jdk1.8.0_291<br>export JRE_HOME=${JAVA_HOME}/jre  <br>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  <br>export PATH=${JAVA_HOME}/bin:$PATH<br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E4%BF%AE%E6%94%B9Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="修改环境变量"></p><h2 id="保存退出后，使文件生效"><a href="#保存退出后，使文件生效" class="headerlink" title="保存退出后，使文件生效"></a>保存退出后，使文件生效</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 jdk1.8.0_291]<span class="hljs-comment"># source /etc/profile</span><br></code></pre></td></tr></tbody></table></figure><h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><p>在三台虚拟机做下面操作</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 jdk1.8.0_291]<span class="hljs-comment"># java -version</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E6%B5%8B%E8%AF%95JDK.png" alt="测试JDK"></p><h1 id="配置Hadoop"><a href="#配置Hadoop" class="headerlink" title="配置Hadoop"></a>配置 Hadoop</h1><h2 id="解压Hadoop"><a href="#解压Hadoop" class="headerlink" title="解压Hadoop"></a>解压 Hadoop</h2><p>解压 Hadoop 至 /opt/module</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 software]<span class="hljs-comment"># tar -zxvf hadoop-3.1.2.tar.gz -C /opt/module/</span><br></code></pre></td></tr></tbody></table></figure><h2 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置 core-site.xml</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 module]<span class="hljs-comment"># cd /opt/module/hadoop-3.1.2/etc/hadoop</span><br>[root@Hadoop1 hadoop]<span class="hljs-comment"># vim core-site.xml</span><br></code></pre></td></tr></tbody></table></figure><p>配置文本：</p><p>节点 1</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://Hadoop1:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 临时文件存储目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/module/hadoop-3.1.2/datas/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  缓冲区大小，实际工作中根据服务器性能动态调整 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.file.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>8192<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  开启hdfs的垃圾桶机制，删除掉的数据可以从垃圾桶中回收，单位分钟 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.trash.interval<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10080<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="配置-hadoop-env-sh"><a href="#配置-hadoop-env-sh" class="headerlink" title="配置 hadoop-env.sh"></a>配置 hadoop-env.sh</h2><p>在文件末尾添加：</p><p>节点 1</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">export JAVA_HOME=/opt/module/jdk1.8.0_291<br>export HDFS_NAMENODE_USER="root"<br>export HDFS_DATANODE_USER="root"<br>export HDFS_SECONDARYNAMENODE_USER="root"<br>export YARN_RESOURCEMANAGER_USER="root"<br>export YARN_NODEMANAGER_USER="root"<br></code></pre></td></tr></tbody></table></figure><h2 id="配置-hdfs-site-xml"><a href="#配置-hdfs-site-xml" class="headerlink" title="配置 hdfs-site.xml"></a>配置 hdfs-site.xml</h2><p>配置文本：</p><p>节点 1</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/module/hadoop-3.1.2/datas/namenode/namenodedatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.blocksize<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>134217728<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.handler.count<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/module/hadoop-3.1.2/datas/datanode/datanodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/module/hadoop-3.1.2/datas/dfs/nn/snn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1.hadoop.com:50090<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/module/hadoop-3.1.2/datas/dfs/nn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/module/hadoop-3.1.2/datas/dfs/snn/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="配置mapred-site-xml"><a href="#配置mapred-site-xml" class="headerlink" title="配置mapred-site.xml"></a>配置 mapred-site.xml</h2><p>配置文本：</p><p>节点 1</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.java.opts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-Xmx512M<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.java.opts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-Xmx512M<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.task.io.sort.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>256<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.task.io.sort.factor<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.shuffle.parallelcopies<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1.hadoop.com:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1.hadoop.com:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/module/hadoop-3.1.2/datas/jobhsitory/intermediateDoneDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/module/hadoop-3.1.2/datas/jobhsitory/DoneDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/opt/module/hadoop-3.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.map.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/opt/module/hadoop-3.1.2/<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.reduce.env<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/opt/module/hadoop-3.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="配置yarn-site-xml"><a href="#配置yarn-site-xml" class="headerlink" title="配置yarn-site.xml"></a>配置 yarn-site.xml</h2><p>配置文本：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.handler.count<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1:8032<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1:8030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1:8031<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1:8033<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1:8088<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Hadoop1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2048<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置不检查虚拟内存的值，不然内存不够会报错 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.resource.detect-hardware-capabilities<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/module/hadoop-3.1.2/datas/nodemanager/nodemanagerDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/module/hadoop-3.1.2/datas/nodemanager/nodemanagerLogs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.log.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/module/hadoop-3.1.2/datas/remoteAppLog/remoteAppLogs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir-suffix<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>18144000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-check-interval-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>86400<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- yarn上面运行一个任务，最少需要1.5G内存，虚拟机没有这么大的内存就调小这个值，不然会报错 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.app.mapreduce.am.resource.mb<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1024<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="配置workers"><a href="#配置workers" class="headerlink" title="配置workers"></a>配置 workers</h2><p>删除原本的 localhost 添加：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Hadoop1<br>Hadoop2<br>Hadoop3<br></code></pre></td></tr></tbody></table></figure><h2 id="创建目录-1"><a href="#创建目录-1" class="headerlink" title="创建目录"></a>创建目录</h2><p>给节点 1 创建目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/tmp</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/dfs/nn/snn/edits</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/namenode/namenodedatas</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/datanode/datanodeDatas</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/dfs/nn/edits</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/dfs/snn/name</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/jobhsitory/intermediateDoneDatas</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/jobhsitory/DoneDatas</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/nodemanager/nodemanagerDatas</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/nodemanager/nodemanagerLogs</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/datas/remoteAppLog/remoteAppLogs</span><br>[root@Hadoop1 software]<span class="hljs-comment"># mkdir -p /opt/module/hadoop-3.1.2/logs</span><br></code></pre></td></tr></tbody></table></figure><h2 id="分发安装包"><a href="#分发安装包" class="headerlink" title="分发安装包"></a>分发安装包</h2><p>在节点 1 上执行命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 module]<span class="hljs-comment"># cd /opt/module/</span><br>[root@Hadoop1 module]<span class="hljs-comment"># scp -r hadoop-3.1.2/ Hadoop2:$PWD</span><br></code></pre></td></tr></tbody></table></figure><p>再输入节点 2 的密码即可完成分发至节点 2</p><p>再在节点 1 上执行命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 module]<span class="hljs-comment"># cd /opt/module/</span><br>[root@Hadoop1 module]<span class="hljs-comment"># scp -r hadoop-3.1.2/ Hadoop3:$PWD</span><br></code></pre></td></tr></tbody></table></figure><p>再输入节点 3 的密码即可完成分发至节点 3</p><h2 id="配置Hadoop环境变量"><a href="#配置Hadoop环境变量" class="headerlink" title="配置Hadoop环境变量"></a>配置 Hadoop 环境变量</h2><p>在三台虚拟机中执行</p><p>在三台虚拟机中执行</p><p>在三台虚拟机中执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 module]<span class="hljs-comment"># vim /etc/profile</span><br></code></pre></td></tr></tbody></table></figure><p>在文件末尾添加</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">export HADOOP_HOME=/opt/module/hadoop-3.1.2/<br>export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native<br>export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib:$HADOOP_COMMON_LIB_NATIVE_DIR"<br>export PATH=:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH<br></code></pre></td></tr></tbody></table></figure><p>如同</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E9%85%8D%E7%BD%AEHadoop%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="配置Hadoop环境变量"></p><p>然后执行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 module]<span class="hljs-comment"># source /etc/profile</span><br></code></pre></td></tr></tbody></table></figure><h2 id="查看Hadoop版本"><a href="#查看Hadoop版本" class="headerlink" title="查看Hadoop版本"></a>查看 Hadoop 版本</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 module]<span class="hljs-comment"># hadoop version</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_Hadoop%E7%89%88%E6%9C%AC.png" alt="查看Hadoop版本"></p><p>安装成功</p><h1 id="格式化HDFS"><a href="#格式化HDFS" class="headerlink" title="格式化HDFS"></a>格式化 HDFS</h1><p>在节点 1 进入 Hadoop 主目录，执行格式化</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 ~]<span class="hljs-comment"># cd /opt/module/hadoop-3.1.2</span><br>[root@Hadoop1 hadoop-3.1.2]<span class="hljs-comment"># bin/hdfs namenode -format</span><br></code></pre></td></tr></tbody></table></figure><h1 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h1><p>在节点 1 执行命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 hadoop-3.1.2]<span class="hljs-comment"># /opt/module/hadoop-3.1.2/sbin/start-dfs.sh</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E5%90%AF%E5%8A%A8.png" alt="启动集群"></p><h1 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h1><p>访问：<br><a href="http://192.168.173.173:50070/dfshealth.html#tab-overview">http://192.168.173.173:50070/dfshealth.html#tab-overview</a></p><p>IP 自行替换为主节点 IP</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E6%B5%8B%E8%AF%95.png" alt="测试结果"></p><p>可看到有三个节点存活</p><h1 id="启动yarn"><a href="#启动yarn" class="headerlink" title="启动yarn"></a>启动 yarn</h1><p>在节点 1 执行命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Hadoop1 hadoop-3.1.2]<span class="hljs-comment"># /opt/module/hadoop-3.1.2/sbin/start-yarn.sh</span><br></code></pre></td></tr></tbody></table></figure><p>访问：<a href="http://192.168.173.173:8088/cluster">http://192.168.173.173:8088/cluster</a></p><p>IP 自行替换为主节点 IP</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.8%E7%9A%84Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_%E6%B5%8B%E8%AF%952.png" alt="测试结果"></p><h1 id="启动mapred"><a href="#启动mapred" class="headerlink" title="启动mapred"></a>启动 mapred</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mash">mapred --daemon start historyserver<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Centos6.5 的 Httpd 安装</title>
    <link href="/posts/13607/"/>
    <url>/posts/13607/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>Centos 版本为：6.5</li><li> 虚拟机已经进行网络配置，可以为桥接、NAT 等模式，保证可以 ping 通外网（即可以上网）</li><li>ssh 连接工具，包括但不限于 Xshell，vscode 等。。。</li><li>远程文件传输工具：FileZilla</li><li> 文本编辑器：Notepad++</li></ul><h2 id="检查IP"><a href="#检查IP" class="headerlink" title="检查IP"></a>检查 IP</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ifconfig</span><br></code></pre></td></tr></tbody></table></figure><p>可以看出 IP 地址如下：<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_ip.png" alt="检查IP"></p><h2 id="检查是否联通外网"><a href="#检查是否联通外网" class="headerlink" title="检查是否联通外网"></a>检查是否联通外网</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ping www.baidu.com</span><br></code></pre></td></tr></tbody></table></figure><p>已联网：<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_ping.png" alt="联网检查"></p><h1 id="yum安装httpd"><a href="#yum安装httpd" class="headerlink" title="yum安装httpd"></a>yum 安装 httpd</h1><h2 id="配置网络yum源"><a href="#配置网络yum源" class="headerlink" title="配置网络yum源"></a>配置网络 yum 源</h2><ol><li><p>通过 FileZilla 连接至你的虚拟机<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_fz1.png" alt="连接虚拟机"></p></li><li><p>打开此目录<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_fz2.png" alt="打开目录"></p></li><li><p>右击：“查看 / 编辑”，使用 Notepad++ 打开 CentOS-Base.repo 把下面的配置复制替换进文件里，注意替换对应版本<br>例如：我使用的 yum 为清华大学的镜像站，你在使用 Centos6.4 时，你需要把下面的配置中 6.5 更改成 6.4，若无法解决 yum 源失效问题，则自行到你的 yum 源镜像站进行查询</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs text"># CentOS-Base.repo<br>#<br># The mirror system uses the connecting IP address of the client and the<br># update status of each mirror to pick mirrors that are updated to and<br># geographically close to the client.  You should use this for CentOS updates<br># unless you are manually picking other mirrors.<br>#<br># If the mirrorlist= does not work for you, as a fall back you can try the <br># remarked out baseurl= line instead.<br>#<br>#<br><br>[base]<br>name=CentOS-$releasever - Base<br>#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os<br>#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/<br>baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/os/x86_64/<br>gpgcheck=1<br>#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br>gpgkey=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/os/x86_64/RPM-GPG-KEY-CentOS-6<br><br>#released updates <br>[updates]<br>name=CentOS-$releasever - Updates<br>#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates<br>#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/<br>baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/updates/x86_64/<br>gpgcheck=1<br>#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br>gpgkey=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/os/x86_64/RPM-GPG-KEY-CentOS-6<br><br>#additional packages that may be useful<br>[extras]<br>name=CentOS-$releasever - Extras<br>#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras<br>#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/<br>baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/extras/x86_64/<br>gpgcheck=1<br>#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br>gpgkey=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/os/x86_64/RPM-GPG-KEY-CentOS-6<br><br>#additional packages that extend functionality of existing packages<br>[centosplus]<br>name=CentOS-$releasever - Plus<br>#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus<br>#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/<br>baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/centosplus/x86_64/<br>gpgcheck=1<br>enabled=0<br>#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br>gpgkey=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/os/x86_64/RPM-GPG-KEY-CentOS-6<br><br>#contrib - packages by Centos Users<br>[contrib]<br>name=CentOS-$releasever - Contrib<br>#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contrib<br>#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/<br>baseurl=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/contrib/x86_64/<br>gpgcheck=1<br>enabled=0<br>#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br>gpgkey=http://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.5/os/x86_64/RPM-GPG-KEY-CentOS-6<br><br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="更改版本"><a href="#更改版本" class="headerlink" title="更改版本"></a>更改版本</h3><p>在 Notepad++ 中按住 ctrl+f，选择替换<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E6%9B%BF%E6%8D%A2.png" alt="替换版本"></p><h3 id="查看Centos版本"><a href="#查看Centos版本" class="headerlink" title="查看Centos版本"></a>查看 Centos 版本</h3><p>使用命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat /etc/issue</span><br></code></pre></td></tr></tbody></table></figure><p>显示版本</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E7%89%88%E6%9C%AC.png" alt="版本"></p><h2 id="使用search查询httpd包"><a href="#使用search查询httpd包" class="headerlink" title="使用search查询httpd包"></a>使用 search 查询 httpd 包</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># yum search httpd</span><br></code></pre></td></tr></tbody></table></figure><p>查询结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_search.png" alt="查询"></p><h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装 gcc</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment">#yum -y install gcc</span><br></code></pre></td></tr></tbody></table></figure><p>安装完成</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_gcc%E5%AE%89%E8%A3%85.png" alt="gcc安装"></p><p>查看安装的包<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_gcc.png" alt="查看gcc版本"></p><h2 id="yum安装httpd-1"><a href="#yum安装httpd-1" class="headerlink" title="yum安装httpd"></a>yum 安装 httpd</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># yum -y install httpd</span><br></code></pre></td></tr></tbody></table></figure><p>安装完成</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_httpd.png" alt="安装httpd"></p><h3 id="修改httpd配置文件"><a href="#修改httpd配置文件" class="headerlink" title="修改httpd配置文件"></a>修改 httpd 配置文件</h3><p>在你第一次启动 httpd 时</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># /etc/init.d/httpd start</span><br></code></pre></td></tr></tbody></table></figure><p>系统会报错，需要修改配置文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># vim /etc/httpd/conf/httpd.conf</span><br></code></pre></td></tr></tbody></table></figure><p>输入    “   :set nu    “    获取行号</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_nu.png" alt="获取行号"></p><p>修改第 277 行为 ServerName localhost:80</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_80.png" alt="修改配置1"></p><p>修改第 402 行为：自己的主页.html</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_html.png" alt="修改配置2"></p><p>然后输入   “   :wq   “  保存</p><h3 id="编辑主页"><a href="#编辑主页" class="headerlink" title="编辑主页"></a>编辑主页</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># touch /var/www/html/zlw.html</span><br>[root@localhost ~]<span class="hljs-comment"># vim /var/www/html/zlw.html</span><br></code></pre></td></tr></tbody></table></figure><p>输入你的网页代码之后</p><p>关闭防火墙</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># service iptables stop</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="关闭防火墙"></p><p>重启 httpd 服务器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># service httpd restart</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E9%87%8D%E5%90%AFhttpd.png" alt="重启httpd"></p><p>重启 network 服务器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># service network restart</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E9%87%8D%E5%90%AFeth0.png" alt="重启eth0"></p><h3 id="测试网页"><a href="#测试网页" class="headerlink" title="测试网页"></a>测试网页</h3><p>在你的物理机（你的真实电脑）上打开浏览器，输入你在第一步查询到的 IP，默认走 80 端口，即可访问你的主页</p><h1 id="源码包安装httpd"><a href="#源码包安装httpd" class="headerlink" title="源码包安装httpd"></a>源码包安装 httpd</h1><h2 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/httpd/">下载地址</a></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E6%BA%90%E7%A0%81%E5%8C%85%E4%B8%8B%E8%BD%BD.png" alt="源码包下载"></p><h2 id="将源码包上传到Centos"><a href="#将源码包上传到Centos" class="headerlink" title="将源码包上传到Centos"></a>将源码包上传到 Centos</h2><p>使用 FileZilla 上传源码包到 Linux 系统<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E4%B8%8A%E4%BC%A0%E6%BA%90%E7%A0%81%E5%8C%85.png" alt="上传源码包"></p><h2 id="解压源码包"><a href="#解压源码包" class="headerlink" title="解压源码包"></a>解压源码包</h2><p>解压到到 /usr/local/src/，并进入源码包目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tar -zxvf httpd-2.4.48.tar.gz -C /usr/local/src/</span><br>[root@localhost src]<span class="hljs-comment"># cd httpd-2.4.48/</span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># ls</span><br></code></pre></td></tr></tbody></table></figure><h2 id="configure-软件配置与检查"><a href="#configure-软件配置与检查" class="headerlink" title="./configure 软件配置与检查"></a>./configure 软件配置与检查</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost httpd-2.4.48]<span class="hljs-comment"># ./configure --help</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E6%A3%80%E6%9F%A5configure.png" alt="检查configure "></p><h2 id="检测系统环境"><a href="#检测系统环境" class="headerlink" title="检测系统环境"></a>检测系统环境</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost httpd-2.4.48]<span class="hljs-comment"># ./configure --prefix=/usr/local/apache2</span><br></code></pre></td></tr></tbody></table></figure><p>提示缺少 APR</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E7%BC%BA%E5%B0%91APR.png" alt="缺少APR"></p><p>解决方法： 下载 APR 编译安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost httpd-2.4.48]<span class="hljs-comment"># wget http://archive.apache.org/dist/apr/apr-1.4.5.tar.gz</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E5%AE%89%E8%A3%85APR.png" alt="安装APR"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost httpd-2.4.48]<span class="hljs-comment"># tar -zxf apr-1.4.5.tar.gz </span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># cd  apr-1.4.5</span><br>[root@localhost apr-1.4.5]<span class="hljs-comment"># ./configure --prefix=/usr/local/apr </span><br>[root@localhost apr-1.4.5]<span class="hljs-comment"># make &amp;&amp; make install</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E6%A3%80%E6%9F%A5APR.png" alt="检查APR"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_APR%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="安装成功"></p><p>为了避免你们重复试错（我帮你们试错了！！！夸我！！！），我列出了还缺少的包 apr-util 和 pcre 由于步骤差不多，就不一一配图了，按照命令执行就行了</p><p>首先下载 g++ 包，<a href="https://wwr.lanzoui.com/iZ2S6q3mw3g">点击下载 g++</a>，解压后上传至 /tmp 目录下，执行下面命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost apr-1.4.5]<span class="hljs-comment"># cd /tmp/</span><br>[root@localhost tmp]<span class="hljs-comment"># cd /tmp/gcc++/</span><br></code></pre></td></tr></tbody></table></figure><p>然后把下面一次性复制到 ssh 连接工具上，自动执行到最后一个命令，最后再按一次回车即可安装完成 g++</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -ivh ppl-0.10.2-11.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh cpp-4.4.7-4.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh kernel-headers-2.6.32-431.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh glibc-headers-2.12-1.132.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh glibc-devel-2.12-1.132.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh gcc-4.4.7-4.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh libstdc++-devel-4.4.7-4.el6.x86_64.rpm  --nodeps  --force<br>rpm -ivh gcc-c++-4.4.7-4.el6.x86_64.rpm  --nodeps  --force<br></code></pre></td></tr></tbody></table></figure><p>然后再执行下面代码</p><p>apr-util</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost gcc++]<span class="hljs-comment"># cd /usr/local/src/httpd-2.4.48</span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># wget http://archive.apache.org/dist/apr/apr-util-1.3.12.tar.gz</span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># tar -zxf apr-util-1.3.12.tar.gz </span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># cd apr-util-1.3.12</span><br>[root@localhost apr-util-1.3.12]<span class="hljs-comment"># ./configure --prefix=/usr/local/apr-util -with-apr=/usr/local/apr/bin/apr-1-config</span><br>[root@localhost apr-util-1.3.12]<span class="hljs-comment"># make &amp;&amp; make install              </span><br></code></pre></td></tr></tbody></table></figure><p>pcre</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost apr-util-1.3.12]<span class="hljs-comment"># cd /usr/local/src/httpd-2.4.48</span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># wget http://jaist.dl.sourceforge.net/project/pcre/pcre/8.10/pcre-8.10.zip</span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># unzip -o pcre-8.10.zip</span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># cd pcre-8.10</span><br>[root@localhost pcre-8.10]<span class="hljs-comment"># ./configure --disable-shared --with-pic</span><br>[root@localhost pcre-8.10]<span class="hljs-comment"># make &amp;&amp; make install</span><br></code></pre></td></tr></tbody></table></figure><p>最后再次执行下面命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost pcre-8.10]<span class="hljs-comment"># cd ..</span><br>[root@localhost httpd-2.4.48]<span class="hljs-comment"># ./configure --prefix=/usr/local/apache2 --with-apr-util=/usr/local/apr-util/</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E6%A3%80%E6%B5%8B%E6%88%90%E5%8A%9F.png" alt="检测成功"></p><p>编译安装 httpd</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost httpd-2.4.48]<span class="hljs-comment"># make &amp;&amp; make install</span><br></code></pre></td></tr></tbody></table></figure><h2 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost src]<span class="hljs-comment"># vim /usr/local/apache2/conf/httpd.conf </span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E6%9B%B4%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt="更改配置文件"></p><p>并且关闭第一次安装的 yum 源版本的 httpd</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost src]<span class="hljs-comment"># /etc/init.d/httpd stop</span><br></code></pre></td></tr></tbody></table></figure><h2 id="开启apache服务"><a href="#开启apache服务" class="headerlink" title="开启apache服务"></a>开启 apache 服务</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost src]<span class="hljs-comment"># /usr/local/apache2/bin/apachectl start</span><br></code></pre></td></tr></tbody></table></figure><h2 id="测试网页-1"><a href="#测试网页-1" class="headerlink" title="测试网页"></a>测试网页</h2><p>在你的物理机（你的真实电脑）上打开浏览器，输入你在第一步查询到的 IP，默认走 80 端口，即可访问你的主页</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/%E5%9F%BA%E4%BA%8ECentos6.5%E7%9A%84Httpd%E5%AE%89%E8%A3%85_%E6%B5%8B%E8%AF%95%E7%BD%91%E9%A1%B5.png" alt="测试网页"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb 学习笔记</title>
    <link href="/posts/16781/"/>
    <url>/posts/16781/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>web 开发:</p><ul><li>web, 网页的意思，我们能从网上拿到一些资源</li><li>静态 web：<ul><li>html，css</li><li> 提供给所有人看的数据始终不会发生变化</li></ul></li><li>动态 web：<ul><li>几乎所有的网站</li><li>提供给所有人看的数据会发生变化，每个人在不同时间，不同地点看到的信息各不相同</li><li>技术栈：Servlet / JSP ，ASP ，PHP</li></ul></li></ul><p>在 java 中，动态 web 资源开发的技术统称为：JavaWeb</p><h3 id="web应用程序"><a href="#web应用程序" class="headerlink" title="web应用程序"></a>web 应用程序</h3><ul><li><p>web 应用程序：可以提供浏览器访问的程序</p></li><li><p>我们能访问到的任何一个页面或者资源，都存在于世界上的某一个计算机上</p></li><li><p>这些统一的 web 资源会被放在同一个文件夹下</p></li><li><p>一个 web 应用由多部份组成（静态 / 动态 web）</p><ul><li>html，css，js</li><li>jsp，servlet</li><li>Java 程序</li><li> jar 包</li><li>配置文件</li></ul></li></ul><p>web 应用程序编写完毕后，若想提供给外界访问，需要一个服务器统一管理</p><h3 id="静态web"><a href="#静态web" class="headerlink" title="静态web"></a>静态 web</h3><ul><li>*.htm   *.html 都是网页的后缀，如果服务器上存在这些东西，我们就可以进行读取，通络</li></ul><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E9%9D%99%E6%80%81Web%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="静态Web示意图"></p><ul><li>静态 web 的缺点<ul><li> web 页面无法动态更新，所有用户看到的都是同一个页面<ul><li>可以使用 JavaScript 做成伪动态</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="动态web"><a href="#动态web" class="headerlink" title="动态web"></a>动态 web</h3><p>页面会动态显示：web 的页面展示效果因人而异</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E5%8A%A8%E6%80%81Web%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="动态Web示意图"></p><p>缺点：</p><ul><li>假如服务器的动态 web 资源出现了错误，我们需要重新编写我们的后台程序，重新发布<ul><li>停机维护</li></ul></li></ul><p>优点:</p><ul><li>web 页面可以动态更新，所有用户看到的都不是同一个页面</li><li>它可以和数据库交互（数据持久化：注册，用户信息。。。）</li></ul><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E5%8A%A8%E6%80%81Web%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="动态Web连接数据库"></p><h1 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web 服务器</h1><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>ASP：</p><ul><li>微软：国内最早留下的就是 ASP</li><li> 在 HTML 中嵌入了 vb 脚本，ASP+COM</li><li> 在 ASP 开发中，基本一个页面都有几千行业务代码，维护成本高</li><li> C#</li><li>IIS</li></ul><p>PHP：</p><ul><li>PHP 开发速度很快，功能强大，跨平台，代码简单</li><li>无法承载大访问量的情况（局限性）</li></ul><p>JSP/Servlet：</p><ul><li>sun 公司主推的 B/S 架构</li><li>基于 Java 语言（所有的大公司或者一些开源的组件都是使用 Java 的）</li><li>可以承载高并发，高可用，高性能问题带来的影响</li><li>语法与 ASP 类似，加强市场强度</li></ul><p>…</p><h2 id="web服务器-1"><a href="#web服务器-1" class="headerlink" title="web服务器"></a>web 服务器</h2><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息</p><p>IIS：</p><ul><li>微软的，ASP，Windows 自带</li></ul><p>tomcat：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/javaweb_tomcat.png" alt="tomcat"></p><p>Tomcat 是 Apache 软件基金会（Apache Software Foundation）的 Jakarta 项目中的一个核心项目，最新的 Servlet 和 JSP 规范总是能在 Tomcat 中得到体现，Tomcat 5 支持最新的 Servlet 2.4 和 JSP 2.0 规范。因为 Tomcat 技术先进、性能稳定，而且免费，因而深受 Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的 Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试 JSP 程序的首选。对于一个初学 JavaWeb 的人来说，它是最佳的选择。</p><p>tomcat 实际上运行 JSP 页面和 Servlet。目前 Tomcat 最新版本为 10.0.5<strong>。</strong></p><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><h4 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装 tomcat</h4><p><a href="https://tomcat.apache.org/">点击进入 tomcat 官网</a></p><h4 id="tomcat的启动"><a href="#tomcat的启动" class="headerlink" title="tomcat的启动"></a>tomcat 的启动</h4><p>bin 目录下的 startup.bat</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/javaweb_tomcat%E5%90%AF%E5%8A%A8.png" alt="tomcat启动"></p><h4 id="tomcat访问测试"><a href="#tomcat访问测试" class="headerlink" title="tomcat访问测试"></a>tomcat 访问测试</h4><p><a href="http://localhost:8080/">http://localhost:8080/</a></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/javaweb_%E5%90%AF%E5%8A%A8tomcat%E4%B8%BB%E9%A1%B5.png" alt="启动tomcat主页"></p><h4 id="tomcat的关闭"><a href="#tomcat的关闭" class="headerlink" title="tomcat的关闭"></a>tomcat 的关闭</h4><p>bin 目录下的 shutdown.bat</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E5%85%B3%E9%97%ADTomcat.png" alt="关闭Tomcat"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_server%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="server.xml"></p><p>可以配置启动的默认端口号 8080，默认主机名称：localhost…</p><p>系统变量配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_Tomcat%E8%B7%AF%E5%BE%84.png" alt="Tomcat路径"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_Tomcat%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.png" alt="Catalina系统变量"><br>path 变量配置</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_path%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.png" alt="path变量"></p><h4 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h4><p>请你谈谈网站是如何进行访问的</p><ol><li>输入域名，回车</li><li>检查本机 hosts 配置文件下有没有这个域名映射<ol><li>有：直接返回对应的 ip 地址，这个地址中，有我们需要的 web 程序，可以直接访问</li><li>没有：去 DNS 服务器找，找到就返回，找不到就返回找不到页面</li></ol></li></ol><h3 id="发布一个web网站"><a href="#发布一个web网站" class="headerlink" title="发布一个web网站"></a>发布一个 web 网站</h3><ul><li>将自己写的网站，放到服务器（tomcat）中指定的 web 应用的文件夹（webapps）下，就可以访问了</li></ul><p>网站的结构：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">--webapps：tomcat服务器的web目录<br>    -ROOT<br>    -xxxx：网站的目录名<br>    -WEB-INF<br>     -classes：Java程序<br>    -lib：web应用所依赖的jar包<br>    -web.xml：网站配置文件<br>    - index.html：默认首页<br>    - <span class="hljs-keyword">static</span><br>    -css<br>    -js<br>    -img<br>    -...<br></code></pre></td></tr></tbody></table></figure><h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><h2 id="什么是http"><a href="#什么是http" class="headerlink" title="什么是http"></a>什么是 http</h2><p>HTTP（超文本传输协议）是一个简单的请求 - 响应协议，它通常运行在 TCP 之上。</p><ul><li>文本：html、字符串…</li><li> 超文本：图片，音频，视频，定位，地图…</li><li> 默认端口：80</li></ul><p>Https：安全的</p><ul><li>默认端口：443</li></ul><h3 id="两个时代"><a href="#两个时代" class="headerlink" title="两个时代"></a>两个时代</h3><ul><li>http1.0<ul><li>http/1.0：客户端可以与 web 服务器连接，只能获得一个 web 资源，之后断开连接。</li></ul></li><li>http2.0<ul><li>http/1.1（目前）：客户端可以与 web 服务器连接，可以获得多个 web 资源。</li></ul></li></ul><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http 请求</h2><ul><li>客户端–发请求 (Request)–服务器</li></ul><p>以百度为例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Request URL: https:<span class="hljs-comment">//www.baidu.com/  请求地址</span><br>Request Method: GET  get方法/post方法<br>Status Code: <span class="hljs-number">200</span> OK  状态码：<span class="hljs-number">200</span><br>Remote Address: <span class="hljs-number">14.215</span><span class="hljs-number">.177</span><span class="hljs-number">.38</span>:<span class="hljs-number">443</span>  远程地址<br>Referrer Policy: unsafe-url  协议<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept: text/html类型<br>Accept-Encoding: gzip, deflate, br编码<br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span>,en;q=<span class="hljs-number">0.8</span>语言<br>Cache-Control: max-age=<span class="hljs-number">0</span><br>Connection: keep-alive保持连接<br></code></pre></td></tr></tbody></table></figure><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><ul><li>请求行中的请求方式：GET</li><li> 请求方式：GET、POST、HEAD、DELETE、PUT、TRACT…<ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的 URL 地址栏显示数据内容，不安全，但是高效。</li><li>post：请求能够携带的参数、大小没有限制，不会在浏览器的 URL 地址栏显示数据内容，不安全，但不高效。</li></ul></li></ul><h3 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式  GBK UTF-<span class="hljs-number">8</span> G2312 ISO8859-<span class="hljs-number">1</span><br>Accept-Language：告诉浏览器它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成时是断开还是保持连接<br>HOST：主机<br></code></pre></td></tr></tbody></table></figure><h2 id="http响应"><a href="#http响应" class="headerlink" title="http响应"></a>http 响应</h2><ul><li>服务器–响应–客户端</li></ul><p>以百度为例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache-Control: <span class="hljs-keyword">private</span>缓存控制<br>Connection: keep-alive保持连接<br>Content-Encoding: gzip编码<br>Content-Type: text/html;charset=utf-<span class="hljs-number">8</span>响应类型<br></code></pre></td></tr></tbody></table></figure><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式  GBK UTF-<span class="hljs-number">8</span> G2312 ISO8859-<span class="hljs-number">1</span><br>Accept-Language：告诉浏览器它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成时是断开还是保持连接<br>HOST：主机<br>Refrush：告诉客户端多久刷新一次<br>location：让网页重新定位<br></code></pre></td></tr></tbody></table></figure><h3 id="响应状态码（重点）"><a href="#响应状态码（重点）" class="headerlink" title="响应状态码（重点）"></a>响应状态码（重点）</h3><p>200：请求响应成功</p><p>3xx：请求重定向</p><ul><li>重定向：重新到给定的新位置</li></ul><p>4xx：找不到资源</p><ul><li>404</li><li>403</li></ul><p>5xx：服务器代码错误</p><ul><li>500</li><li>502（网关错误）</li></ul><h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><p>当你的浏览器中地址栏并回车的一瞬间到页面能够展示回来，尽力了什么？</p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p><strong>为什么需要学？</strong></p><ol><li>在 JavaWeb 开发中，需要使用大量的 jar 包，我们需要手动导入</li><li>如何能够让一个东西自动帮我们导入和配置 jar 包？</li><li>由此，maven 诞生</li></ol><h2 id="Maven项目架构管理工具"><a href="#Maven项目架构管理工具" class="headerlink" title="Maven项目架构管理工具"></a>Maven 项目架构管理工具</h2><p>目前使用 maven 就是用来方便导入 jar 包</p><p>Maven 的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束就不要去违反。</li></ul><p>Maven 会规定好如何去编写我们的 java 代码，必须要按照这个规范来</p><h2 id="下载安装Maven"><a href="#下载安装Maven" class="headerlink" title="下载安装Maven"></a>下载安装 Maven</h2><p><a href="https://maven.apache.org/">点击进入 Maven 官网下载</a>，下载完成后解压即可</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_Maven%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.png" alt="maven系统变量"></p><h2 id="阿里云镜像"><a href="#阿里云镜像" class="headerlink" title="阿里云镜像"></a>阿里云镜像</h2><ul><li>镜像：mirrors<ul><li> 作用：加速我们的下载</li></ul></li><li>国内建议使用阿里云的镜像</li></ul><p>打开</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.png" alt="maven配置文件路径"></p><p>添加</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9.png" alt="maven配置文件修改"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>　 <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>建立一个本地仓库</p><p>打开</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.png" alt="maven配置文件路径"></p><p>修改</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9.png" alt="maven仓库配置文件修改"></p><p>建立文件夹</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E4%BB%93%E5%BA%93%E5%88%9B%E5%BB%BA.png" alt="maven仓库创建"></p><h1 id="在IDEA中使用Maven"><a href="#在IDEA中使用Maven" class="headerlink" title="在IDEA中使用Maven"></a>在 IDEA 中使用 Maven</h1><ol><li>启动 IDEA</li><li> 创建一个 Maven 项目<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA.png" alt="创建一个Maven项目"></li><li>出现 BUILD SUCCESS 表示成功<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.png" alt="maven项目创建成功"></li><li>只有在 web 应用下才有<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="maven项目结构"></li><li>观察 Maven 仓库</li><li> IDEA 中 Maven 的配置<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_maven%E9%85%8D%E7%BD%AE.png" alt="Maven的配置"></li><li>到这里 Maven 的配置和使用就 ok 了</li></ol><h2 id="创建一个普通的Maven项目"><a href="#创建一个普通的Maven项目" class="headerlink" title="创建一个普通的Maven项目"></a>创建一个普通的 Maven 项目</h2><ol><li>直接点下一步<img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E6%99%AE%E9%80%9Amaven%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA.png" alt="普通maven项目的创建"></li><li>一个干净的 Maven 项目<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E6%99%AE%E9%80%9Amaven%E9%A1%B9%E7%9B%AE.png" alt="干净的Maven项目"></li></ol><h2 id="在IDEA中标记目录功能"><a href="#在IDEA中标记目录功能" class="headerlink" title="在IDEA中标记目录功能"></a>在 IDEA 中标记目录功能</h2><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E6%A0%87%E8%AE%B0%E7%9B%AE%E5%BD%95.png" alt="标记目录"></p><h2 id="在IDEA中配置tomcat"><a href="#在IDEA中配置tomcat" class="headerlink" title="在IDEA中配置tomcat"></a>在 IDEA 中配置 tomcat</h2><ol><li>点击编辑配置<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE.png" alt="编辑配置"></li><li>点击本地 tomcat<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E6%9C%AC%E5%9C%B0Tomcat.png" alt="本地tomcat"></li><li>解决警告问题<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E8%A7%A3%E5%86%B3Tomcat%E8%AD%A6%E5%91%8A.png" alt="解决警告"></li><li>为什么会有这个问题：<br><strong>我们访问一个网站，需要指定一个文件夹的名字</strong></li><li>运行<img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E7%AC%AC%E4%B8%80%E4%B8%AAtomcat%E7%A8%8B%E5%BA%8F.png" alt="第一个Tomcat程序"></li></ol><h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom 文件</h2><p>pom.xml 是 Maven 的核心配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-comment">&lt;!--Maven版本和头文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-comment">&lt;!--这里就是我们自己配置的GAV--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>JavaWeb-01-Maven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-comment">&lt;!--packaging 打包方式 war web应用打包方式--&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>JavaWeb-01-Maven Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project's website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-comment">&lt;!--项目默认构建编码--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-comment">&lt;!--编码版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-comment">&lt;!--项目依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--具体依赖的包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--项目构建用的东西--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>JavaWeb-01-Maven<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><p>Maven 由于它的约定大于配置，之后写的配置文件可能无法导出或者生效，解决方案 ———— 在 build 中配置 resources，来防止资源导出失败的问题</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--静态资源导出问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="IDEA目录树"><a href="#IDEA目录树" class="headerlink" title="IDEA目录树"></a>IDEA 目录树</h2><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E7%9B%AE%E5%BD%95%E6%A0%91.png" alt="IDEA目录树"></p><h2 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven 仓库</h2><p>地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet 简介</h2><ul><li><p>Servlet 就是 Sun 公司开发动态 web 的一门技术</p></li><li><p>Sun 公司在这些 API 中提供了一个接口：Servlet，如果想开发一个 Servlet 程序，只需要完成两个小步骤：</p><ul><li>编写一个类，实现 Servlet 接口</li><li>把开发好的 Java 类部署到 web 服务器中</li></ul><p><strong>把实现了 Servlet 接口的 Java 程序叫做：Servlet</strong></p></li></ul><h2 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h2><ol><li><p>创建一个 Maven 项目，删掉 src 目录，之后的学习在这个项目建立 Model；这个空的工程就是 maven 的主工程</p></li><li><p>关于 Maven 父子工程的理解：<br>父项目中会有</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>Servlet-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>子项目会有</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>JavaWeb-02-Servlet<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zlw<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>父项目中的 Java 项目子项目可以直接使用</p></li><li><p>Maven 环境优化</p><ul><li>修改 web.xml 为最新的</li><li>将 Maven 项目结构搭建完整</li></ul></li><li><p>编写一个 Servlet 程序</p><ul><li>新建 Servlet 类继承 HttpServlet</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.Servlet; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/6/1</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑一样</span><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"HelloServlet"</span>, value = <span class="hljs-string">"/HelloServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-comment">//ServletOutputStream outputStream = response.getOutputStream();</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter(); <span class="hljs-comment">//响应流</span><br>writer.print(<span class="hljs-string">"Hello,Servlet!"</span>);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>编写 Servlet 的映射<br>为什么需要映射：我们写的是 Java 程序，但是要通过浏览器访问，而浏览器需要连接 web 服务器，所以我们需要在 web 服务器中注册我们写的 Servlet，还需要给他一个浏览器能够访问的路径；</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zlw.Servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/zlw<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>配置 Tomcat</p></li><li><p>启动测试</p></li></ol><h2 id="Servlet原理"><a href="#Servlet原理" class="headerlink" title="Servlet原理"></a>Servlet 原理</h2><p>Servlet 是由 Web 服务器调用，Web 服务器在收到浏览器请求后，会：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_Servlet%E5%8E%9F%E7%90%86.png" alt="Servlet原理"></p><h2 id="Mapping问题"><a href="#Mapping问题" class="headerlink" title="Mapping问题"></a>Mapping 问题</h2><ol><li>一个 Servlet 可以指定一个映射路径</li><li>一个 Servlet 可以指定多个映射路径</li><li>一个 Servlet 可以指定通用映射路径</li><li>固有的优先级高，通配符优先级低</li></ol><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>Web 容器在启动的时候，它会为每个 web 程序都创建一个 ServletContext 对象，它代表了当前的 web 应用</p><h3 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h3><p>我们在这个 Servlet 中保存的数据，可以在另外一个 Servlet 中拿到<br>放置数据的类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">package</span> com.zlw;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/6/5</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"HelloServlet"</span>, value = <span class="hljs-string">"/HelloServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><br><br><span class="hljs-comment">//this.getInitParameter();      初始化参数（一般不用）</span><br><span class="hljs-comment">//this.getServletConfig();      Servlet配置（一般在xml里）</span><br><span class="hljs-comment">//this.getServletContext();     Servlet上下文</span><br><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">"张三"</span>;<span class="hljs-comment">//数据</span><br>context.setAttribute(<span class="hljs-string">"username"</span>,username);<span class="hljs-comment">//将一个数据保存在ServletContext</span><br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>获取数据的类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/6/6</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"GetServlet"</span>, value = <span class="hljs-string">"/GetServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) context.getAttribute(<span class="hljs-string">"username"</span>);<br><br>response.setContentType(<span class="hljs-string">"text/html"</span>);<br>response.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.getWriter().print(<span class="hljs-string">"名字："</span> + username);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>测试访问结果</p><h3 id="获取初始化参数"><a href="#获取初始化参数" class="headerlink" title="获取初始化参数"></a>获取初始化参数</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>获取参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/6/6</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"ServletDemo03"</span>, value = <span class="hljs-string">"/ServletDemo03"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> context.getInitParameter(<span class="hljs-string">"url"</span>);<br>        response.getWriter().print(url);<br>    }<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>        doGet(request, response);<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/6/6</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"ServletDemo04"</span>, value = <span class="hljs-string">"/ServletDemo04"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo04</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>        context.getRequestDispatcher(<span class="hljs-string">"/ServletDemo03"</span>).forward(request, response);<br>    }<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>        doGet(request, response);<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h3><p>Properties</p><ul><li><p>在 Java 目录下新建 properties（需要更改 pom.xml）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>在 resources 目录下新建 properties</p></li></ul><p>发现都被打包到了同一个路径下：classes，我们俗称这个路径为：classpath</p><p>思路：需要一个文件流</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/6/6</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"PropertiesServlet"</span>, value = <span class="hljs-string">"/PropertiesServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">"/WEB-INF/classes/db.properties"</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.load(is);<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">"username"</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">"password"</span>);<br><br>response.getWriter().print(username+<span class="hljs-string">":"</span>+password);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br><br>}<br><br></code></pre></td></tr></tbody></table></figure><p>访问测试；</p><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>web 服务器接收到客户端的 http 请求，针对这个请求，分别创建一个代表请求的 HttpServletResquest 对象，代表响应的一个 HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数，找 HttpServletRequest</li><li> 如果要给客户端响应一些信息，找 HttpServletResponse</li></ul><h3 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h3><p>向浏览器发送数据的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletOutputStream <span class="hljs-title function_">getOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br>PrintWriter <span class="hljs-title function_">getWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></tbody></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">long</span> var2)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addDateHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">long</span> var2)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeader</span><span class="hljs-params">(String var1, String var2)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addHeader</span><span class="hljs-params">(String var1, String var2)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">int</span> var2)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addIntHeader</span><span class="hljs-params">(String var1, <span class="hljs-type">int</span> var2)</span>;<br></code></pre></td></tr></tbody></table></figure><p>响应码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">SC_CONTINUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SWITCHING_PROTOCOLS</span> <span class="hljs-operator">=</span> <span class="hljs-number">101</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_CREATED</span> <span class="hljs-operator">=</span> <span class="hljs-number">201</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_ACCEPTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">202</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NON_AUTHORITATIVE_INFORMATION</span> <span class="hljs-operator">=</span> <span class="hljs-number">203</span><br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NO_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">204</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_RESET_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">205</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PARTIAL_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">206</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MULTIPLE_CHOICES</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MOVED_PERMANENTLY</span> <span class="hljs-operator">=</span> <span class="hljs-number">301</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MOVED_TEMPORARILY</span> <span class="hljs-operator">=</span> <span class="hljs-number">302</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">302</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SEE_OTHER</span> <span class="hljs-operator">=</span> <span class="hljs-number">303</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_MODIFIED</span> <span class="hljs-operator">=</span> <span class="hljs-number">304</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_USE_PROXY</span> <span class="hljs-operator">=</span> <span class="hljs-number">305</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_TEMPORARY_REDIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-number">307</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_BAD_REQUEST</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_UNAUTHORIZED</span> <span class="hljs-operator">=</span> <span class="hljs-number">401</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PAYMENT_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">402</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_FORBIDDEN</span> <span class="hljs-operator">=</span> <span class="hljs-number">403</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">404</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_METHOD_NOT_ALLOWED</span> <span class="hljs-operator">=</span> <span class="hljs-number">405</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_ACCEPTABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">406</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PROXY_AUTHENTICATION_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">407</span><br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">408</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_CONFLICT</span> <span class="hljs-operator">=</span> <span class="hljs-number">409</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_GONE</span> <span class="hljs-operator">=</span> <span class="hljs-number">410</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_LENGTH_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">411</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PRECONDITION_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-number">412</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_ENTITY_TOO_LARGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">413</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUEST_URI_TOO_LONG</span> <span class="hljs-operator">=</span> <span class="hljs-number">414</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_UNSUPPORTED_MEDIA_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-number">415</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_REQUESTED_RANGE_NOT_SATISFIABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span><br><span class="hljs-type">int</span> <span class="hljs-variable">SC_EXPECTATION_FAILED</span> <span class="hljs-operator">=</span> <span class="hljs-number">417</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_INTERNAL_SERVER_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_IMPLEMENTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">501</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_BAD_GATEWAY</span> <span class="hljs-operator">=</span> <span class="hljs-number">502</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SERVICE_UNAVAILABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">503</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_GATEWAY_TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">504</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_HTTP_VERSION_NOT_SUPPORTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">505</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><ol><li><p>向浏览器输出消息</p></li><li><p>下载文件</p><ol><li><p>要获取下载文件的路径</p></li><li><p>下载的文件名</p></li><li><p>设置办法让浏览器能够支持（Content-Disposition）下载我们想要的东西，用 URLEncoder.encode 转换编码</p></li><li><p>获取下载文件的输入流</p></li><li><p>创建缓冲区</p></li><li><p>获取 OutputStream 对象</p></li><li><p>将 FileOutputStream 流写入到 buffer 缓冲区</p></li><li><p>使用 OutputStream 将缓冲区中的数据输出到客户端！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/6/6</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"FileServlet"</span>, value = <span class="hljs-string">"/FileServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-comment">//1. 要获取下载文件的路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">"E:\\JavaWeb\\JavaWeb-02-Servlet\\response\\src\\main\\resources\\课程表.png"</span>;<br>System.out.println(<span class="hljs-string">"下载文件的路径："</span> + realPath);<br><span class="hljs-comment">//2. 下载的文件名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="hljs-string">"\\"</span>) + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//3. 设置办法让浏览器能够支持下载我们想要的东西,用URLEncoder.encode转换编码</span><br>response.setHeader(<span class="hljs-string">"Content-Disposition"</span>, <span class="hljs-string">"attachment;filename="</span> + URLEncoder.encode(fileName, <span class="hljs-string">"UTF-8"</span>));<br><span class="hljs-comment">//4. 获取下载文件的输入流</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br><span class="hljs-comment">//5. 创建缓冲区</span><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">//6. 获取OutputStream对象</span><br><span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><span class="hljs-comment">//7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端!</span><br><span class="hljs-keyword">while</span> ((len = in.read(buffer)) &gt; <span class="hljs-number">0</span>) {<br>out.write(buffer, <span class="hljs-number">0</span>, len);<br>}<br>out.close();<br>in.close();<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li></ol></li></ol><h3 id="验证码功能"><a href="#验证码功能" class="headerlink" title="验证码功能"></a>验证码功能</h3><p>验证码怎么来的？</p><ul><li>前端实现</li><li>后端实现，需要使用到 java 的图片类，生产一个图片</li></ul><p>示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/6/30</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"ImageServlet"</span>, value = <span class="hljs-string">"/ImageServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-comment">//让浏览器3秒自动刷新一次</span><br>response.setHeader(<span class="hljs-string">"refresh"</span>, <span class="hljs-string">"3"</span>);<br><span class="hljs-comment">//在内存中创建一个图片</span><br><span class="hljs-type">BufferedImage</span> <span class="hljs-variable">bufferedImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(<span class="hljs-number">80</span>, <span class="hljs-number">20</span>, BufferedImage.TYPE_INT_RGB);<br><span class="hljs-comment">//得到图片</span><br><span class="hljs-type">Graphics2D</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> (Graphics2D) bufferedImage.getGraphics();<br><span class="hljs-comment">//设置背景颜色</span><br>g.setColor(Color.WHITE);<br>g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">20</span>);<br><span class="hljs-comment">//给图片写数据</span><br>g.setColor(Color.BLUE);<br>g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-literal">null</span>, Font.BOLD, <span class="hljs-number">20</span>));<br>g.drawString(makeNum(), <span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br><span class="hljs-comment">//告诉浏览器，这个请求用图片的方式打开</span><br>response.setContentType(<span class="hljs-string">"image/jpeg"</span>);<br><span class="hljs-comment">//网站存在缓存，不然浏览器缓存</span><br>response.setDateHeader(<span class="hljs-string">"Expires"</span>, -<span class="hljs-number">1</span>);<br>response.setHeader(<span class="hljs-string">"Cache-Control"</span>, <span class="hljs-string">"no-cache"</span>);<br>response.setHeader(<span class="hljs-string">"Pragma"</span>, <span class="hljs-string">"no-cache"</span>);<br><span class="hljs-comment">//把图片写给浏览器</span><br>ImageIO.write(bufferedImage, <span class="hljs-string">"jpg"</span>, response.getOutputStream());<br>}<br><br><span class="hljs-comment">//生成随机数</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">makeNum</span> <span class="hljs-params">()</span> {<br><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> String.valueOf(random.nextInt(<span class="hljs-number">9999999</span>));<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><span class="hljs-comment">//保证生成的是7位数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span> - num.length(); i++) {<br>stringBuffer.append(<span class="hljs-string">"0"</span>);<br>}<br>num = stringBuffer.toString() + num;<br><span class="hljs-keyword">return</span> num;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>重定向时一般直接用具体的站点名</p><p>一个 web 资源收到客户端请求后，他会通知客户端去访问另外一个 web 资源，这个过程叫做重定向</p><p>常见场景：</p><ul><li>用户登录</li></ul><p>使用方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendRedirect</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/1</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"RedirectServlet"</span>, value = <span class="hljs-string">"/RedirectServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedirectServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>response.sendRedirect(<span class="hljs-string">"ImageServlet"</span>);<span class="hljs-comment">//重定向</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 相当于</span><br><span class="hljs-comment"> * response.setHeader("Location","ImageServlet");</span><br><span class="hljs-comment"> * response.setStatus(302);</span><br><span class="hljs-comment"> * */</span><br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="面试题：请你聊聊重定向和转发的区别？"><a href="#面试题：请你聊聊重定向和转发的区别？" class="headerlink" title="面试题：请你聊聊重定向和转发的区别？"></a>面试题：请你聊聊重定向和转发的区别？</h3><p>相同点：</p><ul><li>页面都会实现跳转</li></ul><p>不同点：</p><ul><li>请求转发的时候，url 不会发生变化  307</li><li> 请求重定向的时候，url 会发生变化  302</li></ul><p>重定向示例：</p><p>index.jsp 代码:</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;body&gt;<br>&lt;h2&gt;Hello World!&lt;/h2&gt;<br>&lt;%--这里提交的路径，需要寻找到项目的类路径--%&gt;<br>&lt;%--${pageContext.request.contextPath代表当前的项目--%&gt;<br>&lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">"text/html; ISO-8859-1;charset=UTF-8"</span> %&gt;<br>&lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/RequestTest"</span> method=<span class="hljs-string">"get"</span>&gt;<br>用户名：&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"username"</span>&gt;&lt;br&gt;<br>密码：&lt;input type=<span class="hljs-string">"password"</span> name=<span class="hljs-string">"password"</span>&gt;&lt;br&gt;<br>&lt;input type=<span class="hljs-string">"submit"</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><p>成功页面：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Success&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><p>Java 代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/1</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"RequestTest"</span>, value = <span class="hljs-string">"/RequestTest"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-comment">//处理请求</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"username"</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"password"</span>);<br>System.out.println(username + <span class="hljs-string">":"</span> + password);<br><span class="hljs-comment">//重定向时候一定要注意路径问题，否则会404</span><br>response.sendRedirect(<span class="hljs-string">"/response_war/success.jsp"</span>);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><h3 id="获取前端传递的参数"><a href="#获取前端传递的参数" class="headerlink" title="获取前端传递的参数"></a>获取前端传递的参数</h3><p>使用的方法:<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/JavaWeb_%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95.png" alt="一般使用第一到di四个方法"></p><h3 id="请求转发-1"><a href="#请求转发-1" class="headerlink" title="请求转发"></a>请求转发</h3><p>转发时”/“代表的是本应用程序的根目录 </p><p>转发时后面加 .forward (request, response)</p><p>index.jsp 页面:</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">13377</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">3</span><br>  Time: <span class="hljs-number">1</span>:<span class="hljs-number">33</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;登录&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1 style=<span class="hljs-string">"text-align:center;"</span>&gt;登录&lt;/h1&gt;<br>&lt;div style=<span class="hljs-string">"text-align:center;"</span>&gt;<br>&lt;%--这里表单表示的意思是：以post方式提交表单到：/LoginServlet--%&gt;<br>&lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/LoginServlet"</span> method=<span class="hljs-string">"post"</span>&gt;<br>用户名：&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"username"</span>&gt;&lt;br&gt;<br>密码：&lt;input type=<span class="hljs-string">"password"</span> name=<span class="hljs-string">"password"</span>&gt;&lt;br&gt;<br>爱好：<br>&lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobbies"</span> value=<span class="hljs-string">"代码"</span>&gt;代码<br>&lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobbies"</span> value=<span class="hljs-string">"唱歌"</span>&gt;唱歌<br>&lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobbies"</span> value=<span class="hljs-string">"画画"</span>&gt;画画<br>&lt;input type=<span class="hljs-string">"checkbox"</span> name=<span class="hljs-string">"hobbies"</span> value=<span class="hljs-string">"电影"</span>&gt;电影<br>&lt;input type=<span class="hljs-string">"submit"</span>&gt;<br>&lt;/form&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><p>提交成功页面：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">13377</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">3</span><br>  Time: <span class="hljs-number">1</span>:<span class="hljs-number">42</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;登陆成功&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;登陆成功！&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><p>Java 代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/3</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"LoginServlet"</span>, value = <span class="hljs-string">"/LoginServlet"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"username"</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">"password"</span>);<br>String[] hobbies = request.getParameterValues(<span class="hljs-string">"hobbies"</span>);<br><br>System.out.println(<span class="hljs-string">"========================"</span>);<br>System.out.println(username);<br>System.out.println(password);<br>System.out.println(Arrays.toString(hobbies));<br>System.out.println(<span class="hljs-string">"========================"</span>);<br><br><span class="hljs-comment">//请求转发</span><br>request.getRequestDispatcher(<span class="hljs-string">"success.jsp"</span>).forward(request, response);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="转发和重定向的路径问题"><a href="#转发和重定向的路径问题" class="headerlink" title="转发和重定向的路径问题"></a>转发和重定向的路径问题</h2><p>重定向：response.sendRedirect () 可以使用相对路径和绝对路径</p><p>当浏览器想服务器发起了一个 http 请求时，如：http:localhost:8080/myapp/user/Test1</p><p>相对路径：response.sendRedirect (“Login”)   容器相对于原来请求 URL 的目录加参数来生成完整的 URL—http:localhost:8080/myapp/user/Login</p><p>绝对路径 ：response.sendRedirect (“/Login”)   容器相对于 Web 应用本身加参数建立完整的 URL—http:localhost:8080/Login</p><p>转发：request.getRequestDispatcher () 也可以使用相对路径和绝对路径</p><p>相对路径：request.getRequestDispatcher (“Login”)   容器相对于原来请求 URL 的目录加参数来生成完整的 URL—http:localhost:8080/myapp/user/Login</p><p>绝对路径 ：request.getRequestDispatcher (“/Login”)   容器相对于当前的 Web 应用本身加参数建立完整的 URL—http:localhost:8080/myapp/Login</p><h1 id="Cookie、Session"><a href="#Cookie、Session" class="headerlink" title="Cookie、Session"></a>Cookie、Session</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个 web 资源，关闭浏览器，这个过程可以称之为会话</p><p><strong>有状态会话</strong>：简单描述为：一个同学来过教师，下次再来教室，我们就会知道这个同学曾经来过，称之为有状态会话<br><strong>你怎么证明你是学校的学生？</strong></p><p>你                  学校</p><ol><li>学校给你发票</li><li>学校登记（学校标记你来过了）</li></ol><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端          服务端</p><ol><li>服务端给客户端一个 “信件”，客户端下次访问服务端带上就可以了（cookie）</li><li>服务器登记你来过，下次你来的时候来匹配你（session）</li></ol><h2 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h2><p><strong>cookie</strong></p><ul><li>客户端技术（客户端通过响应得到 cookie，通过请求和服务器匹配）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息我们可以把信息或者数据放在 session 中</li></ul><p>常见场景：网站登录之后，第二次不用重新登陆，直接就可以登录进去</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ol><li>从请求中拿到 cookie 信息</li><li>服务器响应给客户端 cookie</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = request.getCookies();<span class="hljs-comment">//获得cookie</span><br>cookie.getName();<span class="hljs-comment">//获得cookie中的key</span><br>cookie.getValue();<span class="hljs-comment">//获得cookie的vlaue</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">"LastLoginTime"</span>, System.currentTimeMillis() + <span class="hljs-string">""</span>);<span class="hljs-comment">//新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>);<span class="hljs-comment">//设置cookie有效期</span><br>response.addCookie(cookie);<span class="hljs-comment">//响应一个cookie给客户端</span><br></code></pre></td></tr></tbody></table></figure><h3 id="cookie示例"><a href="#cookie示例" class="headerlink" title="cookie示例"></a>cookie 示例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/3</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//保存用户上一次访问的时间</span><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"CookieServletDemo01"</span>, value = <span class="hljs-string">"/CookieServletDemo01"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieServletDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-comment">//服务器告诉你你来的时间，把这个时间封装成一个“信件”，下次访问时带来</span><br><br><span class="hljs-comment">//解决中文乱码</span><br>request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.setContentType(<span class="hljs-string">"text/html; charset=UTF-8"</span>);<br><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br><br><span class="hljs-comment">//Cookie,服务器从客户端获取</span><br>Cookie[] cookies = request.getCookies();<span class="hljs-comment">//这里返回数组说明Cookie可能存在多个</span><br><br><span class="hljs-comment">//判断cookie是否存在</span><br><span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) {<br><span class="hljs-comment">//如果存在</span><br>out.write(<span class="hljs-string">"你上一次访问的时间是："</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cookies.length; i++) {<br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> cookies[i];<br><span class="hljs-comment">//获取cookie的名字</span><br><span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">"LastLoginTime"</span>)) {<br><span class="hljs-comment">//获取cookie中的值</span><br><span class="hljs-type">long</span> <span class="hljs-variable">LastLoginTime</span> <span class="hljs-operator">=</span> Long.parseLong(cookie.getValue());<br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(LastLoginTime);<br>out.write(String.valueOf(date));<br>}<br>}<br><br>} <span class="hljs-keyword">else</span> {<br>out.write(<span class="hljs-string">"这是你第一次访问"</span>);<br>}<br><br><span class="hljs-comment">//获得一个cookie</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">"LastLoginTime"</span>, System.currentTimeMillis() + <span class="hljs-string">""</span>);<br><span class="hljs-comment">//设置cookie有效期为一天</span><br>cookie.setMaxAge(<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>);<br><span class="hljs-comment">//服务器给客户端响应一个cookie</span><br>response.addCookie(cookie);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>cookie：一般会保存在本地的用户目录下的 appdata 中</p><p>一个网站的 cookie 是否存在上限？</p><ul><li>一个 cookie 只能保存一个信息</li><li>一个 web 站点可以给浏览器发送多个 cookie，最多存放 20 个 cookie</li><li>cookie 的大小有限制，一般为 4kb</li><li> 浏览器的 cookie 上限一般为 300 个</li></ul><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除 cookie</h3><ul><li>不设置有效期，关闭浏览器，自动失效</li><li>设置有效期时间为 0</li></ul><h3 id="解决cookie乱码：编码解码"><a href="#解决cookie乱码：编码解码" class="headerlink" title="解决cookie乱码：编码解码"></a>解决 cookie 乱码：编码解码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">URLEncoder.encode(<span class="hljs-string">"张三"</span>, <span class="hljs-string">"utf-8"</span>);<br>URLDecoder.decode(cookie.getValue(), <span class="hljs-string">"utf-8"</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="session（重点）"><a href="#session（重点）" class="headerlink" title="session（重点）"></a>session（重点）</h2><p>什么是 session：</p><ul><li>服务器会给每个用户（浏览器）创建一个 session 对象</li><li>一个 session 独占一个浏览器，只要浏览器没有关闭，这个 session 就存在</li><li>用户登陆之后，整个网站的不同站点都可访问（保存用户信息 / 保存购物车）</li></ul><h3 id="创建session示例"><a href="#创建session示例" class="headerlink" title="创建session示例"></a>创建 session 示例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.Servlet; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/4</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.zlw.pojo.Person;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"SessionServletDemo01"</span>, value = <span class="hljs-string">"/SessionServletDemo01"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionServletDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-comment">//解决乱码问题</span><br>request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);<br><span class="hljs-comment">//得到session</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-comment">//给session存东西</span><br>session.setAttribute(<span class="hljs-string">"name"</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">"张三"</span>,<span class="hljs-number">18</span>));<br><span class="hljs-comment">//获取session的id</span><br><span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> session.getId();<br><span class="hljs-comment">//判断session是不是新创建的</span><br><span class="hljs-keyword">if</span> (session.isNew()){<br>response.getWriter().write(<span class="hljs-string">"session创建成功，id "</span>+id);<br>}<span class="hljs-keyword">else</span>{<br>response.getWriter().write(<span class="hljs-string">"服务器已经存在session，id "</span>+id);<br>}<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="得到session的里的元素"><a href="#得到session的里的元素" class="headerlink" title="得到session的里的元素"></a>得到 session 的里的元素</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.Servlet; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/4</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> com.zlw.pojo.Person;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"SessionServletDemo02"</span>, value = <span class="hljs-string">"/SessionServletDemo02"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionServletDemo02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-comment">//解决乱码问题</span><br>request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);<br><span class="hljs-comment">//得到session</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) session.getAttribute(<span class="hljs-string">"name"</span>);<br>System.out.println(person.toString());<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="手动注销session"><a href="#手动注销session" class="headerlink" title="手动注销session"></a>手动注销 session</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.Servlet; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/4</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet</span> (name = <span class="hljs-string">"SessionServletDemo03"</span>, value = <span class="hljs-string">"/SessionServletDemo03"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionServletDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        session.removeAttribute(<span class="hljs-string">"name"</span>);<br>        <span class="hljs-comment">//手动注销session</span><br>        session.invalidate();<br>    }<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span> <span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>        doGet(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="设置自动注销session"><a href="#设置自动注销session" class="headerlink" title="设置自动注销session"></a>设置自动注销 session</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置session自动失效时间：15分钟--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="session与cookie的区别"><a href="#session与cookie的区别" class="headerlink" title="session与cookie的区别"></a>session 与 cookie 的区别</h2><ul><li>cookie 是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li><li>session 把用户的数据写到用户独占的 session，服务器端保存（保存重要的信息，减少服务器资源的浪费）</li><li>session 对象由服务器创建</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>保存一个登录用户的信息</li><li>购物车信息</li><li>在整个网站中经常会使用到的数据，我们把它保存到 session 中</li></ul><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是 JSP</h2><p>Java Server Pages：Java 服务端页面，也和 servlet 一样用于动态 web 技术<br>最大的特点：</p><ul><li>写 JSP 就像写 HTML</li><li> 区别：<ul><li>HTML 值给用户提供静态数据</li><li> JSP 页面中可以嵌入 Java 代码，为用户提供动态数据</li></ul></li></ul><h2 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP 原理</h2><p>思路：JSP 到底是怎么执行的</p><ul><li>代码层面与 HTML 没有任何区别</li><li>服务器内部工作<ul><li> tomcat 中会有一个 work 目录</li><li> IDEA 中使用的 tomcat 会在 IDEA 的 tomcat 中产生一个 work 目录，把页面转换成了 java 程序，所以<strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问 Servlet</strong></li></ul></li></ul><p>JSP 最终会被转换成一个 java 类<br><strong>JSP 本质就是一个 Servlet</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspInit</span><span class="hljs-params">()</span> {<br>}<br><span class="hljs-comment">//销毁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspDestroy</span><span class="hljs-params">()</span> {<br>}<br><span class="hljs-comment">//JSPService</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspService</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response)</span> <br><br></code></pre></td></tr></tbody></table></figure><ol><li><p>判断请求</p></li><li><p>内置了一些对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;<span class="hljs-comment">//页面上下文</span><br>   javax.servlet.http.<span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//session</span><br>   <span class="hljs-keyword">final</span> javax.servlet.ServletContext application;<span class="hljs-comment">//applicationContext</span><br>   <span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;<span class="hljs-comment">//config</span><br>   javax.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//out</span><br>   <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">Object</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<span class="hljs-comment">//page:当前页</span><br>   HttpServletRequest request<span class="hljs-comment">//请求</span><br>   HttpServletResponse response<span class="hljs-comment">//响应</span><br><br><span class="hljs-number">3.</span> 输出页面前增加的代码<br><br>   ```java<br>   response.setContentType(<span class="hljs-string">"text/html"</span>);<span class="hljs-comment">//设置响应的页面类型</span><br>   pageContext = _jspxFactory.getPageContext(<span class="hljs-built_in">this</span>, request, response,<span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-literal">true</span>);<br>   _jspx_page_context = pageContext;<br>   application = pageContext.getServletContext();<br>   config = pageContext.getServletConfig();<br>   session = pageContext.getSession();<br>   out = pageContext.getOut();<br>   _jspx_out = out;<br></code></pre></td></tr></tbody></table></figure></li><li><p>以上的这些对象我们可以在 JSP 中直接使用</p></li></ol><p>在 JSP 页面中，java 代码会原封不动的输出</p><h2 id="JSP的基础语法"><a href="#JSP的基础语法" class="headerlink" title="JSP的基础语法"></a>JSP 的基础语法</h2><p>任何语言都有自己的语法，JSP 作为 Java 技术的一种应用，它拥有一些自己扩充的语法，Java 所有语法 JSP 都支持</p><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP 表达式</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--JSP表达式<br>作用：用来将程序的输出，输出到客户端<br>公式：&lt;%= 变量或表达式%&gt;<br>--%&gt;<br>&lt;%= <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date()%&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="JSP脚本片段"><a href="#JSP脚本片段" class="headerlink" title="JSP脚本片段"></a>JSP 脚本片段</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>    公式：&lt;%脚本片段%&gt;<br>--%&gt;<br>&lt;%<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>sum += i;<br>}<br>out.println(<span class="hljs-string">"&lt;h1&gt;sum="</span> + sum + <span class="hljs-string">"&lt;/h1&gt;"</span>);<br>%&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="JSP脚本的再实现"><a href="#JSP脚本的再实现" class="headerlink" title="JSP脚本的再实现"></a>JSP 脚本的再实现</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>    公式：&lt;%脚本片段%&gt;<br>--%&gt;<br>&lt;%<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>out.write(x);<br>%&gt;<br>&lt;p&gt;这是一个JSP文档&lt;/p&gt;<br>&lt;%<br>out.write(x);<br>%&gt;<br>&lt;hr&gt;<br>&lt;%--在代码里嵌入HTML代码--%&gt;<br>&lt;%<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {<br>%&gt;<br>&lt;h1&gt;Hello World&lt;%=i%&gt;&lt;/h1&gt;<br>&lt;%<br>}<br>%&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP 声明</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>公式：&lt;%！定义常量、静态代码块、全局方法%&gt;<br>--%&gt;<br>&lt;%!<br><span class="hljs-keyword">static</span> {<br>System.out.println(<span class="hljs-string">"正在加载Servlet"</span>);<br>}<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">globalVar</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span> <span class="hljs-params">()</span> {<br>System.out.println(globalVar);<br>}<br>%&gt;<br></code></pre></td></tr></tbody></table></figure><p>JSP 声明：会被编译到 JSP 生成 Java 的类中，其他的会被生成到 jspService () 中</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在 JSP 中嵌入 java 代码即可</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%%&gt;脚本片段<br>&lt;%！%&gt;声明<br>&lt;%=%&gt;表达式<br>&lt;%----%&gt;注释<br></code></pre></td></tr></tbody></table></figure><p>JSP 的注释不会在客户端显示，而 HTML 的注释可以。</p><h2 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP 指令</h2><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page ...%&gt;   设置错误页面、编码信息。。。。。。<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%<span class="hljs-meta">@page</span> errorPage=<span class="hljs-string">"/error/500error.jsp"</span> %&gt;<br>------------------------------------------------------------<br>&lt;%@ include file=<span class="hljs-string">""</span>%&gt;    设置公共页，本质是一个页面<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"common/header.jsp"</span> %&gt;<br>&lt;h1&gt;网页主题&lt;/h1&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">"common/footer.jsp"</span> %&gt;<br>------------------------------------------------------------<br>&lt;%--JSP标签--%&gt;        使用拼接的时候，本质是三个页面<br>&lt;jsp:include page=<span class="hljs-string">"common/header.jsp"</span>/&gt;<br>&lt;h1&gt;网页主题&lt;/h1&gt;<br>&lt;jsp:include page=<span class="hljs-string">"common/footer.jsp"</span>/&gt;<br></code></pre></td></tr></tbody></table></figure><p>所用到的页面：</p><p>header.jsp</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">13377</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">5</span><br>  Time: <span class="hljs-number">3</span>:<span class="hljs-number">40</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;h1&gt;我是头部&lt;/h1&gt;<br></code></pre></td></tr></tbody></table></figure><p>fooder.jsp</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">13377</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">5</span><br>  Time: <span class="hljs-number">3</span>:<span class="hljs-number">42</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;h1&gt;我是底部&lt;/h1&gt;<br></code></pre></td></tr></tbody></table></figure><p>404error.jsp</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">13377</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">5</span><br>  Time: <span class="hljs-number">3</span>:<span class="hljs-number">12</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;img src=<span class="hljs-string">"../img/favicon.png"</span> alt=<span class="hljs-string">"404"</span>&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><p>500error.jsp</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">13377</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">5</span><br>  Time: <span class="hljs-number">3</span>:<span class="hljs-number">31</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;<span class="hljs-number">500</span>错误&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;img src=<span class="hljs-string">"../img/1.jpg"</span> alt=<span class="hljs-string">"500"</span>&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><h2 id="9大内置对象"><a href="#9大内置对象" class="headerlink" title="9大内置对象"></a>9 大内置对象</h2><ul><li>PageContext 存东西</li><li> Requset 存东西</li><li> Response</li><li>Session 存东西</li><li> Application (ServletContext) 存东西</li><li> config(ServletConfig)</li><li>out</li><li>page 几乎不用</li><li> exception</li></ul><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>pageContext.setAttribute(<span class="hljs-string">"name1"</span>, <span class="hljs-string">"张三"</span>);<span class="hljs-comment">//保存的数据只在一个页面中有效</span><br>request.setAttribute(<span class="hljs-string">"name2"</span>, <span class="hljs-string">"李四"</span>);<span class="hljs-comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>session.setAttribute(<span class="hljs-string">"name3"</span>, <span class="hljs-string">"王五"</span>);<span class="hljs-comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>application.setAttribute(<span class="hljs-string">"name4"</span>, <span class="hljs-string">"赵六"</span>);<span class="hljs-comment">//保存的数据在服务器中有效，从打开服务器到关闭服务器</span><br>%&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>request：客户端向服务器发送请求产生了数据，用户看完就没用了，例如：新闻</p><p>session：客户端向服务器发送请求产生了数据，用户看完之后还有用，例如：购物车</p><p>application：客户端向服务器发送请求产生了数据，一个用户用完了，其他用户还可能使用，例如：聊天记录</p><h2 id="JSP标签、JSTL标签、EL表达式"><a href="#JSP标签、JSTL标签、EL表达式" class="headerlink" title="JSP标签、JSTL标签、EL表达式"></a>JSP 标签、JSTL 标签、EL 表达式</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JSTL表达式依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--standard标签库依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL 表达式</h3><p>EL 表达式的作用：${}</p><ul><li>获取数据</li><li>执行运算</li><li>获取 web 开发的常用对象</li><li>调用 Java 方法（一般不用）</li></ul><h3 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP 标签</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--镶嵌页面--%&gt;<br>&lt;jsp:include page=<span class="hljs-string">""</span>/&gt;<br><br>&lt;%--转发页面--%&gt;<br>&lt;%-- 相当于http:<span class="hljs-comment">//localhost:8080/JavaWeb_JSP_war_exploded/jsptag.jsp?name=zhangsan&amp;age=18 --%&gt;</span><br>&lt;jsp:forward page=<span class="hljs-string">"jsptag2.jsp"</span>&gt;<br>    &lt;%--携带参数--%&gt;<br>&lt;jsp:param name=<span class="hljs-string">"name"</span> value=<span class="hljs-string">"zhangsan"</span>/&gt;<br>&lt;jsp:param name=<span class="hljs-string">"age"</span> value=<span class="hljs-string">"18"</span>/&gt;<br>&lt;/jsp:forward&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="JSTL表达式"><a href="#JSTL表达式" class="headerlink" title="JSTL表达式"></a>JSTL 表达式</h3><p>JSTL 标签库的使用就是为了弥补 HTML 标签的不足：它自定义了许多标签，可以供我们使用，标签的功能和 Java 代码一样</p><p><a href="https://www.runoob.com/jsp/jsp-jstl.html">参考文档</a></p><h4 id="核心标签（掌握部分）"><a href="#核心标签（掌握部分）" class="headerlink" title="核心标签（掌握部分）"></a>核心标签（掌握部分）</h4><p>引入 JSTL 核心标签库，我们才能使用 JSTL 标签</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/javaweb_JSTL%E6%A0%B8%E5%BF%83%E6%A0%87%E7%AD%BE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE.png" alt="常用标签"></p><p><strong>JSTL 标签库使用步骤</strong></p><ul><li>引入对应的 taglib</li><li> 使用其中的方法</li></ul><p>if 判断：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">7</span><br>  Time: <span class="hljs-number">1</span>:<span class="hljs-number">04</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h4&gt;<span class="hljs-keyword">if</span>测试&lt;/h4&gt;<br>&lt;form action=<span class="hljs-string">"coreif.jsp"</span> method=<span class="hljs-string">"get"</span>&gt;<br>&lt;%--<br>EL表达式获取表单数据<br>${param.参数名}<br>--%&gt;<br>&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"username"</span> value=<span class="hljs-string">"${param.username}"</span>&gt;<br>&lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"登录"</span>&gt;<br>&lt;/form&gt;<br>&lt;%--判断是不是管理员登录--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">"${'admin'.equals(param.username)}"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"isAdmin"</span>&gt;<br>&lt;c:out value=<span class="hljs-string">"管理员，欢迎您！"</span>/&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:out value=<span class="hljs-string">"${isAdmin}"</span>/&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><p>when 判断：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">7</span><br>  Time: <span class="hljs-number">1</span>:<span class="hljs-number">33</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--定义一个变量score，值为<span class="hljs-number">85</span>--%&gt;<br>&lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">"score"</span> value=<span class="hljs-string">"85"</span>/&gt;<br>&lt;c:choose&gt;<br>&lt;c:when test=<span class="hljs-string">"${score&gt;=90}"</span>&gt;<br>你的成绩为优秀<br>&lt;/c:when&gt;<br>&lt;c:when test=<span class="hljs-string">"${score&gt;=80}"</span>&gt;<br>你的成绩为良好<br>&lt;/c:when&gt;<br>&lt;c:when test=<span class="hljs-string">"${score&gt;=70}"</span>&gt;<br>你的成绩为一般<br>&lt;/c:when&gt;<br>&lt;c:when test=<span class="hljs-string">"${score&gt;=60}"</span>&gt;<br>你的成绩为及格<br>&lt;/c:when&gt;<br>&lt;c:when test=<span class="hljs-string">"${score&gt;=0}"</span>&gt;<br>你的成绩为不及格<br>&lt;/c:when&gt;<br>&lt;/c:choose&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><p>foreach 判断：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">7</span><br>  Time: <span class="hljs-number">2</span>:<span class="hljs-number">01</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"java.util.ArrayList"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>ArrayList&lt;String&gt; People = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>People.add(<span class="hljs-number">0</span>, <span class="hljs-string">"张三"</span>);<br>People.add(<span class="hljs-number">1</span>, <span class="hljs-string">"李四"</span>);<br>People.add(<span class="hljs-number">2</span>, <span class="hljs-string">"王五"</span>);<br>People.add(<span class="hljs-number">3</span>, <span class="hljs-string">"赵六"</span>);<br>People.add(<span class="hljs-number">4</span>, <span class="hljs-string">"田七"</span>);<br>request.setAttribute(<span class="hljs-string">"list"</span>, People);<br>%&gt;<br>&lt;%--<br><span class="hljs-keyword">var</span> 每一次遍历出来的变量<br>items 要遍历的对象<br>begin 开始下标<br>end 结束下标<br>step 步长<br>--%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">"people"</span> items=<span class="hljs-string">"${list}"</span> begin=<span class="hljs-string">"1"</span> end=<span class="hljs-string">"3"</span> step=<span class="hljs-string">"2"</span>&gt;<br>&lt;c:out value=<span class="hljs-string">"${people}"</span>/&gt;<br>&lt;/c:forEach&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><p>结果为：</p><p><strong>李四 赵六</strong></p><h4 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">"fmt"</span>         uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="SQL标签"><a href="#SQL标签" class="headerlink" title="SQL标签"></a>SQL 标签</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">"sql"</span>            uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/sql"</span> %&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="XML标签"><a href="#XML标签" class="headerlink" title="XML标签"></a>XML 标签</h4><p>在使用 xml 标签前，你必须将 XML 和 XPath 的相关包拷贝至你的 &lt;Tomcat 安装目录&gt;\lib 下:</p><ul><li><p>XercesImpl.jar</p><p><a href="http://www.apache.org/dist/xerces/j/">下载地址</a></p></li><li><p> xalan.jar</p><p><a href="http://xml.apache.org/xalan-j/index.html">下载地址</a></p></li></ul><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">"x"</span>           uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/xml"</span> %&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>实体类</p><p>JavaBean 有特定的写法：</p><ul><li>必须有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的 get/set 方法</li></ul><p>一般用来和数据库字段做映射（ORM）</p><p>ORM：对象关系映射</p><ul><li><p>表 —&gt; 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> {<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>字段 —&gt; 属性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> {<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">private</span> String address;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>行记录 —&gt; 对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">1</span>,<span class="hljs-string">"张三"</span>,<span class="hljs-number">18</span>,<span class="hljs-string">"广东"</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">2</span>,<span class="hljs-string">"李四"</span>,<span class="hljs-number">19</span>,<span class="hljs-string">"上海"</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">3</span>,<span class="hljs-string">"王五"</span>,<span class="hljs-number">20</span>,<span class="hljs-string">"广西"</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td> 张三</td><td> 18</td><td> 广东</td></tr><tr><td> 2</td><td> 李四</td><td> 19</td><td> 上海</td></tr><tr><td> 3</td><td> 王五</td><td> 20</td><td> 广西</td></tr></tbody></table><p>MySQL 数据库建表：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE Jdbc <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> Utf8 <span class="hljs-keyword">COLLATE</span> Utf8_General_Ci;<br>USE Jdbc;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> People<br>(<br>    Id      <span class="hljs-type">INT</span>(<span class="hljs-number">3</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    Name    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    Age     <span class="hljs-type">INT</span>(<span class="hljs-number">3</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    Address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE <span class="hljs-operator">=</span> innodb,<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> Utf8,<br>  <span class="hljs-keyword">COLLATE</span> Utf8_General_Ci;<br><br></code></pre></td></tr></tbody></table></figure><p>实体类代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/7</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//实体类一般和数据库表中的结构一一对应！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> {<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">private</span> String address;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span> <span class="hljs-params">()</span> {<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span> <span class="hljs-params">(<span class="hljs-type">int</span> id, String name, <span class="hljs-type">int</span> age, String address)</span> {<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br><span class="hljs-built_in">this</span>.address = address;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">return</span> id;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span> {<br><span class="hljs-built_in">this</span>.id = id;<br>}<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">return</span> name;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span> {<br><span class="hljs-built_in">this</span>.name = name;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">return</span> age;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span> <span class="hljs-params">(<span class="hljs-type">int</span> age)</span> {<br><span class="hljs-built_in">this</span>.age = age;<br>}<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">return</span> address;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span> <span class="hljs-params">(String address)</span> {<br><span class="hljs-built_in">this</span>.address = address;<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>JavaBean–jsp 示例代码：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">"com.zlw.pojo.People"</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: AWEI<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">7</span>/<span class="hljs-number">7</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">52</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--<br><span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br>people.setId(<span class="hljs-number">1</span>);<br>people.setName(<span class="hljs-string">"张三"</span>);<br>people.setAge(<span class="hljs-number">18</span>);<br>people.setAddress(<span class="hljs-string">"广东"</span>);<br><br>people.getId();<br>people.getName();<br>people.getAge();<br>people.getAddress();<br>--%&gt;<br>&lt;jsp:useBean id=<span class="hljs-string">"people"</span> class=<span class="hljs-string">"com.zlw.pojo.People"</span> scope=<span class="hljs-string">"page"</span>/&gt;<br>&lt;jsp:setProperty name=<span class="hljs-string">"people"</span> property=<span class="hljs-string">"id"</span> value=<span class="hljs-string">"1"</span>/&gt;<br>&lt;jsp:setProperty name=<span class="hljs-string">"people"</span> property=<span class="hljs-string">"name"</span> value=<span class="hljs-string">"张三"</span>/&gt;<br>&lt;jsp:setProperty name=<span class="hljs-string">"people"</span> property=<span class="hljs-string">"age"</span> value=<span class="hljs-string">"18"</span>/&gt;<br>&lt;jsp:setProperty name=<span class="hljs-string">"people"</span> property=<span class="hljs-string">"address"</span> value=<span class="hljs-string">"广东"</span>/&gt;<br><br>id：<br>&lt;jsp:getProperty name=<span class="hljs-string">"people"</span> property=<span class="hljs-string">"id"</span>/&gt;<br>&lt;br&gt;<br>姓名：<br>&lt;jsp:getProperty name=<span class="hljs-string">"people"</span> property=<span class="hljs-string">"name"</span>/&gt;<br>&lt;br&gt;<br>年龄：<br>&lt;jsp:getProperty name=<span class="hljs-string">"people"</span> property=<span class="hljs-string">"age"</span>/&gt;<br>&lt;br&gt;<br>地址：<br>&lt;jsp:getProperty name=<span class="hljs-string">"people"</span> property=<span class="hljs-string">"address"</span>/&gt;<br>&lt;br&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></tbody></table></figure><h1 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC 三层架构</h1><p>什么是 MVC：model view controller 模型视图控制器</p><p>早些年的架构：<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/javaweb_%E6%97%A9%E4%BA%9B%E5%B9%B4%E7%9A%84%E6%9E%B6%E6%9E%84.png" alt="早些年的架构"></p><p>用户直接访问控制层，控制层就可以直接操作数据库</p><p>弊端：</p><ul><li>程序十分拥堵，不利于维护</li><li> Servlet 代码中不仅有处理请求，响应，视图跳转，还包含处理 JDBC，业务代码，逻辑代码</li></ul><p>MVC 架构:<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/javaweb_MVC%E6%9E%B6%E6%9E%84.png" alt="MVC三层架构"></p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><ul><li>业务处理：业务逻辑（Service）</li><li>数据持久层：CRUD 增删改查（Dao）</li></ul><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><ul><li>展示数据</li><li>提供连接发起 Servlet 请求（提供 a /form/img…）</li></ul><h2 id="Controller-Servlet"><a href="#Controller-Servlet" class="headerlink" title="Controller(Servlet)"></a>Controller(Servlet)</h2><ul><li>接受用户的请求：通过 request 拿到请求参数、session 信息…</li><li> 交给业务层处理对应的代码</li><li>控制视图跳转：例如登录–&gt; 接受用户的请求（获取用户参数，例如：用户名和密码）–&gt; 交给业务处理层处理业务（判断用户名密码是否正确，解决事务的回滚之类操作）–&gt;Dao 层查询数据库里用户名和密码是否正确–&gt; 成功则跳转成功页面，反之亦然</li></ul><h1 id="Filter-重点"><a href="#Filter-重点" class="headerlink" title="Filter(重点)"></a>Filter (重点)</h1><p>Filter：过滤器，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登陆验证</li><li>。。。</li></ul><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/javaweb_%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="过滤器示意图"></p><h2 id="Filter开发步骤"><a href="#Filter开发步骤" class="headerlink" title="Filter开发步骤"></a>Filter 开发步骤</h2><ol><li>导包</li><li>编写过滤器<ul><li>导包不能错（javax.servlet.*）</li><li>实现 filder 方法</li></ul></li><li>使用注解或者在 xml 中配置 filter</li><li><strong> 注意，使用注解的过滤器的过滤路径相当于转发的绝对路径</strong></li></ol><p>过滤器示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.filter; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/8</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter</span> (filterName = <span class="hljs-string">"CharacterEncodingFilter"</span>, urlPatterns = <span class="hljs-string">"/*"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> {<br><span class="hljs-comment">//初始化：web服务器启动就进行初始化，随时等待过滤对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span> <span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException {<br>System.out.println(<span class="hljs-string">"CharacterEncodingFilter初始化"</span>);<br>}<br><br><span class="hljs-comment">//销毁：web服务器关闭的时候销毁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span> <span class="hljs-params">()</span> {<br>System.out.println(<span class="hljs-string">"CharacterEncodingFilter已销毁"</span>);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 1.过滤器中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="hljs-comment"> * 2.必须要让过滤器继续通行</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span> <span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br>request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);<br>response.setContentType(<span class="hljs-string">"text/html;charset=UTF-8"</span>);<br>System.out.println(<span class="hljs-string">"CharacterEncodingFilter执行前。。。"</span>);<br>chain.doFilter(request, response);<span class="hljs-comment">//让我们的请求继续走，如果不写，我们的程序就拦截停止了</span><br>System.out.println(<span class="hljs-string">"CharacterEncodingFilter执行后"</span>);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><p>实现一个监听器接口；（有 N 种）</p><ol><li><p>编写一个监听器，实现监听器接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebListener;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-comment">//统计网站在线人数：统计session</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionListener</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">//创建session监听</span><br><span class="hljs-comment">//一旦创建session，就会触发一次这个事件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span> <span class="hljs-params">(HttpSessionEvent se)</span> {<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) ctx.getAttribute(<span class="hljs-string">"OnlineCount"</span>);<br><span class="hljs-keyword">if</span> (onlineCount == <span class="hljs-literal">null</span>) {<br>onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(count + <span class="hljs-number">1</span>);<br>}<br>ctx.setAttribute(<span class="hljs-string">"OnlineCount"</span>,onlineCount);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">//销毁session监听</span><br><span class="hljs-comment">//一旦销毁session，就会触发一次这个事件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span> <span class="hljs-params">(HttpSessionEvent se)</span> {<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) ctx.getAttribute(<span class="hljs-string">"OnlineCount"</span>);<br><span class="hljs-keyword">if</span> (onlineCount == <span class="hljs-literal">null</span>) {<br>onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">0</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(count - <span class="hljs-number">1</span>);<br>}<br>ctx.setAttribute(<span class="hljs-string">"OnlineCount"</span>,onlineCount);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>使用注解 @WebListener 或者在 web.xml 中注册监听器</p></li><li><p>看情况是否使用</p></li></ol><h1 id="过滤器、监听器常见应用"><a href="#过滤器、监听器常见应用" class="headerlink" title="过滤器、监听器常见应用"></a>过滤器、监听器常见应用</h1><p>监听器：GUI 编程中经常使用</p><p>过滤器实现用户登录之后才能进入主页，注销之后无法进入主页</p><ol><li>用户登录后，向 session 中放入用户数据</li><li>进入主页的时候判断用户是否登录 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zlw.filter; <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/7/9</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter</span> (filterName = <span class="hljs-string">"SysFilter"</span>, urlPatterns = <span class="hljs-string">"/sys/*"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span> <span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException {<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span> <span class="hljs-params">()</span> {<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span> <span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request1</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;<br><span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response1</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;<br>System.out.println(<span class="hljs-number">111</span>);<br><span class="hljs-keyword">if</span> (request1.getSession().getAttribute(<span class="hljs-string">"USER_SESSION"</span>) == <span class="hljs-literal">null</span>) {<br>response1.sendRedirect(<span class="hljs-string">"/error/error.jsp"</span>);<br>}<br>chain.doFilter(request, response);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
      <tag>JSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery 学习笔记</title>
    <link href="/posts/22111/"/>
    <url>/posts/22111/</url>
    
    <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p> JQuery 库，里面存在大量的 JavaScript 函数</p><blockquote><p>初识 jQuery</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>初识jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../lib/jquery-3.5.1.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">            公式： $(selector).action()</span><br><span class="hljs-comment">        --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test-jquery"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">"#test-jquery"</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">"hello,jQuery!"</span>);</span><br><span class="language-javascript">});</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><h1 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery 选择器</h1><p>jQuery 的选择器不仅包含 css 的选择器，还包含许多派生的选择器</p><p>可以<a href="https://jquery.cuishifeng.cn/">点击查看文档工具站</a>进行学习</p><h1 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery 事件</h1><p>简单演示：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../lib/jquery-3.5.1.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.divMove</span> {</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">}</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 获取鼠标当前位置 --&gt;</span><br>mouse：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mouseMove"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"divMove"</span>&gt;</span>移动鼠标：<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 当网页加载完之后，响应事件</span></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {</span><br><span class="language-javascript">$(<span class="hljs-string">".divMove"</span>).<span class="hljs-title function_">mousemove</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) {</span><br><span class="language-javascript"><span class="hljs-comment">// values: e.clientX, e.clientY, e.pageX, e.pageY</span></span><br><span class="language-javascript">$(<span class="hljs-string">"#mouseMove"</span>).<span class="hljs-title function_">text</span>(</span><br><span class="language-javascript"><span class="hljs-string">"x:"</span> + e.<span class="hljs-property">clientX</span> + <span class="hljs-string">" "</span> + <span class="hljs-string">"y:"</span> + e.<span class="hljs-property">clientY</span></span><br><span class="language-javascript">);</span><br><span class="language-javascript">});</span><br><span class="language-javascript">});</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><h1 id="jQuery操作DOM"><a href="#jQuery操作DOM" class="headerlink" title="jQuery操作DOM"></a>jQuery 操作 DOM</h1><p>节点文本操作</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>操作DOM<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../lib/jquery-3.5.1.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test-ul"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"js"</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"python"</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">"#test-ul li[name = python]"</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">//获得值</span></span><br><span class="language-javascript">$(<span class="hljs-string">"#test-ul li[name = python]"</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">'111'</span>); <span class="hljs-comment">//设置值</span></span><br><span class="language-javascript">$(<span class="hljs-string">"#test-ul li[class = js]"</span>).<span class="hljs-title function_">html</span>(); <span class="hljs-comment">//获得html</span></span><br><span class="language-javascript">$(<span class="hljs-string">"#test-ul li[class = js]"</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">'&lt;strong&gt;222&lt;/strong&gt;'</span>); <span class="hljs-comment">//获得html</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><p>css 操作</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>操作DOM<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../lib/jquery-3.5.1.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test-ul"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"js"</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"python"</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">"#test-ul li[name = python]"</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">"color"</span>, <span class="hljs-string">"red"</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><p>其余自行查询工具文档</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 注解与反射</title>
    <link href="/posts/12475/"/>
    <url>/posts/12475/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h1><ul><li>Annotation 是从 JDK5.0 开始引入的新技术</li><li> Annotation 的作用：<ul><li>不是程序本身，可以对程序作出解释 (这一点和注释 (comment) 没什么区别)</li><li><strong> 可以被其他程序 (比如：编译器等) 读取</strong></li></ul></li><li> Annotation 的格式：<ul><li>注解是以 “@注释名” 在代码中存在的，还可以添加一些参数值，例如：@SuppressWarnings (value=“unchecked”)</li></ul></li><li>Annotation 在哪里使用？<ul><li>可以附加在 package，class，method，field 等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</li></ul></li></ul><h1 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h1><ul><li><strong>@Override</strong>：定义在 java.lang.Override 中，此注释只适用于修辞方法，表示一个方法生命打算重写超类中的另一个方法声明</li><li><strong> @Deprecated</strong>：定义在 java.lang.Deprecated 中，此注释可以用于修辞方法，属性，类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择</li><li><strong> @SuppressWarnings</strong>：定义在 java.lang.SuppressWarnings 中，用来抑制编译时的警告信息<ul><li>与前两个注释有所不同，你需要添加一个参数才能正确使用，这些参数都是已经定义好了的，选择性使用就行了<ul><li> @SuppressWarnings(“all”)</li><li>@SuppressWarnings(“unchecked”)</li><li>@SuppressWarnings(value={“unchecked”,”deprecation”})</li><li> 等等</li></ul></li></ul></li></ul><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><ul><li><p>元注解的作用就是负责注解其他注解，Java 定义了 4 个标准的 meta-annotation 类型，它们被用来提供对其他 annotation 类型作说明</p></li><li><p>这些类型和它们所支持的类在 java.lang.annotation 包中可以找到 (<strong>@Target，@Retention，@Documented，@Inherited</strong>)</p><ul><li><p><strong>@Target</strong>：用于描述注解的使用范围（即：被描述的注解可以用在什么地方） @Target (ElementType.TYPE)—— 接口、类、枚举、注解 @Target (ElementType.FIELD)——<br>字段、枚举的常量 @Target (ElementType.METHOD)—— 方法 @Target (ElementType.PARAMETER)—— 方法参数 @Target (ElementType.CONSTRUCTOR)<br>—— 构造函数 @Target (ElementType.LOCAL_VARIABLE)—— 局部变量 @Target (ElementType.ANNOTATION_TYPE)—— 注解 @Target (<br>ElementType.PACKAGE)—— 包</p></li><li><p><strong>@Retention</strong>：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE&lt;CLASS&lt;<strong>RUNTIME</strong>）</p></li><li><p><strong>@Documented</strong>：说明该注解将被包含在 javadoc 中</p></li><li><p><strong>@Inherited</strong>：说明子类可以继承父类中的该注解</p></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">//定义一个注解</span><br><span class="hljs-comment">//Target 表示我们的注解可以用在哪些地方</span><br><span class="hljs-comment">//Retention 表示我们的注解在什么地方还有效 （SOURCE&lt;CLASS&lt;RUNTIME）</span><br><span class="hljs-comment">//Documented 表示是否将我们的注解生成在 javadoc 中</span><br><span class="hljs-comment">//Inherited 表示子类可以继承父类的注解</span><br><span class="hljs-meta">@Target</span> (value = {ElementType.METHOD, ElementType.TYPE})<br><span class="hljs-meta">@Retention</span> (value = RetentionPolicy.RUNTIME)<br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@interface</span> MyAnnotation {<br><br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//测试元注解</span><br><span class="hljs-comment">//@MyAnnotation  在类前添加此注解报错（@Target (value = ElementType.METHOD)）</span><br><span class="hljs-comment">//@MyAnnotation  在类前添加此注解正常（@Target (value = {ElementType.METHOD,ElementType.TYPE}))）</span><br><span class="hljs-meta">@MyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">annotationDemo01</span> {<br>    <span class="hljs-meta">@MyAnnotation</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span> <span class="hljs-params">()</span> {<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><ul><li>使用 @interface 自定义注解时，自动继承了 java.lang.annotation.Annotation 接口</li><li>分析：<ul><li>@interface 用来声明一个注解，格式：@interface 注解名 {定义内容}</li><li> 其中的每一个方法实际上是声明了一个配置参数</li><li>方法的名称就是参数的名称</li><li>返回值类型就是参数的类型（返回值只能是基本类型 Class,String,enum）</li><li>可以通过 default 来声明参数的默认值</li><li>如果只有一个参数成员，一般参数名为 value</li><li> 注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0 作为默认值</li><li>注解使用 value 为参数名时使用可以省略参数名 </li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target</span> ({ElementType.TYPE, ElementType.METHOD})<br><span class="hljs-meta">@Retention</span> (RetentionPolicy.RUNTIME)<br><span class="hljs-meta">@interface</span> MyAnnotation2 {<br>    <span class="hljs-comment">//注解的参数：参数类型+参数名()</span><br>    String <span class="hljs-title function_">name</span> <span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">""</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span> <span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">id</span> <span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//默认值为-1代表不存在</span><br><br>    String[] school () <span class="hljs-keyword">default</span> {<span class="hljs-string">"北京大学"</span>, <span class="hljs-string">"清华大学"</span>};<br>}<br><br><span class="hljs-meta">@Target</span> ({ElementType.TYPE, ElementType.METHOD})<br><span class="hljs-meta">@Retention</span> (RetentionPolicy.RUNTIME)<br><span class="hljs-meta">@interface</span> MyAnnotation3 {<br>    <span class="hljs-comment">//注解的参数：参数类型+参数名()</span><br>    String <span class="hljs-title function_">value</span> <span class="hljs-params">()</span>;<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">annotationDemo02</span> {<br>    <span class="hljs-meta">@MyAnnotation2</span> ()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span> <span class="hljs-params">()</span> {<br>    }<br><br>    <span class="hljs-meta">@MyAnnotation3</span> (<span class="hljs-string">""</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span> <span class="hljs-params">()</span> {<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="Java-Reflection（反射）"><a href="#Java-Reflection（反射）" class="headerlink" title="Java Reflection（反射）"></a>Java Reflection（反射）</h1><ul><li><p>Reflection（反射）是 Java 被视为动态语言的关键，反射机制允许程序在执行期借助于 Reflection API 取得<strong>任何类的内部消息</strong>，并能直接操作任意对象的内部属性及方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"java.lang.String"</span>)<br></code></pre></td></tr></tbody></table></figure></li><li><p>加载完类之后，在堆内存的方法区中就产生了一个 Class 类型的对象（一个类只有一个 Class 类型的对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。称之为 “反射”</p></li></ul><h1 id="Java反射机制提供的功能"><a href="#Java反射机制提供的功能" class="headerlink" title="Java反射机制提供的功能"></a>Java 反射机制提供的功能</h1><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量的方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><h1 id="Java反射的优缺点"><a href="#Java反射的优缺点" class="headerlink" title="Java反射的优缺点"></a>Java 反射的优缺点</h1><ul><li>优点：可以实现动态创建对象和编译，体现出很大的灵活性</li><li>缺点：对性能有影响。使用反射基本上是一种解释操作，我们可以告诉 JVM，我们希望做什么并且他满足我们的要求。这类操作总是慢于直接执行相同的操作</li></ul><h1 id="反射相关的主要API"><a href="#反射相关的主要API" class="headerlink" title="反射相关的主要API"></a>反射相关的主要 API</h1><ul><li>java.lang.Class：代表一个类</li><li> java.lang.reflect.Method：代表类的方法</li><li> java.lang.reflect.Field：代表类的成员变量</li><li> java.lang.reflect.Constructor：代表类的构造器</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/18</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//什么叫反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException {<br>        <span class="hljs-comment">//通过反射获取类的Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.user"</span>);<br>        System.out.println(c1);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.user"</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.user"</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.user"</span>);<br><br>        <span class="hljs-comment">//一个类在内存中只有一个Class对象</span><br>        <span class="hljs-comment">//一个类被加载后，类的整个结构会被封装在Class对象中</span><br>        System.out.println(c2.getClassLoader());<br>        System.out.println(c3.getClassLoader());<br>        System.out.println(c4.getClassLoader());<br>    }<br>}<br><br><span class="hljs-comment">//实体类:pojo,entify</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">user</span> {<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">user</span> <span class="hljs-params">()</span> {<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">user</span> <span class="hljs-params">(String name, <span class="hljs-type">int</span> id, <span class="hljs-type">int</span> age)</span> {<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    }<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span> {<br>        <span class="hljs-built_in">this</span>.name = name;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> id;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span> {<br>        <span class="hljs-built_in">this</span>.id = id;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span> <span class="hljs-params">(<span class="hljs-type">int</span> age)</span> {<br>        <span class="hljs-built_in">this</span>.age = age;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"user{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", id="</span> + id +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E5%8F%8D%E5%B0%84%E7%9B%B8%E5%85%B3API%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class 类</h1><p>在 Object 类中定义了 public finall Class getClass () 方法，此方法将被所有子类继承</p><p>该方法返回值的类型是一个 Class 类，此类是 Java 反射的源头。</p><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构（class/interface/enum/annotation/primitive<br>type/void/[]）的有关信息。</p><ul><li>Class 本身也是一个类</li><li> Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个 calss 实例</li><li>一个 Class 对象对应的是一个加载到 JVM 中的一个 .class 文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过 Class 可以完整地得到一个类中的所有有被加载的结构</li><li> Class 类是 Reflection 的根源，针对任何你想动态加载、运行的类、唯有先获得相应的 Class 对象</li></ul><h1 id="获取Class类的实例"><a href="#获取Class类的实例" class="headerlink" title="获取Class类的实例"></a>获取 Class 类的实例</h1><ol><li>若已知具体的类，通过类的 class 属性获取，该方法最为安全可靠，程序性能最高 Class clazz = Person.class</li><li> 已知某个类的实例，调用该实例的 getClass () 方法获取 Class 对象 Class clazz = person.getClass ();</li><li> 已知一个类的全类名，且该类在类路径下，可以通过 Class 类的静态方法 forName () 获取，可能会抛出 ClassNotFoundException</li><li> 内置基本数据类型可以直接用类名.Type</li><li> 还可以使用 ClassLoader</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/18</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//测试Class类的创建方式有哪些</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test03</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException {<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(<span class="hljs-string">"这个人是"</span> + student.name);<br><br>        <span class="hljs-comment">//方式一：通过对象获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> student.getClass();<br>        System.out.println(c1.hashCode());<br><br>        <span class="hljs-comment">//方式二：通过forName获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.Student"</span>);<br>        System.out.println(c2.hashCode());<br><br>        <span class="hljs-comment">//方式三：通过 类名.class</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> Student.class;<br>        System.out.println(c3.hashCode());<br><br>        <span class="hljs-comment">//方式四:基本类型的包装类都有一个Type属性</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> Integer.TYPE;<br>        System.out.println(c4.hashCode());<br><br>        <span class="hljs-comment">//获得父亲类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c5</span> <span class="hljs-operator">=</span> c1.getSuperclass();<br>        System.out.println(c5);<br>    }<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {<br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span> <span class="hljs-params">()</span> {<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span> <span class="hljs-params">(String name)</span> {<br>        <span class="hljs-built_in">this</span>.name = name;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person{"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">"学生"</span>;<br>    }<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">"老师"</span>;<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_Class%E7%B1%BB%E5%AE%9E%E4%BE%8B%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h1 id="哪些类型可以有Class对象？"><a href="#哪些类型可以有Class对象？" class="headerlink" title="哪些类型可以有Class对象？"></a>哪些类型可以有 Class 对象？</h1><ul><li>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</li><li> interface：接口</li><li> []：数组</li><li> enum：枚举</li><li> annotation：注解 @interface</li><li>primitive type：基本数据类型</li><li> void</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/19</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//所有类型的Class对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Object.class; <span class="hljs-comment">//类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Comparable.class; <span class="hljs-comment">//接口</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> String[].class; <span class="hljs-comment">//一维数组</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> <span class="hljs-type">int</span>[][].class; <span class="hljs-comment">//二维数组</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c5</span> <span class="hljs-operator">=</span> Override.class; <span class="hljs-comment">//注解</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c6</span> <span class="hljs-operator">=</span> ElementType.class; <span class="hljs-comment">//枚举</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c7</span> <span class="hljs-operator">=</span> Integer.class; <span class="hljs-comment">//基本数据类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">void</span>.class; <span class="hljs-comment">//void</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c9</span> <span class="hljs-operator">=</span> Class.class; <span class="hljs-comment">//Class</span><br><br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>        System.out.println(c5);<br>        System.out.println(c6);<br>        System.out.println(c7);<br>        System.out.println(c8);<br>        System.out.println(c9);<br><br><br>        <span class="hljs-comment">//只要元素类型和维度一样，就是同一个Class</span><br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>        System.out.println(a.getClass().hashCode());<br>        System.out.println(b.getClass().hashCode());<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E6%8B%A5%E6%9C%89Class%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h1 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h1><ul><li>类的主动引用（一定会发生类的初始化）<ul><li>当虚拟机启动，先初始化 main 方法所在的类</li><li> new 一个类的对象</li><li>调用类的静态成员（除了 final 常量）和静态方法</li><li>使用 java.lang.reflect 包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></li><li>类的被动引用（不会发生类的初始化）<ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。例如：当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/19</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//测试类什么时候会初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test06</span> {<br>    <span class="hljs-keyword">static</span> {<br>        System.out.println(<span class="hljs-string">"Main类被加载"</span>);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException {<br>        <span class="hljs-comment">//1.主动引用</span><br>        <span class="hljs-comment">//Son son = new Son();</span><br><br>        <span class="hljs-comment">//2.反射</span><br>        <span class="hljs-comment">//Class.forName("demo02.Son");</span><br><br>        <span class="hljs-comment">//不会产生类的引用的方法</span><br>        <span class="hljs-comment">//System.out.println(Son.b);</span><br><br>        <span class="hljs-comment">//Son[] array = new Son[5];</span><br><br>        System.out.println(Son.M);<br>    }<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> {<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">static</span> {<br>        System.out.println(<span class="hljs-string">"父类被加载"</span>);<br>    }<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> {<br><br><br>    <span class="hljs-keyword">static</span> {<br>        System.out.println(<span class="hljs-string">"子类被加载"</span>);<br>        m = <span class="hljs-number">300</span>;<br>    }<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">M</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>主动引用结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E4%B8%BB%E5%8A%A8%E5%BC%95%E7%94%A8%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><p>反射调用结果:</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><p>调用父类的静态变量：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><p>定义数组：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E5%AE%9A%E4%B9%89%E6%95%B0%E7%BB%84%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><p>引用常量:</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E5%BC%95%E7%94%A8%E5%B8%B8%E9%87%8F%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>-<br>类加载器的作用：将 class 文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的 java.lang.Class 对象，作为方法区中类数据的访问入口。类加载器的作用是用来把类（class）装载进内存的。</p><ul><li>类缓存：标准的 JavaSE 类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过 JVM 垃圾回收机制可以回收这些 Class 对象。</li></ul><h2 id="类加载器的类型"><a href="#类加载器的类型" class="headerlink" title="类加载器的类型"></a>类加载器的类型</h2><ul><li>引导类加载器：用 C++ 编写的，是 JVM 自带的类加载器，负责 Java 平台核心库，用来装载核心类库，该加载器无法直接获取</li><li>扩展类加载器：负责 jre/lib/ext 目录下的 jar 包或 - D java.ext.dirs 指定目录下的 jar 包装入工作库</li><li>系统类加载器：负责 java -classpath 或 -D java.class.path 所指的目录下的类与 jar 包装入工作，是最常用的加载器 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test07</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException {<br>        <span class="hljs-comment">//获取系统类的类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">systemClassLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class="hljs-comment">//获取系统类加载器的父类加载器--&gt;扩展类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> systemClassLoader.getParent();<br>        System.out.println(parent);<br><br>        <span class="hljs-comment">//获取扩展类加载器的父类加载器--&gt;跟加载器（C/C++）</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent1</span> <span class="hljs-operator">=</span> parent.getParent();<br>        System.out.println(parent1);<br><br>        <span class="hljs-comment">//测试当前类是哪个加载器加载的</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.Test07"</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//测试JDK内置的类是谁加载的</span><br>        classLoader = Class.forName(<span class="hljs-string">"java.lang.Object"</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//如何获得系统类加载器可以加载</span><br>        System.out.println(System.getProperty(<span class="hljs-string">"java.class.path"</span>));<br><br>        <span class="hljs-comment">//双亲委派机制会往上找jar包，安全性</span><br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h1 id="获取运行时类的完整结果"><a href="#获取运行时类的完整结果" class="headerlink" title="获取运行时类的完整结果"></a>获取运行时类的完整结果</h1><p>通过反射获取运行时类的完整结构</p><p>Field，Method，Conctructor，Superclass，Interface，Annotation</p><ul><li>实现的全部接口</li><li>所继承的父类</li><li>全部的构造器</li><li>全部的方法</li><li>全部的 Field</li><li> 注解 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//获得类的学习</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test08</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException {<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.user"</span>);<br><br>        <span class="hljs-comment">//获得类的名字</span><br>        System.out.println(c1.getName()); <span class="hljs-comment">//获得包名+类名</span><br>        System.out.println(c1.getSimpleName()); <span class="hljs-comment">//获得类名</span><br><br>        <span class="hljs-comment">//获得类的属性</span><br>        Field[] fields = c1.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) {<br>            System.out.println(field);<br>        }<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">"name"</span>);<br>        System.out.println(name);<br><br>        <span class="hljs-comment">//获得类的方法</span><br>        Method[] methods = c1.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) {<br>            System.out.println(<span class="hljs-string">"正常的:"</span> + method); <span class="hljs-comment">//获得本类及其父类的全部public方法</span><br>        }<br>        methods = c1.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) {<br>            System.out.println(<span class="hljs-string">"getDeclaredMethods:"</span> + method); <span class="hljs-comment">//获得本类的所有方法</span><br>        }<br><br>        <span class="hljs-comment">//获得指定方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getName</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">"getName"</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">setName</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">"setName"</span>, String.class);<br>        System.out.println(getName);<br>        System.out.println(setName);<br><br>        <span class="hljs-comment">//获得指定的构造器</span><br>        Constructor[] constructors = c1.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) {<br>            System.out.println(constructor);<br>        }<br>        constructors = c1.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) {<br>            System.out.println(<span class="hljs-string">"#"</span> + constructor);<br>        }<br><br>        <span class="hljs-comment">//获得指定的构造器</span><br>        System.out.println(c1.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class));<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E8%8E%B7%E5%8F%96%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E7%9A%84%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%9C.png"></p><h1 id="有了Class可以做什么？"><a href="#有了Class可以做什么？" class="headerlink" title="有了Class可以做什么？"></a>有了 Class 可以做什么？</h1><ul><li>创建类的对象：调用 Class 对象的 newInstance () 方法<ul><li>类必须有一个无参构造器</li><li>类的构造器的访问权限需要足够</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//动态创建对象，通过反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test09</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-comment">//获得Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.user"</span>);<br><br>        <span class="hljs-comment">//构造一个对象</span><br>        <span class="hljs-type">user</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (user) c1.newInstance(); <span class="hljs-comment">//调用无参构造器</span><br>        System.out.println(o);<br>        System.out.println(<span class="hljs-string">"=================================================="</span>);<br><br>        <span class="hljs-comment">//通过构造器创建对象</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        <span class="hljs-type">user</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> (user) constructor.newInstance(<span class="hljs-string">"张三"</span>, <span class="hljs-number">001</span>, <span class="hljs-number">18</span>);<br>        System.out.println(user2);<br>        System.out.println(<span class="hljs-string">"=================================================="</span>);<br><br>        <span class="hljs-comment">//通过反射调用普通方法</span><br>        <span class="hljs-type">user</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> (user) c1.newInstance();<br>        <span class="hljs-comment">//通过反射拿到一个方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">setName</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">"setName"</span>, String.class);<br>        <span class="hljs-comment">//invoke:激活方法</span><br>        <span class="hljs-comment">//(对象，"方法的值")</span><br>        setName.invoke(user3, <span class="hljs-string">"李四"</span>);<br>        System.out.println(user3.getName());<br>        System.out.println(<span class="hljs-string">"=================================================="</span>);<br><br>        <span class="hljs-comment">//通过反射操作属性</span><br>        <span class="hljs-type">user</span> <span class="hljs-variable">user4</span> <span class="hljs-operator">=</span> (user) c1.newInstance();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">"name"</span>);<br><br>        <span class="hljs-comment">//不能直接访问私有属性，需要调用setAccessible()关闭安全访问</span><br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(user4, <span class="hljs-string">"王五"</span>);<br>        System.out.println(user4.getName());<br>        System.out.println(<span class="hljs-string">"=================================================="</span>);<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E6%9C%89%E4%BA%86Class%E7%B1%BB%E5%8F%AF%E4%BB%A5%E5%B9%B2%E4%BB%80%E4%B9%88.png"></p><h1 id="setAccessible"><a href="#setAccessible" class="headerlink" title="setAccessible"></a>setAccessible</h1><ul><li>Method 和 Field、Constructor 对象都有 setAccessible () 方法</li><li> setAccessible 作用是启动和禁用访问安全检查的开关</li><li>参数值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查<ul><li>提高反射的效率。如果代码中必须使用反射，而该句代码需要频繁的被调用，那么请设置为 true</li><li> 使得原本无法访问的私有成员也可以访问</li></ul></li><li>参数值为 false 则指示反射的对象应该实施 Java 语言访问检查</li></ul><p>性能检测：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//分析性能问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test10</span> {<br><br>    <span class="hljs-comment">//普通方式调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-type">user</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">user</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) {<br>            user1.getName();<br>        }<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">"普通方式执行10亿次:"</span> + (endTime - startTime) + <span class="hljs-string">"ms"</span>);<br>    }<br><br>    <span class="hljs-comment">//反射方式调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException {<br>        <span class="hljs-type">user</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">user</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> user1.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getName</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">"getName"</span>);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) {<br>            getName.invoke(user1, <span class="hljs-literal">null</span>);<br>        }<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">"反射方式执行10亿次:"</span> + (endTime - startTime) + <span class="hljs-string">"ms"</span>);<br>    }<br><br>    <span class="hljs-comment">//反射方式调用，关闭检查</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException {<br>        <span class="hljs-type">user</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">user</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> user1.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getName</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">"getName"</span>);<br>        getName.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) {<br>            getName.invoke(user1, <span class="hljs-literal">null</span>);<br>        }<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">"反射方式,关闭检测后，执行10亿次:"</span> + (endTime - startTime) + <span class="hljs-string">"ms"</span>);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException {<br>        test01();<br>        test02();<br>        test03();<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E6%99%AE%E9%80%9A-%E5%8F%8D%E5%B0%84-%E5%85%B3%E9%97%AD%E6%A3%80%E6%B5%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4.png"></p><h1 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h1><ul><li>Java 采用泛型擦除的机制来引入泛型，Java 中的泛型仅仅是给编译器 javac 使用的，确保数据的安全性和免去强制类型转换问题，但是，一旦编译完成，所有和泛型有关的类型全部擦除</li><li>为了通过反射操作这些类型，Java 新增了 ParameterizedType，GenericArrayType，TypeVariable 和 WildcardType 几种类型来代表不能被归一到 Class 类中的类型但是又和原始类型齐名的类型</li><li> ParameterizedType：表示一种参数化类型，比如 <code>Collection&lt;String&gt;</code></li><li>GenericArrayType: 表示一种元素类型是参数化类型类型或者类型变量的数组类型</li><li> TypeVariable：是各种类型变量的公共父接口</li><li> WildcardType：代表一种通配符类型表达式</li></ul><p>示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//通过反射获取泛型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test11</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException {<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Test11.class.getMethod(<span class="hljs-string">"test01"</span>, Map.class, List.class);<br>        Type[] genericParameterTypes = method.getGenericParameterTypes();<br>        <span class="hljs-keyword">for</span> (Type genericParameterType : genericParameterTypes) {<br>            System.out.println(<span class="hljs-string">"#"</span> + genericParameterType);<br>            <span class="hljs-keyword">if</span> (genericParameterType <span class="hljs-keyword">instanceof</span> ParameterizedType) {<br>                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();<br>                <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) {<br>                    System.out.println(actualTypeArgument);<br>                }<br>            }<br>        }<br><br>        method = Test11.class.getMethod(<span class="hljs-string">"test02"</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericReturnType</span> <span class="hljs-operator">=</span> method.getGenericReturnType();<br>        System.out.println(<span class="hljs-string">"#"</span> + genericReturnType);<br>        <span class="hljs-keyword">if</span> (genericReturnType <span class="hljs-keyword">instanceof</span> ParameterizedType) {<br>            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();<br>            <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) {<br>                System.out.println(actualTypeArgument);<br>            }<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span> <span class="hljs-params">(Map&lt;String, user&gt; map, List&lt;user&gt; list)</span> {<br>        System.out.println(<span class="hljs-string">"test01"</span>);<br>    }<br><br>    <span class="hljs-keyword">public</span> Map&lt;String, user&gt; <span class="hljs-title function_">test02</span> <span class="hljs-params">()</span> {<br>        System.out.println(<span class="hljs-string">"test02"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>结果:</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E5%8F%8D%E5%B0%84%E6%93%8D%E4%BD%9C%E7%9A%84%E7%B1%BB%E5%9E%8B.png"></p><h1 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h1><ul><li>getAnnotations</li><li>getAnnotation</li></ul><p>示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">//类名的注解</span><br><span class="hljs-meta">@Target</span> (ElementType.TYPE)<br><span class="hljs-meta">@Retention</span> (RetentionPolicy.RUNTIME)<br><span class="hljs-meta">@interface</span> TableZLW {<br>    String <span class="hljs-title function_">value</span> <span class="hljs-params">()</span>;<br>}<br><br><span class="hljs-comment">//属性的注解</span><br><span class="hljs-meta">@Target</span> (ElementType.FIELD)<br><span class="hljs-meta">@Retention</span> (RetentionPolicy.RUNTIME)<br><span class="hljs-meta">@interface</span> FieldZLW {<br>    String <span class="hljs-title function_">columnName</span> <span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">type</span> <span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">length</span> <span class="hljs-params">()</span>;<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/4/20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//反射操作注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test12</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException {<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">"demo02.Student2"</span>);<br><br>        <span class="hljs-comment">//通过反射获得注解</span><br>        Annotation[] annotations = c1.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) {<br>            System.out.println(annotation);<br>        }<br><br>        <span class="hljs-comment">//获得注解的value的值</span><br>        <span class="hljs-type">TableZLW</span> <span class="hljs-variable">tableZLW</span> <span class="hljs-operator">=</span> (TableZLW) c1.getAnnotation(TableZLW.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> tableZLW.value();<br>        System.out.println(value);<br><br>        <span class="hljs-comment">//获得类指定的注解</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">"name"</span>);<br>        <span class="hljs-type">FieldZLW</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> f.getAnnotation(FieldZLW.class);<br>        System.out.println(annotation.columnName());<br>        System.out.println(annotation.type());<br>        System.out.println(annotation.length());<br>    }<br>}<br><br><span class="hljs-meta">@TableZLW</span> (<span class="hljs-string">"db_student"</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2</span> {<br>    <span class="hljs-meta">@FieldZLW</span> (columnName = <span class="hljs-string">"db_id"</span>, type = <span class="hljs-string">"int"</span>, length = <span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@FieldZLW</span> (columnName = <span class="hljs-string">"db_age"</span>, type = <span class="hljs-string">"int"</span>, length = <span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@FieldZLW</span> (columnName = <span class="hljs-string">"db_name"</span>, type = <span class="hljs-string">"Varchar"</span>, length = <span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student2</span> <span class="hljs-params">()</span> {<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student2</span> <span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> age, String name)</span> {<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> id;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span> {<br>        <span class="hljs-built_in">this</span>.id = id;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> age;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span> <span class="hljs-params">(<span class="hljs-type">int</span> age)</span> {<br>        <span class="hljs-built_in">this</span>.age = age;<br>    }<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> name;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span> {<br>        <span class="hljs-built_in">this</span>.name = name;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span> <span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Student2{"</span> +<br>                <span class="hljs-string">"id="</span> + id +<br>                <span class="hljs-string">", age="</span> + age +<br>                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'}'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果:</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/Java%E6%B3%A8%E8%A7%A3_%E5%8F%8D%E5%B0%84%E6%93%8D%E4%BD%9C%E7%9A%84%E6%B3%A8%E8%A7%A3.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 网络编程学习笔记</title>
    <link href="/posts/15254/"/>
    <url>/posts/15254/</url>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>计算机网络：</strong></p><p>计算机网络是指将<strong>地理位置不同</strong>的具有独立功能的<strong>多台计算机及其外部设备，通过通信线路连接起来</strong>，在<strong>网络操作系统，网络管理软件及网络通信协议</strong>的管理和协调下，实现<strong>资源共享</strong>和<strong>信息传递</strong>的计算机系统。</p><p><strong>网络编程的目的：</strong></p><p>传播交流信息，数据交换</p><p><strong>想要达到这个效果需要什么：</strong></p><ol><li>如何准确的定位网络上的一台主机</li><li>找到了这个主机，如何传输数据？</li></ol><p>Javaweb: 网页编程  B/S</p><p>网络编程：C/S</p><h2 id="网络通信的要素"><a href="#网络通信的要素" class="headerlink" title="网络通信的要素"></a>网络通信的要素</h2><p>如何实现网络的通信？</p><p><strong>通信双方的地址:</strong></p><ul><li>ip</li><li> 端口号</li></ul><p><strong>规则：网络通信的协议</strong></p><ul><li><p>TCP/IP 参考模型：</p><p><img src="https://i.loli.net/2021/03/22/gckuK8VFt2r4Mv5.png" alt="image-20210322213441793"></p></li></ul><p>小结：</p><ol><li>网络编程中有两个主要问题<ul><li>如何准确定位到网络上的一台或多台主机</li><li>找到主机之后如何进行通信</li></ul></li><li>网络编程中的要素<ul><li> IP 和端口号</li><li>网络通信协议</li></ul></li><li>万物皆对象</li></ol><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>IP 地址：InetAddress</p><ul><li>唯一定位一台网络上计算机</li><li> 127.0.0.1 ： 本机  localhost</li><li>IP 地址的分类<ul><li> ipv4/ipv6<ul><li>ipv4 127.0.0.1，四个字节组成，0~255</li><li>ipv6 128 位  8 位无符号整数</li></ul></li><li>公网（互联网）- 私网（局域网）<ul><li>192.168.x.x 专门给组织内部使用</li><li> ABCD 类地址</li></ul></li></ul></li><li>域名：记忆 IP 问题<ul><li> IP： <a href="http://www.inencoding.com/">www.inencoding.com</a></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//测试IP</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInetAddress</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-keyword">try</span> {<br><span class="hljs-comment">//查询本机IP地址</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">inetAddress1</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">"127.0.0.1"</span>);<br>System.out.println(inetAddress1);<br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">inetAddress2</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>System.out.println(inetAddress2);<br><br><span class="hljs-comment">//查询百度IP地址</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">inetAddress3</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">"www.baidu.com"</span>);<br>System.out.println(inetAddress3);<br><span class="hljs-comment">//常用方法</span><br>System.out.println(inetAddress3.getAddress());<br>System.out.println(inetAddress3.getCanonicalHostName());<span class="hljs-comment">//规范的名字</span><br>System.out.println(inetAddress3.getHostAddress());<span class="hljs-comment">//IP</span><br>System.out.println(inetAddress3.getHostName());<span class="hljs-comment">//域名</span><br>} <span class="hljs-keyword">catch</span> (UnknownHostException e) {<br>e.printStackTrace();<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上的一个程序的进程</p><ul><li><p>不同的进程有不同的端口号！用来区分软件！</p></li><li><p>规定为 0~65536</p></li><li><p>TCP UDP：65536*2   <strong>单个协议</strong>下，端口号不能冲突</p></li><li><p>端口分类：</p><ul><li><p>公有端口：0~1023</p><ul><li>http：80</li><li>https：443</li><li>ftp：21</li><li>ssh：22</li><li>telent：23</li></ul></li><li><p> 程序注册端口：1024~49151，分配用户或者程序</p><ul><li>tomcat：8080</li><li>MySQL：3306</li><li>oracle：1521</li></ul></li><li><p> 动态、私有：49152~65535</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -ano <span class="hljs-comment">#查看所有的命令</span><br>netstat -ano|findstr <span class="hljs-string">"5900"</span> <span class="hljs-comment">#查看指定的端口</span><br>tasklist|findstr <span class="hljs-string">"8696"</span> <span class="hljs-comment">#查看端口对应的进程</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInetSocketAddress</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">socketAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">8080</span>);<br><span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">socketAddress2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">8080</span>);<br>System.out.println(socketAddress);<br>System.out.println(socketAddress2);<br>System.out.println(socketAddress.getAddress());<br>System.out.println(socketAddress.getHostName());<span class="hljs-comment">//地址</span><br>System.out.println(socketAddress.getPort());<span class="hljs-comment">//端口</span><br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>输出结果：</p><p><img src="https://i.loli.net/2021/03/25/MtiQhqTHvGIfgrj.png" alt="image-20210325212034082"></p></li></ul></li></ul><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>协议：约定，就好比说 普通话。</p><p><strong>网络通信协议</strong>：速率，传输码率，代码结构，传输控制</p><p>问题复杂时：分层解决</p><ul><li><strong>TCP/IP 协议簇</strong><ul><li> TCP：用户传输协议</li><li> UDP：用户数据报协议</li><li> IP：网络互联协议</li></ul></li></ul><ul><li><p> TCP UDP 对比</p><ul><li><p>TCP：相当于打电话</p><ul><li><p>连接，稳定</p></li><li><p>三次握手，四次挥手</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">三次握手：<br>A 你愁啥 --》询问<br>B 瞅你咋地 --》回应<br>A 干一场 --》回应<br><br>四次挥手：<br>四次挥手其实就是在关闭发送和关闭接收。<br>A：我不发了（关闭发送）。<br>B：好，那我不收了（关闭接收）。<br>B：我也不发了（关闭发送）。<br>A：好，那我也不收了（关闭接收）<br></code></pre></td></tr></tbody></table></figure></li><li><p>客户端、服务端</p></li><li><p>传输完成就会释放连接，效率低</p></li></ul></li><li><p>UDP：相当于发短信</p><ul><li>不连接，不稳定</li><li>客户端和服务端没有明确的界限</li><li>不管有没有准备好，都可以发给你</li><li> DDOS：洪水攻击！饱和攻击</li></ul></li></ul></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>客户端</p><ol><li>连接服务器 Socket</li><li> 发送消息 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPClientDemo01</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br><span class="hljs-comment">//1.要知道服务器地址,端口号</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">serverIp</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">"127.0.0.1"</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999</span>;<br><span class="hljs-comment">//2.创建一个socket连接</span><br>socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(serverIp, port);<br><span class="hljs-comment">//3.发送消息 IO流</span><br>os = socket.getOutputStream();<br>os.write(<span class="hljs-string">"欢迎来到英雄联盟"</span>.getBytes());<br>} <span class="hljs-keyword">catch</span> (Exception e) {<br>e.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br><span class="hljs-keyword">if</span> (os != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>os.close();<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>}<br>}<br><span class="hljs-keyword">if</span> (socket != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>socket.close();<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>}<br>}<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>服务器</p><ol><li>建立服务的端口 ServerSocket</li><li> 等待用户的连接 accept</li><li> 接受用的信息 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPServerDemo01</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br><span class="hljs-comment">//1.得有一个地址</span><br>serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br><span class="hljs-comment">//2.等待客户端连接过来</span><br>socket = serverSocket.accept();<span class="hljs-comment">//监听</span><br><span class="hljs-comment">//3.读取客户端的消息</span><br>is = socket.getInputStream();<br><span class="hljs-comment">//4.管道流</span><br>baos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) {<br>baos.write(buffer, <span class="hljs-number">0</span>, len);<br>}<br>System.out.println(baos.toString());<br><br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br><span class="hljs-keyword">if</span> (baos != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>baos.close();<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>}<br>}<br><span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>is.close();<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>}<br>}<br><span class="hljs-keyword">if</span> (socket != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>socket.close();<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>}<br>}<br><span class="hljs-keyword">if</span> (serverSocket != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>serverSocket.close();<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>}<br>}<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><ul><li>服务端：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPServerDemo02</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException {<br><span class="hljs-comment">//1.创建服务</span><br><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9000</span>);<br><span class="hljs-comment">//2.监听客户端的连接</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><span class="hljs-comment">//3.获取输入流</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><span class="hljs-comment">//4.文件输出</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">"receive.jpg"</span>));<br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) {<br>fos.write(buffer, <span class="hljs-number">0</span>, len);<br>}<br><span class="hljs-comment">//通知客服端接受完毕了</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>os.write(<span class="hljs-string">"接收完毕"</span>.getBytes());<br><span class="hljs-comment">//5.关闭资源</span><br>fos.close();<br>is.close();<br>socket.close();<br>serverSocket.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><ul><li>客户端：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPClientDemo02</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException {<br><span class="hljs-comment">//1.创建一个socket连接</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">"127.0.0.1"</span>), <span class="hljs-number">9000</span>);<br><span class="hljs-comment">//2.创建一个输入流</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><span class="hljs-comment">//3.读取文件</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">"1.jpg"</span>));<br><span class="hljs-comment">//4.写出文件</span><br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) {<br>os.write(buffer, <span class="hljs-number">0</span>, len);<br>}<br><span class="hljs-comment">//通知服务器已经传输完毕</span><br>socket.shutdownOutput();<br><span class="hljs-comment">//确定服务器接收完毕，才能够断开连接</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><span class="hljs-comment">//string byte[]</span><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">byte</span>[] buffer2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len2;<br><span class="hljs-keyword">while</span>((len2= is.read(buffer2))!=-<span class="hljs-number">1</span>){<br>baos.write(buffer2,<span class="hljs-number">0</span>,len2);<br>}<br>System.out.println(baos.toString());<br><span class="hljs-comment">//5.关闭资源</span><br>fis.close();<br>os.close();<br>socket.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>服务端</p><ul><li>自定义 S</li><li>tomcat 服务器 S : Java 后台开发</li></ul><p>客户端</p><ul><li>自定义 C</li><li> 浏览器 B</li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>发短信：不用连接，需要知道对方的地址</p><h3 id="发送信息"><a href="#发送信息" class="headerlink" title="发送信息"></a>发送信息</h3><ul><li>发送端 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//不需要连接服务器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPClientDemo01</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-comment">//1.建立一个socket</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br><span class="hljs-comment">//2.建个包</span><br><span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">"你好，服务器"</span>;<br><span class="hljs-comment">//发送给谁</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">localhost</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">"localhost"</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">9090</span>;<br><span class="hljs-comment">//数据，数据起始长度，数据结束长度，主机名，端口</span><br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(msg.getBytes(),<span class="hljs-number">0</span>,msg.getBytes().length,localhost,port);<br><br><span class="hljs-comment">//3.发送包</span><br>socket.send(packet);<br><br><span class="hljs-comment">//4.关闭流</span><br>socket.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><ul><li>接收端 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//还是要等待客户端的连接</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPServerDemo01</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-comment">//开放端口</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9090</span>);<br><span class="hljs-comment">//接收数据包</span><br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buffer, <span class="hljs-number">0</span>, buffer.length);<br><span class="hljs-comment">//阻塞接收</span><br>socket.receive(packet);<br>System.out.println(packet.getAddress().getHostAddress());<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(), <span class="hljs-number">0</span>, packet.getLength()));<br><span class="hljs-comment">//关闭连接</span><br>socket.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="咨询"><a href="#咨询" class="headerlink" title="咨询"></a>咨询</h3><ul><li><p>循环发送：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPSenderDemo01</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-comment">//准备数据：从控制台读取 System.in</span><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> reader.readLine();<br><span class="hljs-type">byte</span>[] datas = data.getBytes();<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(datas, <span class="hljs-number">0</span>, datas.length, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">6666</span>));<br>socket.send(packet);<br><span class="hljs-keyword">if</span>(data.equals(<span class="hljs-string">"bye"</span>)){<br><span class="hljs-keyword">break</span>;<br>}<br>}<br>socket.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>循环接收：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPReceiveDemo01</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br><span class="hljs-comment">//准备接受</span><br><span class="hljs-type">byte</span>[] container = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(container, <span class="hljs-number">0</span>, container.length);<br><span class="hljs-comment">//阻塞式接收</span><br>socket.receive(packet);<br><span class="hljs-comment">//断开连接</span><br><span class="hljs-type">byte</span>[] data = packet.getData();<br><span class="hljs-type">String</span> <span class="hljs-variable">receiveData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, packet.getLength());<br>System.out.println(receiveData);<br><span class="hljs-keyword">if</span> (receiveData.equals(<span class="hljs-string">"bye"</span>)) {<br><span class="hljs-keyword">break</span>;<br>}<br>}<br>socket.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="多线程实现在线咨询"><a href="#多线程实现在线咨询" class="headerlink" title="多线程实现在线咨询"></a>多线程实现在线咨询</h2></li><li><p>发送端线程体</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TalkSend</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> fromPort;<br><span class="hljs-keyword">private</span> String toIP;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> toPort;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TalkSend</span> <span class="hljs-params">(<span class="hljs-type">int</span> fromPort, String toIP, <span class="hljs-type">int</span> toPort)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-built_in">this</span>.fromPort = fromPort;<br><span class="hljs-built_in">this</span>.toIP = toIP;<br><span class="hljs-built_in">this</span>.toPort = toPort;<br>socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(fromPort);<br>reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br><span class="hljs-keyword">try</span> {<br><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> reader.readLine();<br><span class="hljs-type">byte</span>[] datas = data.getBytes();<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(datas, <span class="hljs-number">0</span>, datas.length, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-built_in">this</span>.toIP, <span class="hljs-built_in">this</span>.toPort));<br>socket.send(packet);<br><span class="hljs-keyword">if</span> (data.equals(<span class="hljs-string">"bye"</span>)) {<br><span class="hljs-keyword">break</span>;<br>}<br>} <span class="hljs-keyword">catch</span> (Exception e) {<br>e.toString();<br>}<br>}<br>socket.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>接收端线程体</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TalkReceive</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br><span class="hljs-keyword">private</span> String msgFrom;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TalkReceive</span> <span class="hljs-params">(<span class="hljs-type">int</span> port, String msgFrom)</span> <span class="hljs-keyword">throws</span> SocketException {<br><span class="hljs-built_in">this</span>.port = port;<br><span class="hljs-built_in">this</span>.msgFrom = msgFrom;<br>socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(port);<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br><span class="hljs-keyword">try</span> {<br><span class="hljs-comment">//准备接受</span><br><span class="hljs-type">byte</span>[] container = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(container, <span class="hljs-number">0</span>, container.length);<br><span class="hljs-comment">//阻塞式接收</span><br>socket.receive(packet);<br><span class="hljs-comment">//断开连接</span><br><span class="hljs-type">byte</span>[] data = packet.getData();<br><span class="hljs-type">String</span> <span class="hljs-variable">receiveData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, packet.getLength());<br>System.out.println(msgFrom + <span class="hljs-string">"："</span> + receiveData);<br><span class="hljs-keyword">if</span> (receiveData.equals(<span class="hljs-string">"bye"</span>)) {<br><span class="hljs-keyword">break</span>;<br>}<br>} <span class="hljs-keyword">catch</span> (Exception e) {<br>e.toString();<br>}<br><br>}<br>socket.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>学生端：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TalkStudent</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-comment">//开启两个线程</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TalkSend</span>(<span class="hljs-number">7777</span>,<span class="hljs-string">"localhost"</span>,<span class="hljs-number">9999</span>)).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TalkReceive</span>(<span class="hljs-number">8888</span>,<span class="hljs-string">"老师"</span>)).start();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>教师端：</p> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TalkTeacher</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-comment">//开启两个线程</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TalkSend</span>(<span class="hljs-number">5555</span>,<span class="hljs-string">"localhost"</span>,<span class="hljs-number">8888</span>)).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TalkReceive</span>(<span class="hljs-number">9999</span>,<span class="hljs-string">"学生"</span>)).start();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>统一资源定位符：定位互联网上的某一个资源</p><ul><li>协议 ：//ip 地址：端口 / 项目名 / 资源</li></ul><p>URL 下载文件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDown</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-comment">//1.下载地址</span><br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">"http://localhost:8080/AWei/%E6%9C%BA%E5%AF%86.txt"</span>);<br><br><span class="hljs-comment">//2.连接到这个资源 HTTP</span><br><span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">urlConnection</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> urlConnection.getInputStream();<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">"下载的文件.txt"</span>);<br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>) {<br>fileOutputStream.write(buffer, <span class="hljs-number">0</span>, len);<span class="hljs-comment">//写出这个数据</span><br>}<br>fileOutputStream.close();<br>inputStream.close();<br>urlConnection.disconnect();<span class="hljs-comment">//断开连接</span><br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 多线程学习笔记</title>
    <link href="/posts/43258/"/>
    <url>/posts/43258/</url>
    
    <content type="html"><![CDATA[<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><ul><li>线程就是独立的执行路径</li><li>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc 线程</li><li> main () 称之为主线程，为系统入口，用于执行整个程序</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制</li><li>线程会带来额外的开销，如 cpu 调度时间，并发控制开销</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</li></ul><h1 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h1><blockquote><p>三种创建方式</p></blockquote><p>thread class           继承 thread 类（重点）</p><p>runnable                实现 runnable 接口（重点）</p><p>callable                   实现 callable 接口（了解）</p><h2 id="thread类"><a href="#thread类" class="headerlink" title="thread类"></a>thread 类</h2><ul><li>自定义线程类继承 thread 类</li><li>重写 run () 方法，编写线程执行体</li><li>创建线程对象，调用 start () 方法启动线程 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//创建线程方式一：继承thread类，重写run()方法，调用start开启线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) {<br>            System.out.println(<span class="hljs-string">"我在看代码---"</span> + i);<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        <span class="hljs-comment">//主线程</span><br><br>        <span class="hljs-comment">//创建一个线程对象</span><br>        <span class="hljs-type">TestThread1</span> <span class="hljs-variable">testThread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread1</span>();<br><br>        <span class="hljs-comment">//调用start()方法开启线程</span><br>        testThread1.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) {<br>            System.out.println(<span class="hljs-string">"我在学习多线程---"</span> + i);<br>        }<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="多线程-通过继承thread类下载图片"><a href="#多线程-通过继承thread类下载图片" class="headerlink" title="多线程 通过继承thread类下载图片"></a>多线程 通过继承 thread 类下载图片</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//练习thread，实现多线程同步下载图片</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br><span class="hljs-keyword">private</span> String url; <span class="hljs-comment">//网络图片地址</span><br><span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//保存的文件名</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TestThread2</span> <span class="hljs-params">(String url, String name)</span> {<br><span class="hljs-built_in">this</span>.url = url;<br><span class="hljs-built_in">this</span>.name = name;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-type">WebDownloader</span> <span class="hljs-variable">webDownloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDownloader</span>();<br>webDownloader.downloader(url, name);<br>System.out.println(<span class="hljs-string">"下载了文件名为"</span> + name);<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">TestThread2</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread2</span>(<span class="hljs-string">"https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3363295869,2467511306&amp;fm=26&amp;gp=0.jpg"</span>, <span class="hljs-string">"1.jpg"</span>);<br><span class="hljs-type">TestThread2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread2</span>(<span class="hljs-string">"https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1603365312,3218205429&amp;fm=26&amp;gp=0.jpg"</span>, <span class="hljs-string">"2.jpg"</span>);<br><span class="hljs-type">TestThread2</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread2</span>(<span class="hljs-string">"https://dss2.bdstatic.com/6Ot1bjeh1BF3odCf/it/u=1736043069,1982275433&amp;fm=85&amp;app=63&amp;f=JPEG?w=121&amp;h=75&amp;s=B1A05B305030FB90A40C9CE50300F0E0"</span>, <span class="hljs-string">"3.jpg"</span>);<br><br><span class="hljs-comment">//理想情况下下载顺序为1.2.3</span><br>t1.start();<br>t2.start();<br>t3.start();<br>}<br>}<br><br><span class="hljs-comment">//下载器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDownloader</span> {<br><span class="hljs-comment">//下载方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloader</span> <span class="hljs-params">(String url, String name)</span> {<br><span class="hljs-keyword">try</span> {<br>FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name));<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">"IO异常，downloader方法出现问题"</span>);<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>实际下载顺序</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184816.png" alt="image-20210306151643332"></p><h2 id="实现runnable-接口"><a href="#实现runnable-接口" class="headerlink" title="实现runnable 接口"></a>实现 runnable 接口</h2><ul><li>定义测试类实现 runnable 接口</li><li>实现 run () 方法，编写线程执行体</li><li>创建线程对象，调用 start () 方法启动线程 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/6</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//创建线程方式2：实现runnable接口，重写run()方法，调用start开启线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-comment">//创建runnable接口的实现类对象</span><br><span class="hljs-type">TestThread3</span> <span class="hljs-variable">testThread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread3</span>();<br><br><span class="hljs-comment">//创建线程对象，通过线程对象来开启线程代理</span><br><span class="hljs-comment">//Thread thread = new Thread(testThread3);</span><br><span class="hljs-comment">//thread.start();</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testThread3).start();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) {<br>System.out.println(<span class="hljs-string">"我在学习多线程---"</span> + i);<br>}<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) {<br>System.out.println(<span class="hljs-string">"我在看代码---"</span> + i);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="多线程通过实现runnable接口下载图片"><a href="#多线程通过实现runnable接口下载图片" class="headerlink" title="多线程通过实现runnable接口下载图片"></a>多线程通过实现 runnable 接口下载图片</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//练习thread，实现多线程同步下载图片</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-keyword">private</span> String url; <span class="hljs-comment">//网络图片地址</span><br><span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//保存的文件名</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TestThread2</span> <span class="hljs-params">(String url, String name)</span> {<br><span class="hljs-built_in">this</span>.url = url;<br><span class="hljs-built_in">this</span>.name = name;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-type">WebDownloader</span> <span class="hljs-variable">webDownloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDownloader</span>();<br>webDownloader.downloader(url, name);<br>System.out.println(<span class="hljs-string">"下载了文件名为"</span> + name);<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">TestThread2</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread2</span>(<span class="hljs-string">"https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3363295869,2467511306&amp;fm=26&amp;gp=0.jpg"</span>, <span class="hljs-string">"1.jpg"</span>);<br><span class="hljs-type">TestThread2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread2</span>(<span class="hljs-string">"https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1603365312,3218205429&amp;fm=26&amp;gp=0.jpg"</span>, <span class="hljs-string">"2.jpg"</span>);<br><span class="hljs-type">TestThread2</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread2</span>(<span class="hljs-string">"https://dss2.bdstatic.com/6Ot1bjeh1BF3odCf/it/u=1736043069,1982275433&amp;fm=85&amp;app=63&amp;f=JPEG?w=121&amp;h=75&amp;s=B1A05B305030FB90A40C9CE50300F0E0"</span>, <span class="hljs-string">"3.jpg"</span>);<br><br><span class="hljs-comment">//理想情况下下载顺序为1.2.3</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t3).start();<br>}<br>}<br><br><span class="hljs-comment">//下载器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDownloader</span> {<br><span class="hljs-comment">//下载方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloader</span> <span class="hljs-params">(String url, String name)</span> {<br><span class="hljs-keyword">try</span> {<br>FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name));<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">"IO异常，downloader方法出现问题"</span>);<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="实现callable接口"><a href="#实现callable接口" class="headerlink" title="实现callable接口"></a>实现 callable 接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/7</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Boolean&gt; {<br><span class="hljs-keyword">private</span> String url; <span class="hljs-comment">//网络图片地址</span><br><span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//保存的文件名</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TestCallable</span> <span class="hljs-params">(String url, String name)</span> {<br><span class="hljs-built_in">this</span>.url = url;<br><span class="hljs-built_in">this</span>.name = name;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">call</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-type">WebDownloader</span> <span class="hljs-variable">webDownloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDownloader</span>();<br>webDownloader.downloader(url, name);<br>System.out.println(<span class="hljs-string">"下载了文件名为"</span> + name);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException {<br><span class="hljs-type">TestCallable</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestCallable</span>(<span class="hljs-string">"https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3363295869,2467511306&amp;fm=26&amp;gp=0.jpg"</span>, <span class="hljs-string">"1.jpg"</span>);<br><span class="hljs-type">TestCallable</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestCallable</span>(<span class="hljs-string">"https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1603365312,3218205429&amp;fm=26&amp;gp=0.jpg"</span>, <span class="hljs-string">"2.jpg"</span>);<br><span class="hljs-type">TestCallable</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestCallable</span>(<span class="hljs-string">"https://dss2.bdstatic.com/6Ot1bjeh1BF3odCf/it/u=1736043069,1982275433&amp;fm=85&amp;app=63&amp;f=JPEG?w=121&amp;h=75&amp;s=B1A05B305030FB90A40C9CE50300F0E0"</span>, <span class="hljs-string">"3.jpg"</span>);<br><br><span class="hljs-comment">//创建执行服务</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">//提交执行</span><br>Future&lt;Boolean&gt; r1 = ser.submit(t1);<br>Future&lt;Boolean&gt; r2 = ser.submit(t2);<br>Future&lt;Boolean&gt; r3 = ser.submit(t3);<br><br><span class="hljs-comment">//获取结果</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> r1.get();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> r2.get();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">rs3</span> <span class="hljs-operator">=</span> r3.get();<br><br>System.out.println(rs1);<br>System.out.println(rs2);<br>System.out.println(rs3);<br><br><span class="hljs-comment">//关闭服务</span><br>ser.shutdownNow();<br>}<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDownloader</span> {<br><span class="hljs-comment">//下载方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloader</span> <span class="hljs-params">(String url, String name)</span> {<br><span class="hljs-keyword">try</span> {<br>FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name));<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">"IO异常，downloader方法出现问题"</span>);<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184830.png" alt="image-20210307145021489"></p><h2 id="线程创建小结"><a href="#线程创建小结" class="headerlink" title="线程创建小结"></a>线程创建小结</h2><ul><li><p>继承 thread 类</p><ul><li>子类继承 thread 类具备多线程能力</li><li>启动线程：子类对象.start ()</li><li> 不建议使用：避免 oop 单继承的局限性</li></ul></li><li><p>实现 runnable 接口</p><ul><li>实现接口 runnable 具有多线程能力</li><li>启动线程：new thread (传入目标对象).start ()</li><li> 推荐使用：避免单继承的局限性，灵活方便，方便同一个对象被多个线程使用</li></ul></li></ul><h3 id="初始并发问题"><a href="#初始并发问题" class="headerlink" title="初始并发问题"></a>初始并发问题</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/6</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//多个线程同时操作同一个对象</span><br><span class="hljs-comment">//买火车票的例子</span><br><span class="hljs-comment">//发现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><br><span class="hljs-comment">//票数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br><span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) {<br><span class="hljs-keyword">break</span>;<br>}<br><span class="hljs-comment">//模拟延时</span><br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">200</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"--&gt;拿到了第"</span> + ticketNums-- + <span class="hljs-string">"张票"</span>);<br>}<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">TestThread4</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread4</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket, <span class="hljs-string">"小明"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket, <span class="hljs-string">"老师"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket, <span class="hljs-string">"黄牛党"</span>).start();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184835.png" alt="image-20210306180814536"></p><h3 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/6</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//模拟龟兔赛跑</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Race</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String Winner;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>            <span class="hljs-comment">//模拟睡觉</span><br><span class="hljs-keyword">if</span> (Thread.currentThread().getName().equals(<span class="hljs-string">"兔子"</span>) &amp;&amp; i == <span class="hljs-number">10</span>) {<br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">1</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br><span class="hljs-comment">//判断比赛是否结束</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> gameOver(i);<br><span class="hljs-keyword">if</span> (flag) {<br><span class="hljs-keyword">break</span>;<br>}<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"--&gt;跑了"</span> + i + <span class="hljs-string">"步"</span>);<br>}<br>}<br><br><span class="hljs-comment">//判断是否完成比赛</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">gameOver</span> <span class="hljs-params">(<span class="hljs-type">int</span> steps)</span> {<br><span class="hljs-comment">//判断是否有胜利者</span><br><span class="hljs-keyword">if</span> (Winner != <span class="hljs-literal">null</span>) {<br><span class="hljs-comment">//已经存在胜利者</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br><span class="hljs-keyword">if</span> (steps &gt;= <span class="hljs-number">100</span>) {<br>Winner = Thread.currentThread().getName();<br>System.out.println(<span class="hljs-string">"胜利者是:"</span> + Winner);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Race</span> <span class="hljs-variable">race</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Race</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(race, <span class="hljs-string">"兔子"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(race, <span class="hljs-string">"乌龟"</span>).start();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/7</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//静态代理总结</span><br><span class="hljs-comment">//真实对象和代理对象都要实现同一个接口</span><br><span class="hljs-comment">//代理对象要代理真实对象</span><br><span class="hljs-comment">//好处：1.代理对象可以做很多真实对象做不了的事情  2.真实对象专注做自己的事</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticProxy</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-type">WeddingCompany</span> <span class="hljs-variable">weddingCompany</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeddingCompany</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">You</span>());<br>      weddingCompany.Marry();<br>   }<br>}<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Marry</span> {<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">Marry</span> <span class="hljs-params">()</span>;<br>}<br><br><span class="hljs-comment">//真实</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Marry</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Marry</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"要结婚！"</span>);<br>   }<br>}<br><br><span class="hljs-comment">//代理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeddingCompany</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Marry</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Marry</span> <span class="hljs-params">()</span> {<br>      before();<br>      <span class="hljs-built_in">this</span>.target.Marry();<br>      after();<br>   }<br>   <br>   <span class="hljs-keyword">private</span> Marry target;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">WeddingCompany</span> <span class="hljs-params">(Marry target)</span> {<br>      <span class="hljs-built_in">this</span>.target = target;<br>   }<br>   <br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"结婚后"</span>);<br>   }<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span> <span class="hljs-params">()</span> {<br>      System.out.println(<span class="hljs-string">"结婚前"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li>函数式接口的定义：<ul><li>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口</li><li>对于函数式接口，我们可以通过 lambda 表达式来创建给接口的对象</li></ul></li><li>为什么需要使用 lambda 表达式：<ul><li>避免内部类定义过多</li><li>代码整洁</li><li>去掉无意义的代码，只留下核心逻辑 </li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/7</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//推导lambda表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLambda1</span> {<br><span class="hljs-comment">//3.静态内部类</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Like2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILike</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span> <span class="hljs-params">()</span> {<br>System.out.println(<span class="hljs-string">"I Like Lambda2"</span>);<br>}<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">ILike</span> <span class="hljs-variable">Like</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Like</span>();<br>Like.lambda();<br><br>Like = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Like2</span>();<br>Like.lambda();<br><br><span class="hljs-comment">//4.局部内部类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Like3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILike</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span> <span class="hljs-params">()</span> {<br>System.out.println(<span class="hljs-string">"I Like Lambda3"</span>);<br>}<br>}<br>Like = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Like3</span>();<br>Like.lambda();<br><br><span class="hljs-comment">//5.匿名内部类</span><br>Like = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ILike</span>() {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span> <span class="hljs-params">()</span> {<br>System.out.println(<span class="hljs-string">"I Like Lambda4"</span>);<br>}<br>};<br>Like.lambda();<br><br><span class="hljs-comment">//6.用lambda表达式</span><br>Like = () -&gt; System.out.println(<span class="hljs-string">"I Like Lambda5"</span>);<br>Like.lambda();<br>}<br>}<br><br><span class="hljs-comment">//1.定义一个函数式接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILike</span> {<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span> <span class="hljs-params">()</span>;<br>}<br><br><span class="hljs-comment">//2.实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Like</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILike</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lambda</span> <span class="hljs-params">()</span> {<br>System.out.println(<span class="hljs-string">"I Like Lambda"</span>);<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="lambda表达式（带参数）"><a href="#lambda表达式（带参数）" class="headerlink" title="lambda表达式（带参数）"></a>lambda 表达式（带参数）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/7</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLambda2</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      ((ILove) a -&gt; System.out.println(a)).love(<span class="hljs-number">1</span>);<br>   }<br>}<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILove</span> {<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">love</span> <span class="hljs-params">(<span class="hljs-type">int</span> a)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184936.png" alt="image-20210308201539431"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184939.png" alt="image-20210308201728340"></p><h2 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h2><ul><li>建议线程正常停止–&gt; 利用次数，不是死循环</li><li>建议使用标志位–&gt; 设置一个标志位 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/8</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//测试stop</span><br><span class="hljs-comment">//1.建议线程正常停止--&gt;利用次数，不是死循环</span><br><span class="hljs-comment">//2.建议使用标志位--&gt;设置一个标志位</span><br><span class="hljs-comment">//3.不要使用stop和destroy等过时或JDK不推荐的的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br>   <br>   <span class="hljs-comment">//设置一个标志位</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-type">TestStop</span> <span class="hljs-variable">testStop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestStop</span>();<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testStop).start();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) {<br>         System.out.println(i);<br>         <span class="hljs-keyword">if</span> (i == <span class="hljs-number">900</span>) {<br>            <span class="hljs-comment">//调用stop</span><br>            testStop.stop();<br>            System.out.println(<span class="hljs-string">"线程停止"</span>);<br>         }<br>      }<br>   }<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (flag) {<br>         System.out.println(<span class="hljs-string">"run......thread"</span> + i++);<br>      }<br>   }<br>   <br>   <span class="hljs-comment">//设置一个公开的方法停止线程，转换标志</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">false</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><ul><li>sleep (时间) 指定当前线程阻塞的毫秒数</li><li> sleep 存在异常 InterruptedException</li><li>sleep 时间达到后线程进入就绪状态</li><li> sleep 可以模仿网络延迟，倒计时等</li><li>每一个对象都有一个锁，sleep 不会释放锁</li></ul><blockquote><p>模拟倒计时</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/8</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//模拟倒计时</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSleep2</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-keyword">try</span> {<br>         tenDown();<br>      } <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>         e.printStackTrace();<br>      }<br>   }<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tenDown</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException {<br>      <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br>         Thread.sleep(<span class="hljs-number">1000</span>);<br>         System.out.println(num--);<br>         <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">break</span>;<br>         }<br>      }<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>打印当前时间</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> state;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/8</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSleep2</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-comment">//打印当前系统时间</span><br>      <span class="hljs-type">Date</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());<br>      <br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br>         <span class="hljs-keyword">try</span> {<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">"HH:mm:ss"</span>).format(startTime));<br>            <span class="hljs-comment">//更新时间</span><br>            startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());<br>         } <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>            e.printStackTrace();<br>         }<br>      }<br>   }<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tenDown</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException {<br>      <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br>         Thread.sleep(<span class="hljs-number">1000</span>);<br>         System.out.println(num--);<br>         <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">break</span>;<br>         }<br>      }<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><ul><li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让 cpu 重新调度，礼让不一定成功 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/8</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//测试礼让线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestYield</span> {<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>      <span class="hljs-type">MyYield</span> <span class="hljs-variable">myYield</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyYield</span>();<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myYield, <span class="hljs-string">"a"</span>).start();<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myYield, <span class="hljs-string">"b"</span>).start();<br>   }<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyYield</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br>      System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"开始"</span>);<br>      Thread.yield();<br>      System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"停止"</span>);<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><p>礼让成功：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184945.png" alt="image-20210308211529467"></p><p>礼让失败：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184946.png" alt="image-20210308211517419"></p><h2 id="线程join"><a href="#线程join" class="headerlink" title="线程join"></a>线程 join</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/8</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//测试join方法    插队</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJoin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) {<br>         System.out.println(<span class="hljs-string">"vip"</span> + i);<br>      }<br>   }<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException {<br>      <span class="hljs-type">TestJoin</span> <span class="hljs-variable">testJoin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestJoin</span>();<br>      <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testJoin);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) {<br>         <span class="hljs-keyword">if</span> (i == <span class="hljs-number">200</span>) {<br>            thread.start();<br>            thread.join();<br>         }<br>         System.out.println(<span class="hljs-string">"main"</span> + i);<br>      }<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="观测线程状态"><a href="#观测线程状态" class="headerlink" title="观测线程状态"></a>观测线程状态</h1><ul><li>线程结束不能再启动 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestState</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException {<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {<br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br>System.out.println(<span class="hljs-string">"666"</span>);<br>});<br><br><span class="hljs-comment">//观察状态</span><br>Thread.<span class="hljs-type">State</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> thread.getState();<br>System.out.println(state);<br><br><span class="hljs-comment">//观察启动后</span><br>thread.start();<br>state = thread.getState();<br>System.out.println(state);<br><br><span class="hljs-keyword">while</span> (state != Thread.State.TERMINATED) {<br><span class="hljs-comment">//只要线程不终止，一直输出状态</span><br>Thread.sleep(<span class="hljs-number">100</span>);<br>state = thread.getState();<span class="hljs-comment">//更新线程状态</span><br>System.out.println(state);<span class="hljs-comment">//输出状态</span><br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h1 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h1><ul><li>Java 提供 — 个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</li><li>线程的优先级用数字表示，范围从 1-10.<ul><li>Thread. MIN_PRIORITY= 1</li><li>Thread.MAX_PRIORITY= 10</li><li>Thread.NORM_PRIORITy=5</li></ul></li><li> 使用以下方式改变或获取优先级<ul><li> getPriority()   setPriority(int xxx)</li></ul></li></ul><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕，如：后台记录操作日志，监控内存，垃圾回收等待。。。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> state;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/9</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//测试守护线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDaemon</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">God</span> <span class="hljs-variable">god</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">God</span>();<br><span class="hljs-type">You</span> <span class="hljs-variable">you</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">You</span>();<br><br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(god);<br>thread.setDaemon(<span class="hljs-literal">true</span>); <span class="hljs-comment">//守护线程，默认false表示用户线程</span><br>thread.start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(you).start();<span class="hljs-comment">//用户线程</span><br>}<br>}<br><br><span class="hljs-comment">//守护线程类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">God</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br>System.out.println(<span class="hljs-string">"守护"</span>);<br>}<br>}<br>}<br><br><span class="hljs-comment">//用户线程类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36500</span>; i++) {<br>System.out.println(<span class="hljs-string">"开心"</span>);<br>}<br>System.out.println(<span class="hljs-string">"Goodbye,world!"</span>);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><ul><li>形成条件：队列 + 锁</li><li>锁机制：synchronized</li></ul><h2 id="不安全的案例"><a href="#不安全的案例" class="headerlink" title="不安全的案例"></a>不安全的案例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> syn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/9</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//不安全的买票</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeBuyTicket</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">BuyTicket</span> <span class="hljs-variable">station</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuyTicket</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station, <span class="hljs-string">"苦逼的我"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station, <span class="hljs-string">"牛逼的你"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station, <span class="hljs-string">"黄牛党"</span>).start();<br>}<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuyTicket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-comment">//票</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-comment">//买票</span><br><span class="hljs-keyword">while</span> (flag) {<br><span class="hljs-keyword">try</span> {<br>buy();<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br>}<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException {<br><span class="hljs-comment">//判断是否有票</span><br><span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) {<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-comment">//模拟延迟</span><br>Thread.sleep(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//买票</span><br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"拿到"</span> + ticketNums--);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>输出结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184952.png" alt="image-20210320214859681"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> syn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//不安全的取钱</span><br><span class="hljs-comment">//两个人取银行取钱，账户</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeBank</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-comment">//账户</span><br><span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">100</span>, <span class="hljs-string">"结婚基金"</span>);<br><span class="hljs-type">Drawing</span> <span class="hljs-variable">you</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account, <span class="hljs-number">50</span>, <span class="hljs-string">"你"</span>);<br><span class="hljs-type">Drawing</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account, <span class="hljs-number">100</span>, <span class="hljs-string">"女孩"</span>);<br>you.start();<br>girl.start();<br>}<br>}<br><br><span class="hljs-comment">//账户</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> {<br><span class="hljs-type">int</span> money;<br>String name;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span> <span class="hljs-params">(<span class="hljs-type">int</span> money, String name)</span> {<br><span class="hljs-built_in">this</span>.money = money;<br><span class="hljs-built_in">this</span>.name = name;<br>}<br>}<br><br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br><span class="hljs-comment">//账户</span><br>Account account;<br><span class="hljs-comment">//取了多少钱</span><br><span class="hljs-type">int</span> drawingMoney;<br><span class="hljs-comment">//现在手里有多少钱</span><br><span class="hljs-type">int</span> nowMoney;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Drawing</span> <span class="hljs-params">(Account account, <span class="hljs-type">int</span> drawingMoney, String name)</span> {<br><span class="hljs-built_in">super</span>(name);<br><span class="hljs-built_in">this</span>.account = account;<br><span class="hljs-built_in">this</span>.drawingMoney = drawingMoney;<br>}<br><br><span class="hljs-comment">//取钱</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">if</span> (account.money - drawingMoney &lt; <span class="hljs-number">0</span>) {<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"钱不够，取不了"</span>);<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br><span class="hljs-comment">//卡内余额</span><br>account.money = account.money - drawingMoney;<br><span class="hljs-comment">//你手里的钱</span><br>nowMoney = nowMoney + drawingMoney;<br><br>System.out.println(account.name + <span class="hljs-string">"余额为："</span> + account.money);<br>System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">"手里的钱："</span> + nowMoney);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>输出结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184956.png" alt="image-20210320214937951"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> syn;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//线程不安全的集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeList</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {<br>list.add(Thread.currentThread().getName());<br>}).start();<br>}<br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>System.out.println(list.size());<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>输出结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430184958.png" alt="image-20210320215017646"></p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><ul><li><p>synchronized 关键字，包括两种用法：synchronized 方法 和 synchronized 块</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> args)</span>{} <span class="hljs-comment">//同步方法</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>synchronized 方法控制对” 对象 “的访问，每个对象对应着一把锁 ，每个 synchronized 方法都必须获得调用该方法的对象的锁才能执行，否则线程阻塞，方法一旦执行，就会独占该锁，知道方法返回菜释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p><p>缺陷：若将一个大的方法声明为 synchronized 将会影响效率</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> syn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/9</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//不安全的买票</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeBuyTicket</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">BuyTicket</span> <span class="hljs-variable">station</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuyTicket</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station, <span class="hljs-string">"苦逼的我"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station, <span class="hljs-string">"牛逼的你"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station, <span class="hljs-string">"黄牛党"</span>).start();<br>}<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuyTicket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-comment">//票</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-comment">//买票</span><br><span class="hljs-keyword">while</span> (flag) {<br><span class="hljs-keyword">try</span> {<br>buy();<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br>}<br><br><span class="hljs-comment">//synchronized 同步方法，锁的是this</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException {<br><span class="hljs-comment">//判断是否有票</span><br><span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) {<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-comment">//模拟延迟</span><br>Thread.sleep(<span class="hljs-number">500</span>);<br><span class="hljs-comment">//买票</span><br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"拿到"</span> + ticketNums--);<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185001.png" alt="image-20210321122211482"></p><h2 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h2><ul><li>同步块：synchronized（obj）{}</li><li>obj 称之为 ** 同步监视器 **(一定是要增删改查的对象)<ul><li>obj 可以是任何对象，但是推荐使用共享资源作为同步监视器</li><li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是 this，就是这个对象本身，或者是 class</li></ul></li><li> 同步监视器的执行过程<ol><li>第一个线程访问，锁定同步监视器，执行其中的代码</li><li>第二个线程访问，发现同步监视器被锁定，无法访问</li><li>第一个线程访问完毕，解锁同步监视器</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问 </li></ol></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> syn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/20</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//不安全的取钱</span><br><span class="hljs-comment">//两个人取银行取钱，账户</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeBank</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-comment">//账户</span><br><span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">100</span>, <span class="hljs-string">"结婚基金"</span>);<br><span class="hljs-type">Drawing</span> <span class="hljs-variable">you</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account, <span class="hljs-number">50</span>, <span class="hljs-string">"你"</span>);<br><span class="hljs-type">Drawing</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account, <span class="hljs-number">100</span>, <span class="hljs-string">"女孩"</span>);<br>you.start();<br>girl.start();<br>}<br>}<br><br><span class="hljs-comment">//账户</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> {<br><span class="hljs-type">int</span> money;<br>String name;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span> <span class="hljs-params">(<span class="hljs-type">int</span> money, String name)</span> {<br><span class="hljs-built_in">this</span>.money = money;<br><span class="hljs-built_in">this</span>.name = name;<br>}<br>}<br><br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br><span class="hljs-comment">//账户</span><br>Account account;<br><span class="hljs-comment">//取了多少钱</span><br><span class="hljs-type">int</span> drawingMoney;<br><span class="hljs-comment">//现在手里有多少钱</span><br><span class="hljs-type">int</span> nowMoney;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Drawing</span> <span class="hljs-params">(Account account, <span class="hljs-type">int</span> drawingMoney, String name)</span> {<br><span class="hljs-built_in">super</span>(name);<br><span class="hljs-built_in">this</span>.account = account;<br><span class="hljs-built_in">this</span>.drawingMoney = drawingMoney;<br>}<br><br><span class="hljs-comment">//取钱</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">synchronized</span> (account) {<br><span class="hljs-keyword">if</span> (account.money - drawingMoney &lt; <span class="hljs-number">0</span>) {<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">"钱不够，取不了"</span>);<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br><span class="hljs-comment">//卡内余额</span><br>account.money = account.money - drawingMoney;<br><span class="hljs-comment">//你手里的钱</span><br>nowMoney = nowMoney + drawingMoney;<br><br>System.out.println(account.name + <span class="hljs-string">"余额为："</span> + account.money);<br>System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">"手里的钱："</span> + nowMoney);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185004.png" alt="image-20210321122248004"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> syn;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//线程不安全的集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeList</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {<br><span class="hljs-keyword">synchronized</span> (list) {<br>list.add(Thread.currentThread().getName());<br>}<br>}).start();<br>}<br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">300</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>System.out.println(list.size());<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185007.png" alt="image-20210321122359004"></p><h2 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h2><ul><li>JUC 是安全类型集合 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> syn;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//测试JUC安全类型的集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJUC</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>CopyOnWriteArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {<br>list.add(Thread.currentThread().getName());<br>}).start();<br>}<br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>System.out.println(list.size());<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185010.png" alt="image-20210321123000746"></p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><ul><li><p>产生死锁的四个必要条件：</p><ol><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对以获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol></li><li><p>死锁，多个线程互相抱着对方需要的资源，形成僵持</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Lock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Makeup</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Makeup</span>(<span class="hljs-number">0</span>, <span class="hljs-string">"灰姑娘"</span>);<br><span class="hljs-type">Makeup</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Makeup</span>(<span class="hljs-number">1</span>, <span class="hljs-string">"白雪公主"</span>);<br><br>g1.start();<br>g2.start();<br>}<br>}<br><br><span class="hljs-comment">//口红</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lipstick</span> {<br><br>}<br><br><span class="hljs-comment">//镜子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mirror</span> {<br><br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Makeup</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br><span class="hljs-comment">//需要资源用static保证只有一份</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">Lipstick</span> <span class="hljs-variable">lipstick</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lipstick</span>();<br><span class="hljs-keyword">static</span> <span class="hljs-type">Mirror</span> <span class="hljs-variable">mirror</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mirror</span>();<br><br><span class="hljs-type">int</span> choice;<span class="hljs-comment">//选择</span><br>String girlName;<span class="hljs-comment">//使用的人</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Makeup</span> <span class="hljs-params">(<span class="hljs-type">int</span> choice, String girlName)</span> {<br><span class="hljs-built_in">this</span>.choice = choice;<br><span class="hljs-built_in">this</span>.girlName = girlName;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-comment">//化妆</span><br><span class="hljs-keyword">try</span> {<br>makeup();<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeup</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException {<br><span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>) {<br><span class="hljs-keyword">synchronized</span> (lipstick) {<br>System.out.println(<span class="hljs-built_in">this</span>.girlName + <span class="hljs-string">"获得口红的锁"</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">synchronized</span> (mirror) {<br>System.out.println(<span class="hljs-built_in">this</span>.girlName + <span class="hljs-string">"获得镜子的锁"</span>);<br>}<br>}<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-keyword">synchronized</span> (mirror) {<br>System.out.println(<span class="hljs-built_in">this</span>.girlName + <span class="hljs-string">"获得镜子的锁"</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">synchronized</span> (lipstick) {<br>System.out.println(<span class="hljs-built_in">this</span>.girlName + <span class="hljs-string">"获得口红的锁"</span>);<br>}<br>}<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>程序卡死：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185013.png" alt="image-20210321125532165"></p><p>消除死锁后：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Lock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//死锁，多个线程互相抱着对方需要的资源，形成僵持</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Makeup</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Makeup</span>(<span class="hljs-number">0</span>, <span class="hljs-string">"灰姑娘"</span>);<br><span class="hljs-type">Makeup</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Makeup</span>(<span class="hljs-number">1</span>, <span class="hljs-string">"白雪公主"</span>);<br><br>g1.start();<br>g2.start();<br>}<br>}<br><br><span class="hljs-comment">//口红</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lipstick</span> {<br><br>}<br><br><span class="hljs-comment">//镜子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mirror</span> {<br><br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Makeup</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br><span class="hljs-comment">//需要资源用static保证只有一份</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">Lipstick</span> <span class="hljs-variable">lipstick</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lipstick</span>();<br><span class="hljs-keyword">static</span> <span class="hljs-type">Mirror</span> <span class="hljs-variable">mirror</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mirror</span>();<br><br><span class="hljs-type">int</span> choice;<span class="hljs-comment">//选择</span><br>String girlName;<span class="hljs-comment">//使用的人</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Makeup</span> <span class="hljs-params">(<span class="hljs-type">int</span> choice, String girlName)</span> {<br><span class="hljs-built_in">this</span>.choice = choice;<br><span class="hljs-built_in">this</span>.girlName = girlName;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-comment">//化妆</span><br><span class="hljs-keyword">try</span> {<br>makeup();<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeup</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException {<br><span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>) {<br><span class="hljs-keyword">synchronized</span> (lipstick) {<br>System.out.println(<span class="hljs-built_in">this</span>.girlName + <span class="hljs-string">"获得口红的锁"</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>}<br><span class="hljs-keyword">synchronized</span> (mirror) {<br>System.out.println(<span class="hljs-built_in">this</span>.girlName + <span class="hljs-string">"获得镜子的锁"</span>);<br>}<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-keyword">synchronized</span> (mirror) {<br>System.out.println(<span class="hljs-built_in">this</span>.girlName + <span class="hljs-string">"获得镜子的锁"</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>}<br><span class="hljs-keyword">synchronized</span> (lipstick) {<br>System.out.println(<span class="hljs-built_in">this</span>.girlName + <span class="hljs-string">"获得口红的锁"</span>);<br>}<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185019.png" alt="image-20210321125708083"></p><h1 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a>lock 锁</h1><ul><li>lock 锁是显示锁，需要手动开启关闭 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Lock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLock</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">testlock2</span> <span class="hljs-variable">testlock2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">testlock2</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testlock2, <span class="hljs-string">"一"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testlock2, <span class="hljs-string">"二"</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testlock2, <span class="hljs-string">"三"</span>).start();<br>}<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">testlock2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {<br><span class="hljs-type">int</span> <span class="hljs-variable">ticketNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-comment">//定义lock锁</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br><span class="hljs-meta">@Override</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br><span class="hljs-keyword">try</span> {<br>lock.lock();<span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">if</span> (ticketNumber &gt; <span class="hljs-number">0</span>) {<br><span class="hljs-keyword">try</span> {<br>Thread.sleep(<span class="hljs-number">100</span>);<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>System.out.println(Thread.currentThread().getName() + ticketNumber--);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-keyword">break</span>;<br>}<br>} <span class="hljs-keyword">finally</span> {<br>lock.unlock();<br>}<br><br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h1 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h1><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><ul><li>是一个线程同步的问题，生产者和消费者共享一个资源，并且生产者和消费者之间相互依赖，互为条件</li><li>在生产者消费者问题中，仅有 synchronized 是不够的<ul><li> synchronized 可阻止并发更新同一个共享资源，实现了同步</li><li> synchronized 不能用来实现不同线程之间的信息传递（通信）</li></ul></li><li>Java 提供了几个方法解决这类问题：<ul><li>wait（） 表示线程一直等待，知道其他线程通知，与 sleep（）不同，会释放锁</li><li> wait（long timeout） 指定等待的毫秒数</li><li> notify（） 唤醒一个处于等待状态的线程</li><li> notifyAll（）唤醒同一个对象上所有调用 wait（）方法的线程，优先级别高的线程优先调度</li></ul></li></ul><h2 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Lock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//测试：生产者消费者模型--&gt;利用缓冲区解决：管程法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPC</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">SynContainer</span> <span class="hljs-variable">container</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynContainer</span>();<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(container).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(container).start();<br>}<br>}<br><br><span class="hljs-comment">//生产者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br>SynContainer container;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span> <span class="hljs-params">(SynContainer container)</span> {<br><span class="hljs-built_in">this</span>.container = container;<br>}<br><br><span class="hljs-comment">//生产</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) {<br>System.out.println(<span class="hljs-string">"生产了"</span> + i + <span class="hljs-string">"只鸡"</span>);<br>container.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Chicken</span>(i));<br>}<br>}<br>}<br><br><span class="hljs-comment">//消费者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br>SynContainer container;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span> <span class="hljs-params">(SynContainer container)</span> {<br><span class="hljs-built_in">this</span>.container = container;<br>}<br><br><span class="hljs-comment">//消费</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) {<br>System.out.println(<span class="hljs-string">"消费了--》"</span> + container.pop().id + <span class="hljs-string">"只鸡"</span>);<br>}<br>}<br>}<br><br><span class="hljs-comment">//产品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chicken</span> {<br><span class="hljs-type">int</span> id;<span class="hljs-comment">//产品编号</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Chicken</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span> {<br><span class="hljs-built_in">this</span>.id = id;<br>}<br>}<br><br><span class="hljs-comment">//缓冲区</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SynContainer</span> {<br><span class="hljs-comment">//需要一个容器</span><br>Chicken[] chickens = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chicken</span>[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//容器计数器</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//生产者放入产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span> <span class="hljs-params">(Chicken chicken)</span> {<br><span class="hljs-comment">//如果容器满了，就需要等待消费者消费</span><br><span class="hljs-keyword">while</span> (count == chickens.length) {<br><span class="hljs-comment">//通知消费者消费，生产等待</span><br><span class="hljs-keyword">try</span> {<br><span class="hljs-built_in">this</span>.wait();<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br><span class="hljs-comment">//如果没有满，就要丢入产品</span><br>chickens[count] = chicken;<br>count++;<br><span class="hljs-built_in">this</span>.notifyAll();<br>}<br><br><span class="hljs-comment">//消费者消费产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Chicken <span class="hljs-title function_">pop</span> <span class="hljs-params">()</span> {<br><span class="hljs-comment">//判断能否消费</span><br><span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>) {<br><span class="hljs-comment">//等待生产者生产</span><br><span class="hljs-keyword">try</span> {<br><span class="hljs-built_in">this</span>.wait();<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br><span class="hljs-comment">//如果可以消费</span><br>count--;<br><span class="hljs-type">Chicken</span> <span class="hljs-variable">chicken</span> <span class="hljs-operator">=</span> chickens[count];<br><br><span class="hljs-built_in">this</span>.notifyAll();<br><span class="hljs-comment">//吃完了，通知生产者</span><br><span class="hljs-keyword">return</span> chicken;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185026.png" alt="image-20210321182801279"></p><h2 id="标志法"><a href="#标志法" class="headerlink" title="标志法"></a>标志法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Lock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPC2</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">tv</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">tv</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">player</span>(tv).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">watcher</span>(tv).start();<br>}<br>}<br><br><span class="hljs-comment">//生产者--》演员</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">player</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br>tv tv;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">player</span> <span class="hljs-params">(tv tv)</span> {<br><span class="hljs-built_in">this</span>.tv = tv;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) {<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {<br>tv.play(<span class="hljs-string">"快乐大本营"</span>);<br>} <span class="hljs-keyword">else</span> {<br>tv.play(<span class="hljs-string">"英雄联盟"</span>);<br>}<br>}<br>}<br>}<br><br><span class="hljs-comment">//消费者--》观众</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">watcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {<br>tv tv;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">watcher</span> <span class="hljs-params">(tv tv)</span> {<br><span class="hljs-built_in">this</span>.tv = tv;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) {<br>tv.watch();<br>}<br>}<br>}<br><br><span class="hljs-comment">//产品--》电影</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tv</span> {<br><span class="hljs-comment">//演员表演，观众等待 t</span><br><span class="hljs-comment">//观众观看，演员等待 f</span><br>String voice;<span class="hljs-comment">//表演的节目</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//表演</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span> <span class="hljs-params">(String voice)</span> {<br><span class="hljs-keyword">if</span> (!flag) {<br><span class="hljs-keyword">try</span> {<br><span class="hljs-built_in">this</span>.wait();<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br>System.out.println(<span class="hljs-string">"演员表演了："</span> + voice);<br><span class="hljs-comment">//通知观众观看</span><br><span class="hljs-built_in">this</span>.notifyAll();<br><span class="hljs-built_in">this</span>.voice = voice;<br><span class="hljs-built_in">this</span>.flag = !<span class="hljs-built_in">this</span>.flag;<br>}<br><br><span class="hljs-comment">//观看</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watch</span> <span class="hljs-params">()</span> {<br><span class="hljs-keyword">if</span> (flag) {<br><span class="hljs-keyword">try</span> {<br><span class="hljs-built_in">this</span>.wait();<br>} <span class="hljs-keyword">catch</span> (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br>System.out.println(<span class="hljs-string">"观众观看了："</span> + voice);<br><span class="hljs-comment">//通知演员表演</span><br><span class="hljs-built_in">this</span>.notifyAll();<br><span class="hljs-built_in">this</span>.flag = !<span class="hljs-built_in">this</span>.flag;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185028.png" alt="image-20210321182722741"></p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h2><ul><li>经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</li><li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</li><li>好处：<ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中的线程，不需要每次都创建）</li><li>便于线程管理<ul><li> corePoolSize：核心池的大小</li><li> maximumPoolSize：最大线程数</li><li> keepAliveTime：线程没有任务时最多保持多长时间后会终止 </li></ul></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/3/7</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Boolean&gt; {<br><span class="hljs-keyword">private</span> String url; <span class="hljs-comment">//网络图片地址</span><br><span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//保存的文件名</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TestCallable</span> <span class="hljs-params">(String url, String name)</span> {<br><span class="hljs-built_in">this</span>.url = url;<br><span class="hljs-built_in">this</span>.name = name;<br>}<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">call</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {<br><span class="hljs-type">WebDownloader</span> <span class="hljs-variable">webDownloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDownloader</span>();<br>webDownloader.downloader(url, name);<br>System.out.println(<span class="hljs-string">"下载了文件名为"</span> + name);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException {<br><span class="hljs-type">TestCallable</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestCallable</span>(<span class="hljs-string">"https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3363295869,2467511306&amp;fm=26&amp;gp=0.jpg"</span>, <span class="hljs-string">"1.jpg"</span>);<br><span class="hljs-type">TestCallable</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestCallable</span>(<span class="hljs-string">"https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1603365312,3218205429&amp;fm=26&amp;gp=0.jpg"</span>, <span class="hljs-string">"2.jpg"</span>);<br><span class="hljs-type">TestCallable</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestCallable</span>(<span class="hljs-string">"https://dss2.bdstatic.com/6Ot1bjeh1BF3odCf/it/u=1736043069,1982275433&amp;fm=85&amp;app=63&amp;f=JPEG?w=121&amp;h=75&amp;s=B1A05B305030FB90A40C9CE50300F0E0"</span>, <span class="hljs-string">"3.jpg"</span>);<br><br><span class="hljs-comment">//创建执行服务</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">//提交执行</span><br>Future&lt;Boolean&gt; r1 = ser.submit(t1);<br>Future&lt;Boolean&gt; r2 = ser.submit(t2);<br>Future&lt;Boolean&gt; r3 = ser.submit(t3);<br><br><span class="hljs-comment">//获取结果</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> r1.get();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> r2.get();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">rs3</span> <span class="hljs-operator">=</span> r3.get();<br><br>System.out.println(rs1);<br>System.out.println(rs2);<br>System.out.println(rs3);<br><br><span class="hljs-comment">//关闭服务</span><br>ser.shutdownNow();<br>}<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDownloader</span> {<br><span class="hljs-comment">//下载方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloader</span> <span class="hljs-params">(String url, String name)</span> {<br><span class="hljs-keyword">try</span> {<br>FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name));<br>} <span class="hljs-keyword">catch</span> (IOException e) {<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">"IO异常，downloader方法出现问题"</span>);<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185032.png" alt="image-20210321213428366"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 学习笔记</title>
    <link href="/posts/39805/"/>
    <url>/posts/39805/</url>
    
    <content type="html"><![CDATA[<h1 id="初识数据库"><a href="#初识数据库" class="headerlink" title="初识数据库"></a>初识数据库</h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p><strong>DB</strong>        database        数据库</p><p><strong>DBS</strong>        database system        数据库系统</p><p><strong>DBMS</strong>        database management system        数据库管理系统</p><p><strong>SQL</strong>        结构化查询语言，用于和 DBMS 通信的语言</p><h2 id="数据库的好处"><a href="#数据库的好处" class="headerlink" title="数据库的好处"></a>数据库的好处</h2><ol><li>持久化数据到本地</li><li>可以实现结构化查询，方便管理</li></ol><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><p>保存有组织的数据的容器（通常是一个文件或一组文件）</p><p>数据库是一个以某种有组织的方式存储数据的集合</p><p>数据库不是数据库软件</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>命令行链接</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--所有的语句都使用分号（;）结尾</span><br>mysql <span class="hljs-operator">-</span>u <span class="hljs-operator">-</span>p  <span class="hljs-comment">--链接数据库</span><br><br><span class="hljs-keyword">show</span> databases; <span class="hljs-comment">--查看所有的数据库</span><br><br>mysql<span class="hljs-operator">&gt;</span> use 数据库名; <span class="hljs-comment">--切换数据库use</span><br>Database changed<br><br><span class="hljs-keyword">show</span> tables; <span class="hljs-comment">--查看数据库中所有的表</span><br><br><span class="hljs-keyword">describe</span> 表名; <span class="hljs-comment">--显示数据库中所有的表的信息</span><br><br><span class="hljs-keyword">create</span> database 数据库名; <span class="hljs-comment">--创建一个新的数据库</span><br><br>exit; <span class="hljs-comment">--退出连接</span><br><br><span class="hljs-comment">--单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多</span><br><span class="hljs-comment">行</span><br><span class="hljs-comment">注</span><br><span class="hljs-comment">释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a>数据库语言</h2><p>DDL    定义</p><p>DML    操作</p><p>DQL    查询</p><p>DCL    控制</p><h1 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h1><p>操作数据库 &gt; 操作数据库中的表 &gt; 操作数据库中表的数据</p><h2 id="操作数据库-1"><a href="#操作数据库-1" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database [if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>] 数据库名 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_general_ci;<br></code></pre></td></tr></tbody></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database  [if <span class="hljs-keyword">exists</span>] 数据库名;<br></code></pre></td></tr></tbody></table></figure><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 如果使用的表名或者字段名是一个关键字，需要带``</span><br>use 数据库名;<br></code></pre></td></tr></tbody></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases; <span class="hljs-comment">-- 查看所有的数据库</span><br></code></pre></td></tr></tbody></table></figure><p><strong>学习思路</strong>：</p><ul><li>对照可视化查看 sql 语句</li><li>固定的语法或关键字要强行记住</li></ul><h2 id="数据库的数据类型"><a href="#数据库的数据类型" class="headerlink" title="数据库的数据类型"></a>数据库的数据类型</h2><blockquote><p>数值</p></blockquote><ul><li>tinyint          十分小的数据         1 字节</li><li> smallint        较小的数据            2 字节</li><li> mediumint   中等大小的数据    3 字节</li><li><strong> int                  标准的整数           4 字节</strong></li><li> bigint             较大的数据            8 字节</li><li> float               浮点数                    4 字节</li><li> double          浮点数                    8 字节 (精度问题！！)</li><li>decimal         字符串形式的浮点数       金融计算的时候，一般使用</li></ul><blockquote><p>字符串</p></blockquote><ul><li>char               字符串固定大小的        0~255</li><li><strong>varchar          可变字符串                    0~65536      常用的变量 string</strong></li><li>tinytext           微型文本                      2^8-1</li><li><strong>text                  文本串                          2^16-1       保存大文本</strong></li></ul><blockquote><p>时间日期</p></blockquote><ul><li>date                    YYYY-MM-DD        日期格式</li><li> time                   HH:mm:ss              时间格式</li><li><strong> datetime          YYYY-MM-DD  HH:mm:ss  最常用的时间格式</strong></li><li><strong> timestamp       时间戳            1979.1.1 到现在的毫秒数</strong></li><li> year                     年份表示</li></ul><blockquote><p>null</p></blockquote><ul><li>没有值，未知</li><li><strong>注意不要使用 null 进行运算，结果为 null</strong></li></ul><h2 id="数据库的字段属性（重点）"><a href="#数据库的字段属性（重点）" class="headerlink" title="数据库的字段属性（重点）"></a>数据库的字段属性（重点）</h2><p>Unsigned :</p><ul><li>无符号的整数</li><li>不能声明为负数</li></ul><p>zerofill :</p><ul><li>0 填充，不足的位数用 0 填充</li></ul><p>自增 ：</p><ul><li>自动在上一条记录的基础上 + 1（默认）</li><li>通常用来设计唯一的主键，index，必须为整数类型</li><li>可以自定义设计主键自增的起始值和步长</li></ul><p>非空：</p><ul><li>假设设置为 not null，如果不给它赋值，就会报错</li></ul><p>空 NULL：</p><ul><li>如果不填写值，默认就是 null</li></ul><p>默认 default：</p><ul><li>设置默认的值</li><li> sex，默认值为<strong>男</strong>，如果不指定该列的值，则会有默认值。</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">每一个表都必须存在以下五个字段，做项目时确认数据存在的意义</span><br><span class="hljs-comment">id 主键</span><br><span class="hljs-comment">'version'乐观锁</span><br><span class="hljs-comment">is_delete伪删除</span><br><span class="hljs-comment">gmt_create创建时间</span><br><span class="hljs-comment">gmt_update修改时间</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><h2 id="创建数据库表（重点）"><a href="#创建数据库表（重点）" class="headerlink" title="创建数据库表（重点）"></a>创建数据库表（重点）</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">目标：创建一个 school数据库</span><br><span class="hljs-comment">创建学生表（列，字段）使用SQL创建</span><br><span class="hljs-comment">学号int 登录密码 varchar（20）姓名，性别 varchar（2），出生日期（datetime），家庭住址，email</span><br><span class="hljs-comment">注意点，使用英文（），表的名称 和 字段尽量使用``括起来</span><br><span class="hljs-comment">AUTO INCREMENT自增</span><br><span class="hljs-comment">字符串使用单引号括起来！</span><br><span class="hljs-comment">所有的语句后面加,（英文的）,最后一个不用加</span><br><span class="hljs-comment">*/</span><br>USE test;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `student`<br>(<br>    `id`       <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'学号'</span>,<br>    `name`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'匿名'</span> COMMENT <span class="hljs-string">'姓名'</span>,<br>    `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'123456'</span> COMMENT <span class="hljs-string">'密码'</span>,<br>    `sex`      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">3</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'女'</span> COMMENT <span class="hljs-string">'性别'</span>,<br>    `birthday` DATETIME             <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'出生日期'</span>,<br>    `address`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)         <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'家庭住址'</span>,<br>    `email`    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)          <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'邮箱'</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE <span class="hljs-operator">=</span> innodb<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></tbody></table></figure><p>格式</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] `表名`(<br>    `字段名` 列类型 [属性][索引][注释],<br>    `字段名` 列类型 [属性][索引][注释],<br>    `字段名` 列类型 [属性][索引][注释],<br>    ......<br>    `字段名` 列类型 [属性][索引][注释],<br>    主键(`字段名`)<br>)[表类型][字符集设置][注释]<br></code></pre></td></tr></tbody></table></figure><p>常用语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE 数据库名; <span class="hljs-comment">-- 查看创建数据库的语句</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名; <span class="hljs-comment">-- 查看数据表的定义语句</span><br><span class="hljs-keyword">DESC</span> 表名;<span class="hljs-comment">-- 显示表的结构</span><br></code></pre></td></tr></tbody></table></figure><h2 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 关于数据库引擎</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">innodb  默认使用</span><br><span class="hljs-comment">MYISAM  早些年使用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th></th><th>innodb</th><th>MYISAM</th></tr></thead><tbody><tr><td> 事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>不支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约两倍</td></tr></tbody></table><p>常规使用操作：</p><ul><li>MYISAM 节约空间，速度较快</li><li> innodb 安全性高，事务的处理，多表多用户操作</li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有的数据库文件都存在 data 目录下，一个文件夹对应一个数据库</p><p>本质还是文件的存储！</p><p>MySQL 引擎在物理文件上的区别</p><ul><li>innodb 在数据库表中只有一个 *.frm 文件，以及上级目录下的 ibdata1 文件</li><li> MYISAM 对应的文件<ul><li> *.frm    表结构定义的文件</li><li> *.MYD    数据文件</li><li> *.MYI     索引文件</li></ul></li></ul><blockquote><p>设置数据库的字符集编码</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></tbody></table></figure><p>若不设置，会是 mysql 默认的字符集（不支持中文）</p><p>MySQL 的默认编码时 Latin1</p><h2 id="修改删除表"><a href="#修改删除表" class="headerlink" title="修改删除表"></a>修改删除表</h2><blockquote><p>修改</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改表名     ALTER TABLE 旧表名 RENAME AS 新表名;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student RENAME <span class="hljs-keyword">AS</span> xuesheng;<br><span class="hljs-comment">-- 增加表的字段       ALTER TABLE 表名 ADD `字段名` 列属性;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> xuesheng<br>    <span class="hljs-keyword">ADD</span> `age` <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>);<br><span class="hljs-comment">-- 修改表的字段     </span><br><span class="hljs-comment">-- ALTER TABLE 表名 MODIFY `字段名` 列属性;   </span><br><span class="hljs-comment">-- ALTER TABLE 表名 CHANGE `旧字段名` `新字段名` 列属性;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> xuesheng<br>    MODIFY `age` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">-- modify修改约束,不用修改新名称</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> xuesheng<br>    CHANGE `age` `nianling` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">-- change修改约束需要先重命名</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>删除</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除表的字段       ALTER TABLE 表名 DROP `字段名`;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> xuesheng <span class="hljs-keyword">DROP</span> `nianling`;<br><span class="hljs-comment">-- 删除表（如果存在再删除）DROP TABLE IF EXISTS 表名;</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> xuesheng;<br></code></pre></td></tr></tbody></table></figure><p>注意点：</p><ul><li>所有的创建和删除操作尽量加上判断，以免报错。</li></ul><h1 id="MySQL的数据管理"><a href="#MySQL的数据管理" class="headerlink" title="MySQL的数据管理"></a>MySQL 的数据管理</h1><h2 id="外键（了解）"><a href="#外键（了解）" class="headerlink" title="外键（了解）"></a>外键（了解）</h2><blockquote><p>方式 1，在建表的时候，增加约束</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 学生表的gradeid字段要去引用年级表的gradeid字段</span><br><span class="hljs-comment">-- 定义外键key</span><br><span class="hljs-comment">-- 给这个外键添加约束（执行引用），references 引用</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `grade`<br>(<br>    `gradeid`   <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'年级id'</span>,<br>    `gradename` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'年纪名称'</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`gradeid`)<br>) ENGINE <span class="hljs-operator">=</span> innodb,<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `student`<br>(<br>    `id`       <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'学号'</span>,<br>    `name`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'匿名'</span> COMMENT <span class="hljs-string">'姓名'</span>,<br>    `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'123456'</span> COMMENT <span class="hljs-string">'密码'</span>,<br>    `sex`      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">3</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'女'</span> COMMENT <span class="hljs-string">'性别'</span>,<br>    `birthday` DATETIME             <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'出生日期'</span>,<br>    `gradeid`  <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'年级id'</span>,<br>    `address`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)         <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'家庭住址'</span>,<br>    `email`    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)          <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'邮箱'</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>    KEY `fk_gradeid` (`gradeid`),<br>    <span class="hljs-keyword">CONSTRAINT</span><br>        `fk_gradeid` <span class="hljs-keyword">FOREIGN</span> KEY (`gradeid`) <span class="hljs-keyword">REFERENCES</span> `grade` (`gradeid`)<br>    <span class="hljs-comment">-- grade表的gradeid字段以fk_gradeid为名字给student表的gradeid字段作为外键</span><br>) ENGINE <span class="hljs-operator">=</span> innodb<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></tbody></table></figure><p><strong>删除有外键关系的表的时候，必须先删除别人的表（从表），再删除引用的表（主表）。</strong></p><blockquote><p>方式 2 ，创建表成功后添加外键</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*ALTER TABLE 要加键的表</span><br><span class="hljs-comment">    ADD CONSTRAINT 约束名 FOREIGN KEY (作为外键的键) REFERENCES 原来的表 (作为外键的字段);*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `grade`<br>(<br>    `gradeid`   <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'年级id'</span>,<br>    `gradename` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'年纪名称'</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`gradeid`)<br>) ENGINE <span class="hljs-operator">=</span> innodb,<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `student`<br>(<br>    `id`       <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">'学号'</span>,<br>    `name`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'匿名'</span> COMMENT <span class="hljs-string">'姓名'</span>,<br>    `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'123456'</span> COMMENT <span class="hljs-string">'密码'</span>,<br>    `sex`      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">3</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'女'</span> COMMENT <span class="hljs-string">'性别'</span>,<br>    `birthday` DATETIME             <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'出生日期'</span>,<br>    `gradeid`  <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'年级id'</span>,<br>    `address`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)         <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'家庭住址'</span>,<br>    `email`    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)          <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'邮箱'</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE <span class="hljs-operator">=</span> innodb<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student`<br>    <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> `fk_gradeid` <span class="hljs-keyword">FOREIGN</span> KEY (`gradeid`) <span class="hljs-keyword">REFERENCES</span> `grade` (`gradeid`);<br>    <span class="hljs-comment">-- grade表的gradeid字段以fk_gradeid为名字给student表的gradeid字段作为外键</span><br></code></pre></td></tr></tbody></table></figure><p>以上的操作为物理外键，数据库级别的外键，不建议使用（避免数据库过多造成困扰）</p><p>最佳实践</p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>想使用多张表的数据利用程序实现</li></ul><h2 id="DML语言（背）"><a href="#DML语言（背）" class="headerlink" title="DML语言（背）"></a>DML 语言（背）</h2><p><strong>数据库意义：</strong>数据存储，数据管理</p><p>DML 语言：数据操作语言</p><ul><li>insert</li><li>update</li><li>delete</li></ul><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><blockquote><p>insert</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">插入语句（添加）</span><br><span class="hljs-comment">insert into 表名([字段1，字段2，字段3...])value('值1'),('值2'),('值3')</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `grade` (`gradename`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'大四'</span>);<br><span class="hljs-comment">-- 由于主键自增我们可以省略（如果不写表的字段，它会一一匹配）</span><br><span class="hljs-comment">-- 一般写插入语句，我们一定要数据和字段一一对应</span><br><br><span class="hljs-comment">-- 插入多个字段</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `grade`(`gradename`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'大二'</span>),<br>    (<span class="hljs-string">'大三'</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `student`(`name`, `password`, `sex`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'张三'</span>, <span class="hljs-string">'aaaaaa'</span>, <span class="hljs-string">'男'</span>),<br>    (<span class="hljs-string">'王五'</span>, <span class="hljs-string">'222222'</span>, <span class="hljs-string">'女'</span>);<br></code></pre></td></tr></tbody></table></figure><p>语法：insert into 表名 ([字段 1，字段 2，字段 3…]) value (‘值 1’),(‘值 2’),(‘值 3’)</p><p>注意事项：</p><ul><li>字段和字段之间使用<strong>英文逗号</strong>隔开</li><li>字段可以省略，但是后面的值必须要一一对应</li><li>可以同时插入多条数据，values 后面的值使用英文逗号隔开即可</li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><blockquote><p>update        修改谁（条件） set 原来的值 = 新值</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改学员名字,带了条件</span><br><span class="hljs-keyword">UPDATE</span> `student`<br><span class="hljs-keyword">SET</span><br>    `name`<span class="hljs-operator">=</span><span class="hljs-string">'哈哈哈'</span><br><span class="hljs-keyword">WHERE</span><br>    `password` <span class="hljs-operator">=</span> <span class="hljs-string">'aaaaaa'</span>;<br><span class="hljs-comment">-- 不指定条件的情况下，会改动所有表！！！！</span><br><span class="hljs-comment">-- 修改多个属性时用英文逗号隔开</span><br><span class="hljs-keyword">UPDATE</span> `student`<br><span class="hljs-keyword">SET</span><br>    `name`<span class="hljs-operator">=</span><span class="hljs-string">'哈哈哈'</span>,<br>    `sex`<span class="hljs-operator">=</span><span class="hljs-string">'保密'</span>,<br>    `gradeid`<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">WHERE</span><br>    `password` <span class="hljs-operator">=</span> <span class="hljs-string">'aaaaaa'</span>;<br></code></pre></td></tr></tbody></table></figure><p>语法：UPDATE 表名 SET 字段 = VALUE,[字段 = VALUE]  WHERE [条件]</p><p>条件： where 子句 运算符 id 等于 / 大于什么  在某个区间修改</p><p>操作符会返回布尔值</p><p>= 等于</p><p>&lt;&gt; 或！= 不等于</p><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td> =</td><td> 等于</td></tr><tr><td> &lt;&gt; 或！=</td><td> 不等于</td></tr><tr><td> &gt;</td><td> 大于</td></tr><tr><td> &lt;</td><td> 小于</td></tr><tr><td> &gt;=</td><td> 大于等于</td></tr><tr><td> &gt;=</td><td> 小于等于</td></tr><tr><td> between…and…</td><td> 在某个范围内</td></tr><tr><td> and</td><td>&amp;&amp;</td></tr><tr><td>or</td><td>||</td></tr></tbody></table><p>注意：</p><ul><li>数据库的列尽量带上 ``</li><li> 条件，筛选的条件，如果没有指定则会修改所有的列</li><li> value，是一个具体的值，也可以是一个变量</li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><blockquote><p>delete 命令</p></blockquote><p>语法：delete form 表名 [where 条件]        需要条件，否则全部清空</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span><br>    `student`<br><span class="hljs-keyword">WHERE</span><br>    `password` <span class="hljs-operator">=</span> <span class="hljs-string">'222222'</span>;<br></code></pre></td></tr></tbody></table></figure><blockquote><p>truncate 命令</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> `student`;<br></code></pre></td></tr></tbody></table></figure><p>作用：完全清空一个数据库表，表的结构和索引约束不会变。</p><blockquote><p>delete 和 truncate 的区别</p></blockquote><ul><li><p>相同：都能删除数据，不会删除表结构</p></li><li><p>不同：</p><ul><li>truncate 会重新设置表的自增列 计数器归零</li><li> truncate 不会影响事务</li></ul></li></ul><p>delete 删除的问题，重启数据库后：</p><ul><li>innodb 自增列从 1 开始，存储在内存中，断电即消失</li><li> myisam 继续从上一个自增量开始，存在文件中，不会丢失</li></ul><h1 id="DQL查询数据"><a href="#DQL查询数据" class="headerlink" title="DQL查询数据"></a>DQL 查询数据</h1><p>使用的表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `school`;<br><span class="hljs-comment">-- 创建一个 school 数据库</span><br>USE `school`;<span class="hljs-comment">-- 创建学生表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `student`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student`<br>(<br>    `studentno`    <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 学号 '</span>,<br>    `loginpwd`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `studentname`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 学生姓名 '</span>,<br>    `sex`          TINYINT(<span class="hljs-number">1</span>)  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 性别，0 或 1'</span>,<br>    `gradeid`      <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)     <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 年级编号 '</span>,<br>    `phone`        <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 联系电话，允许为空 '</span>,<br>    `address`      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 地址，允许为空 '</span>,<br>    `borndate`     DATETIME    <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 出生时间 '</span>,<br>    `email`        <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 邮箱账号允许为空 '</span>,<br>    `identitycard` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 身份证号 '</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`studentno`),<br>    <span class="hljs-keyword">UNIQUE</span> KEY `identitycard` (`identitycard`),<br>    KEY `email` (`email`)<br>) ENGINE <span class="hljs-operator">=</span> myisam<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-comment">-- 创建年级表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `grade`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `grade`<br>(<br>    `gradeid`   <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">' 年级编号 '</span>,<br>    `gradename` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 年级名称 '</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`gradeid`)<br>) ENGINE <span class="hljs-operator">=</span> innodb<br>  AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">6</span><br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-comment">-- 创建科目表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `subject`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `subject`<br>(<br>    `subjectno`   <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">' 课程编号 '</span>,<br>    `subjectname` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 课程名称 '</span>,<br>    `classhour`   <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)      <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 学时 '</span>,<br>    `gradeid`     <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)      <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 年级编号 '</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`subjectno`)<br>) ENGINE <span class="hljs-operator">=</span> innodb<br>  AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">19</span><br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-comment">-- 创建成绩表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">result</span>`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">result</span>`<br>(<br>    `studentno`     <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)   <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 学号 '</span>,<br>    `subjectno`     <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)   <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 课程编号 '</span>,<br>    `examdate`      DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 考试日期 '</span>,<br>    `studentresult` <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>)   <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 考试成绩 '</span>,<br>    KEY `subjectno` (`subjectno`)<br>) ENGINE <span class="hljs-operator">=</span> innodb<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-comment">-- 插入学生数据 其余自行添加 这里只添加了 2 行</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `student` (`studentno`, `loginpwd`, `studentname`, `sex`, `gradeid`, `phone`, `address`, `borndate`, `email`,<br>               `identitycard`)<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1000</span>, <span class="hljs-string">'123456'</span>, <span class="hljs-string">' 张伟 '</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'13800001234'</span>, <span class="hljs-string">' 北京朝阳 '</span>, <span class="hljs-string">'1980-1-1'</span>, <span class="hljs-string">'text123@qq.com'</span>, <span class="hljs-string">'123456198001011234'</span>),<br>(<span class="hljs-number">1001</span>, <span class="hljs-string">'123456'</span>, <span class="hljs-string">' 赵强 '</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'13800002222'</span>, <span class="hljs-string">' 广东深圳 '</span>, <span class="hljs-string">'1990-1-1'</span>, <span class="hljs-string">'text111@qq.com'</span>, <span class="hljs-string">'123456199001011233'</span>);<br><br><span class="hljs-comment">-- 插入成绩数据  这里仅插入了一组，其余自行添加</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `<span class="hljs-keyword">result</span>`(`studentno`, `subjectno`, `examdate`, `studentresult`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1000</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'2013-11-11 16:00:00'</span>, <span class="hljs-number">85</span>),<br>    (<span class="hljs-number">1000</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'2013-11-12 16:00:00'</span>, <span class="hljs-number">70</span>),<br>    (<span class="hljs-number">1000</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'2013-11-11 09:00:00'</span>, <span class="hljs-number">68</span>),<br>    (<span class="hljs-number">1000</span>, <span class="hljs-number">4</span>, <span class="hljs-string">'2013-11-13 16:00:00'</span>, <span class="hljs-number">98</span>),<br>    (<span class="hljs-number">1000</span>, <span class="hljs-number">5</span>, <span class="hljs-string">'2013-11-14 16:00:00'</span>, <span class="hljs-number">58</span>);<br><br><span class="hljs-comment">-- 插入年级数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `grade` (`gradeid`, `gradename`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">' 大一 '</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">' 大二 '</span>),<br>    (<span class="hljs-number">3</span>, <span class="hljs-string">' 大三 '</span>),<br>    (<span class="hljs-number">4</span>, <span class="hljs-string">' 大四 '</span>),<br>    (<span class="hljs-number">5</span>, <span class="hljs-string">' 预科班 '</span>);<br><br><span class="hljs-comment">-- 插入科目数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `subject`(`subjectno`, `subjectname`, `classhour`, `gradeid`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">' 高等数学 - 1'</span>, <span class="hljs-number">110</span>, <span class="hljs-number">1</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">' 高等数学 - 2'</span>, <span class="hljs-number">110</span>, <span class="hljs-number">2</span>),<br>    (<span class="hljs-number">3</span>, <span class="hljs-string">' 高等数学 - 3'</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>),<br>    (<span class="hljs-number">4</span>, <span class="hljs-string">' 高等数学 - 4'</span>, <span class="hljs-number">130</span>, <span class="hljs-number">4</span>),<br>    (<span class="hljs-number">5</span>, <span class="hljs-string">'C 语言 - 1'</span>, <span class="hljs-number">110</span>, <span class="hljs-number">1</span>),<br>    (<span class="hljs-number">6</span>, <span class="hljs-string">'C 语言 - 2'</span>, <span class="hljs-number">110</span>, <span class="hljs-number">2</span>),<br>    (<span class="hljs-number">7</span>, <span class="hljs-string">'C 语言 - 3'</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>),<br>    (<span class="hljs-number">8</span>, <span class="hljs-string">'C 语言 - 4'</span>, <span class="hljs-number">130</span>, <span class="hljs-number">4</span>),<br>    (<span class="hljs-number">9</span>, <span class="hljs-string">'Java 程序设计 - 1'</span>, <span class="hljs-number">110</span>, <span class="hljs-number">1</span>),<br>    (<span class="hljs-number">10</span>, <span class="hljs-string">'Java 程序设计 - 2'</span>, <span class="hljs-number">110</span>, <span class="hljs-number">2</span>),<br>    (<span class="hljs-number">11</span>, <span class="hljs-string">'Java 程序设计 - 3'</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>),<br>    (<span class="hljs-number">12</span>, <span class="hljs-string">'Java 程序设计 - 4'</span>, <span class="hljs-number">130</span>, <span class="hljs-number">4</span>),<br>    (<span class="hljs-number">13</span>, <span class="hljs-string">' 数据库结构 - 1'</span>, <span class="hljs-number">110</span>, <span class="hljs-number">1</span>),<br>    (<span class="hljs-number">14</span>, <span class="hljs-string">' 数据库结构 - 2'</span>, <span class="hljs-number">110</span>, <span class="hljs-number">2</span>),<br>    (<span class="hljs-number">15</span>, <span class="hljs-string">' 数据库结构 - 3'</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>),<br>    (<span class="hljs-number">16</span>, <span class="hljs-string">' 数据库结构 - 4'</span>, <span class="hljs-number">130</span>, <span class="hljs-number">4</span>),<br>    (<span class="hljs-number">17</span>, <span class="hljs-string">'C# 基础 '</span>, <span class="hljs-number">130</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></tbody></table></figure><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>（data query language：数据查询语言）</p><ul><li>所有的查询操作都用它     select</li><li> 简单的查询，复杂的查询都能做</li><li>数据库中最核心的语言，最重要的语句</li><li>使用频率最高的语句</li></ul><h2 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询全部的学生    SELECT * FROM 表;</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>    student;<br><br><span class="hljs-comment">-- 查询指定字段      SELECT 字段 FROM 表;</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`,<br>    `studentname`<br><span class="hljs-keyword">FROM</span><br>    student;<br><br><span class="hljs-comment">-- 别名，给结果起一个名字   as 可以给字段和表起别名</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`   <span class="hljs-keyword">AS</span> <span class="hljs-string">'学号'</span>,<br>    `studentname` <span class="hljs-keyword">AS</span> <span class="hljs-string">'学生姓名'</span><br><span class="hljs-keyword">FROM</span><br>    student <span class="hljs-keyword">AS</span> s;<br><br><span class="hljs-comment">-- 函数 concat(a,b)</span><br><span class="hljs-keyword">SELECT</span><br>    concat(<span class="hljs-string">'姓名：'</span>, studentname) <span class="hljs-keyword">AS</span> <span class="hljs-string">'新名字'</span><br><span class="hljs-keyword">FROM</span><br>    student;<br></code></pre></td></tr></tbody></table></figure><p>语法：SELECT 字段 FROM 表；</p><blockquote><p>有时候，列名字不明确，可以使用 AS 起别名， 字段名 as 别名        表名 as 别名</p></blockquote><blockquote><p>去重 distinct</p></blockquote><p>作用：去除 select 查询出来的结果中重复的数据，重复的数据只显示一条</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询全部考试成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span>;<br><span class="hljs-comment">-- 查询哪些同学参加了考试</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span>;<br><span class="hljs-comment">-- 发现重复数据，去重</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span><br>    `studentno`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span>;<br></code></pre></td></tr></tbody></table></figure><blockquote><p>数据库的列</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询系统版本</span><br><span class="hljs-keyword">SELECT</span> version();<br><span class="hljs-comment">-- 用于计算</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">100</span> <span class="hljs-operator">*</span> <span class="hljs-number">3</span> <span class="hljs-operator">-</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">'计算结果'</span>;<br><span class="hljs-comment">-- 查询自增步长</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@auto</span>_increment_increment;<br><br><span class="hljs-comment">-- 学员成绩+1</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`,<br>    `studentresult` <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">'提分后'</span><br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span>;<br></code></pre></td></tr></tbody></table></figure><p>数据库中的表达式：文本值，列，null，函数，计算表达式，系统变量</p><p>SELECT  <strong>表达式</strong>  FROM  表；</p><h2 id="where条件子句"><a href="#where条件子句" class="headerlink" title="where条件子句"></a>where 条件子句</h2><p>作用：检索数据中 == 符合条件的值</p><p>搜索的条件由一个或者多个表达式组成  结果是  <strong>布尔值</strong></p><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th>运算符</th><th>语法</th></tr></thead><tbody><tr><td> and     &amp;&amp;</td><td>a and b    a&amp;&amp;b</td></tr><tr><td>or||</td><td>a or b        a||b</td></tr><tr><td>not       ！</td><td>not a        ！a</td></tr></tbody></table><p>尽量使用英文字母</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询成绩在95与100之间</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span><br>      `studentresult` <span class="hljs-operator">&gt;=</span> <span class="hljs-number">95</span><br>  <span class="hljs-keyword">AND</span> `studentresult` <span class="hljs-operator">&lt;=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 模糊查询成绩在95与100之间</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span><br>    `studentresult` <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">95</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 除了98分之外的分数</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span><br>    <span class="hljs-keyword">NOT</span> `studentresult` <span class="hljs-operator">=</span> <span class="hljs-number">98</span>;<br></code></pre></td></tr></tbody></table></figure><blockquote><p>模糊查询：比较运算符</p></blockquote><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td> is null</td><td>a is null</td><td> 如果 a 为 null，结果为真</td></tr><tr><td> is not null</td><td>a is not null</td><td> 如果 a 为 not null，结果为真</td></tr><tr><td> between</td><td>a betweent b and c</td><td> 若 a 在 b 和 c 之间，结果为真</td></tr><tr><td><strong> like</strong></td><td>a like b</td><td>SQL 匹配，如果 a 匹配 b，结果为真</td></tr><tr><td> in</td><td>a in （a1，a2…）</td><td>假设 a 在 a1，或者 a2… 其中的某一个值中，结果为真 </td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    `studentno`,<br>    `studentname`,<br>    `borndate`<br><span class="hljs-keyword">FROM</span><br>    student<br><span class="hljs-keyword">WHERE</span><br>    `email` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%text12%'</span>;<br></code></pre></td></tr></tbody></table></figure><p>% 代表 0 至任意个字符，__代表一个字符</p><h2 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h2><blockquote><p>join 对比</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">1.分析需求，分析查询的字段来自哪些表（连接查询）</span><br><span class="hljs-comment">2.确定使用哪种连接查询   7种</span><br><span class="hljs-comment">确定交叉点（这两个表中那个数据时相同的）</span><br><span class="hljs-comment">判断的条件： 学生表中的studentno=成绩表中的studentno</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- INNER JOIN</span><br><span class="hljs-keyword">SELECT</span><br>    s.`studentno`,<br>    `studentname`,<br>    `subjectno`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    student <span class="hljs-keyword">AS</span> s<br>        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r <span class="hljs-keyword">ON</span> s.studentno <span class="hljs-operator">=</span> r.studentno;<br><br><span class="hljs-comment">-- RIGHT JOIN</span><br><span class="hljs-keyword">SELECT</span><br>    s.`studentno`,<br>    `studentname`,<br>    `subjectno`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    student <span class="hljs-keyword">AS</span> s<br>        <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r <span class="hljs-keyword">ON</span> s.studentno <span class="hljs-operator">=</span> r.studentno;<br><br><span class="hljs-comment">-- LEFT JOIN</span><br><span class="hljs-keyword">SELECT</span><br>    s.`studentno`,<br>    `studentname`,<br>    `subjectno`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    student <span class="hljs-keyword">AS</span> s<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r <span class="hljs-keyword">ON</span> s.studentno <span class="hljs-operator">=</span> r.studentno;<br></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td> INNER JOIN</td><td> 如果表中至少有一个匹配，就返回行数据</td></tr><tr><td> LEFT JOIN</td><td> 从左表中返回所有的值，即使右表没有匹配</td></tr><tr><td> RIGHT JOIN</td><td> 从右表中返回所有的值，即使左表没有匹配 </td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在三张表中查询参加了考试的同学的信息，学号 姓名 科目 分数</span><br><span class="hljs-keyword">SELECT</span><br>    s.`studentno`   <span class="hljs-keyword">AS</span> <span class="hljs-string">'学号'</span>,<br>    `studentname`   <span class="hljs-keyword">AS</span> <span class="hljs-string">'姓名'</span>,<br>    `subjectname`   <span class="hljs-keyword">AS</span> <span class="hljs-string">'科目'</span>,<br>    `studentresult` <span class="hljs-keyword">AS</span> <span class="hljs-string">'分数'</span><br><span class="hljs-keyword">FROM</span><br>    student <span class="hljs-keyword">AS</span> s<br>        <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r <span class="hljs-keyword">ON</span> s.studentno <span class="hljs-operator">=</span> r.studentno<br>        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> subject <span class="hljs-keyword">AS</span> s2 <span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> s2.subjectno;<br></code></pre></td></tr></tbody></table></figure><blockquote><p>自连接</p></blockquote><p>需要的表：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `school`.`category`<br>(<br>    `categoryid`   <span class="hljs-type">INT</span>(<span class="hljs-number">3</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">'id'</span>,<br>    `pid`          <span class="hljs-type">INT</span>(<span class="hljs-number">3</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 父 id 没有父则为 1'</span>,<br>    `categoryname` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">' 种类名字 '</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`categoryid`)<br>) ENGINE <span class="hljs-operator">=</span> INNODB<br>  CHARSET <span class="hljs-operator">=</span> utf8<br>  <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `school`.`category` (`categoryid`, `pid`, `categoryname`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'2'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">' 信息技术 '</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `school`.`category` (`categoryid`, `pid`, `categoryname`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'3'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">' 软件开发 '</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `school`.`category` (`categoryid`, `pid`, `categoryname`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'5'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">' 美术设计 '</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `school`.`category` (`categoryid`, `pid`, `categoryname`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'4'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">' 数据库 '</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `school`.`category` (`categoryid`, `pid`, `categoryname`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'8'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">' 办公信息 '</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `school`.`category` (`categoryid`, `pid`, `categoryname`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'6'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'web 开发 '</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    `school`.`category` (`categoryid`, `pid`, `categoryname`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'7'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'ps 技术 '</span>);<br></code></pre></td></tr></tbody></table></figure><p>自己的表和自己的表连接，核心：<strong>一张表拆为两张一样的表即可</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    a.`categoryname` <span class="hljs-keyword">AS</span> a,<br>    b.`categoryname` <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">FROM</span> category <span class="hljs-keyword">AS</span> a ,category <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">WHERE</span> a.categoryid <span class="hljs-operator">=</span> b.pid;<br></code></pre></td></tr></tbody></table></figure><h2 id="分页和排序"><a href="#分页和排序" class="headerlink" title="分页和排序"></a>分页和排序</h2><blockquote><p>排序</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 排序：升序 asc     降序 desc</span><br><span class="hljs-comment">-- ORDER BY 通过哪个字段排序，怎么排</span><br><span class="hljs-keyword">SELECT</span><br>    r.`studentno`,<br>    `studentname`,<br>    `subjectname`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> student <span class="hljs-keyword">AS</span> s<br>                  <span class="hljs-keyword">ON</span> r.studentno <span class="hljs-operator">=</span> s.studentno<br>        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> subject<br>                   <span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> subject.subjectno<br><span class="hljs-keyword">WHERE</span><br>    subjectname <span class="hljs-operator">=</span> <span class="hljs-string">' 数据库结构 - 1'</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    studentresult <span class="hljs-keyword">ASC</span>; <span class="hljs-comment">-- DESC</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>分页</p></blockquote><p>缓解数据库压力，给人更好的体验</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法  limit 起始值，页面大小</span><br></code></pre></td></tr></tbody></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 （学号 科目编号 数据库结构 - 1学生成绩） 的降序</span><br><span class="hljs-comment">-- 联表查询</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`,<br>    r.`subjectno`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r<br>        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> subject <span class="hljs-keyword">AS</span> s<br>                   <span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> s.subjectno<br><span class="hljs-keyword">WHERE</span><br>    subjectname <span class="hljs-operator">=</span> <span class="hljs-string">' 数据库结构 - 1'</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    studentresult <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 使用子查询</span><br><span class="hljs-keyword">SELECT</span><br>    `studentno`,<br>    `subjectno`,<br>    `studentresult`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span><br><span class="hljs-keyword">WHERE</span><br>        subjectno <span class="hljs-operator">=</span> (<br>        <span class="hljs-keyword">SELECT</span><br>            subjectno<br>        <span class="hljs-keyword">FROM</span><br>            subject<br>        <span class="hljs-keyword">WHERE</span><br>            subjectname <span class="hljs-operator">=</span> <span class="hljs-string">' 数据库结构 - 1'</span><br>    )<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    studentresult <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 （学号 数据库结构 - 1分数大于60的学生名字）</span><br><span class="hljs-comment">-- 子查询</span><br><span class="hljs-keyword">SELECT</span><br>    s.studentno,<br>    studentname<br><span class="hljs-keyword">FROM</span><br>    student <span class="hljs-keyword">AS</span> s<br>        <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> r<br>                   <span class="hljs-keyword">ON</span> s.studentno <span class="hljs-operator">=</span> r.studentno<br><span class="hljs-keyword">WHERE</span><br>      studentresult <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span><br>  <span class="hljs-keyword">AND</span> subjectno <span class="hljs-operator">=</span> (<br>    <span class="hljs-keyword">SELECT</span><br>        subjectno<br>    <span class="hljs-keyword">FROM</span><br>        `subject`<br>    <span class="hljs-keyword">WHERE</span><br>        subjectname <span class="hljs-operator">=</span> <span class="hljs-string">' 数据库结构 - 1'</span><br>);<br><br><span class="hljs-comment">-- 嵌套查询</span><br><span class="hljs-keyword">SELECT</span><br>    studentno,<br>    studentname<br><span class="hljs-keyword">FROM</span><br>    student<br><span class="hljs-keyword">WHERE</span><br>        studentno <span class="hljs-keyword">IN</span> (<br>        <span class="hljs-keyword">SELECT</span><br>            studentno<br>        <span class="hljs-keyword">FROM</span><br>            <span class="hljs-keyword">result</span><br>        <span class="hljs-keyword">WHERE</span><br><br>              studentresult <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span><br>          <span class="hljs-keyword">AND</span> subjectno <span class="hljs-operator">=</span> (<br>            <span class="hljs-keyword">SELECT</span><br>                subjectno<br>            <span class="hljs-keyword">FROM</span><br>                subject<br>            <span class="hljs-keyword">WHERE</span><br>                subjectname <span class="hljs-operator">=</span> <span class="hljs-string">' 数据库结构 - 1'</span><br>        )<br>    );<br></code></pre></td></tr></tbody></table></figure><h2 id="分组和过滤"><a href="#分组和过滤" class="headerlink" title="分组和过滤"></a>分组和过滤</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    subjectname,<br>    <span class="hljs-built_in">avg</span>(studentresult) <span class="hljs-keyword">AS</span> <span class="hljs-string">'平均分'</span>,<br>    <span class="hljs-built_in">max</span>(studentresult),<br>    <span class="hljs-built_in">min</span>(studentresult)<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">result</span> r<br>        <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> subject s<br>                   <span class="hljs-keyword">ON</span> r.subjectno <span class="hljs-operator">=</span> s.subjectno<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    subjectname<br><span class="hljs-keyword">HAVING</span><br>    平均分 <span class="hljs-operator">&gt;</span> <span class="hljs-number">80</span>;<br></code></pre></td></tr></tbody></table></figure><h1 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL 函数</h1><p>官网：<a href="https://dev.mysql.com/doc/refman/8.0/en/sql-function-reference.html">https://dev.mysql.com/doc/refman/8.0/en/sql-function-reference.html</a></p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">abs</span>(<span class="hljs-number">-123</span>);   <span class="hljs-comment">-- 绝对值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">ceiling</span>(<span class="hljs-number">9.3</span>); <span class="hljs-comment">-- 向上取整   10</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">floor</span>(<span class="hljs-number">9.3</span>); <span class="hljs-comment">-- 向下取整    9</span><br><span class="hljs-keyword">SELECT</span> rand();    <span class="hljs-comment">-- 随机数</span><br><span class="hljs-keyword">SELECT</span> sign(<span class="hljs-number">-2</span>);  <span class="hljs-comment">--判断一个数的符号   负数返回-1  正数返回  1     0返回0</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 字符串函数</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">char_length</span>(<span class="hljs-string">'hahahahahaha'</span>); <span class="hljs-comment">-- 字符串长度</span><br><span class="hljs-keyword">SELECT</span> concat(<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>); <span class="hljs-comment">-- 拼接字符串</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">insert</span>(<span class="hljs-string">'我爱编程'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'可视化'</span>); <span class="hljs-comment">-- 在某一位置替换字符串</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">upper</span>(<span class="hljs-string">'asdasd'</span>); <span class="hljs-comment">-- 大写</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">lower</span>(<span class="hljs-string">'SADSAD'</span>); <span class="hljs-comment">-- 小写</span><br><span class="hljs-keyword">SELECT</span> instr(<span class="hljs-string">'sadasd'</span>, <span class="hljs-string">'d'</span>); <span class="hljs-comment">-- 3   返回第一次出现的位数</span><br><span class="hljs-keyword">SELECT</span> replace(<span class="hljs-string">'坚持就能成功'</span>,<span class="hljs-string">'坚持'</span>,<span class="hljs-string">'努力'</span>); <span class="hljs-comment">-- 替换第一次出现的字符串</span><br><span class="hljs-keyword">SELECT</span> substr(<span class="hljs-string">'sadsadasd'</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">-- 返回指定的子串(源字符串，截取的位置，截取的长度)</span><br><span class="hljs-keyword">SELECT</span> reverse(<span class="hljs-string">'asdasdsd'</span>); <span class="hljs-comment">-- 反转</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">current_time</span>(); <span class="hljs-comment">-- 获取当前时间</span><br><span class="hljs-keyword">SELECT</span> curdate(); <span class="hljs-comment">-- 获取当前日期</span><br><span class="hljs-keyword">SELECT</span> now();  <span class="hljs-comment">-- 获取当前日期时间</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">localtime</span>(); <span class="hljs-comment">-- 获取本地当前日期时间</span><br><span class="hljs-keyword">SELECT</span> sysdate(); <span class="hljs-comment">-- 获取系统当前日期时间</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">system_user</span>(); <span class="hljs-comment">-- 系统</span><br></code></pre></td></tr></tbody></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td> count（）</td><td>计数</td></tr><tr><td> sum（）</td><td>求和</td></tr><tr><td> avg（）</td><td>平均值</td></tr><tr><td> max（）</td><td>最大值</td></tr><tr><td> min（）</td><td>最小值</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><p>count (字段名)    忽略 null</p><p>count (*) 和 count (1)  不忽略 null</p><h2 id="数据库级别的MD5加密"><a href="#数据库级别的MD5加密" class="headerlink" title="数据库级别的MD5加密"></a>数据库级别的 MD5 加密</h2><p>什么是 MD5？<br>主要增强算法复杂度和不可逆性。<br>MD5 不可逆，具体的值的 md5 是一样的<br>MD5 破解网站的原理，背后有一个字典，根据 MD5 加密后的值，返回加密前的值</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>要么都成功，要么都失败。</p><blockquote><p>事务的原则：ACID 原则  原子性，一致性，隔离性，持久性</p></blockquote><p>参考博文：<a href="https://blog.csdn.net/dengjili/article/details/82468576">https://blog.csdn.net/dengjili/article/details/82468576</a></p><p><strong>原子性 (Atomicity)</strong></p><p>要么都成功，要么都失败。</p><p><strong>一致性 (Consistency)</strong></p><p>事务前后的数据完整性要保持一致</p><p><strong>隔离性（Isolation）</strong></p><p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离</p><p><strong>持久性（Durability）- 事务提交</strong></p><p>事务一旦提交则不可逆，被持久化到数据库中！</p><blockquote><p>隔离导致的一些问题</p></blockquote><p><strong>脏读：</strong></p><p>指一个事务读取了另外一个事务未提交的数据。</p><p><strong>不可重复读：</strong></p><p>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</p><p><strong>虚读（幻读）：</strong></p><p>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</p><blockquote><p>执行事务</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- mysql 默认开启事务自动提交</span><br><span class="hljs-comment">-- 手动处理事务</span><br><span class="hljs-comment">-- 1.关闭自动提交</span><br><span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">-- 2.事务开启 标记一个事务的开始</span><br><span class="hljs-keyword">START</span> TRANSACTION;<br><span class="hljs-comment">-- 3.提交</span><br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 回滚</span><br><span class="hljs-keyword">ROLLBACK</span>;<br><span class="hljs-comment">-- 4.开启自动提交</span><br><span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">SAVEPOINT</span> 保存点名;  <span class="hljs-comment">-- 设置一个保存点</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名; <span class="hljs-comment">-- 回滚到保存点</span><br><span class="hljs-keyword">RELEASE</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名; <span class="hljs-comment">-- 删除一个保存点</span><br></code></pre></td></tr></tbody></table></figure><p>转账模拟：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SAVEPOINT</span> 保存点名; <span class="hljs-comment">-- 设置一个保存点</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名; <span class="hljs-comment">-- 回滚到保存点</span><br><span class="hljs-keyword">RELEASE</span> <span class="hljs-keyword">SAVEPOINT</span> 保存点名; <span class="hljs-comment">-- 删除一个保存点</span><br><br><span class="hljs-keyword">CREATE</span> DATABASE bank <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br>USE bank;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> account<br>(<br>    `id`    <span class="hljs-type">INT</span>(<span class="hljs-number">3</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `name`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>)   <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `money` <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">9</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE <span class="hljs-operator">=</span> innodb<br>  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span><br>    account(`name`, `money`)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">'a'</span>, <span class="hljs-number">2000.00</span>),<br>    (<span class="hljs-string">'b'</span>, <span class="hljs-number">10000.00</span>);<br><br><span class="hljs-comment">-- 模拟转账：事务</span><br><span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 关闭自动提交</span><br><span class="hljs-keyword">START</span> TRANSACTION;<span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">UPDATE</span> account<br><span class="hljs-keyword">SET</span><br>    money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span><br><span class="hljs-keyword">WHERE</span><br>    name <span class="hljs-operator">=</span> <span class="hljs-string">'a'</span>;<br><span class="hljs-keyword">UPDATE</span> account<br><span class="hljs-keyword">SET</span><br>    money<br>        <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">500</span><br><span class="hljs-keyword">WHERE</span><br>    name <span class="hljs-operator">=</span> <span class="hljs-string">'b'</span>;<br><span class="hljs-keyword">ROLLBACK</span>; <span class="hljs-comment">-- 失败回滚</span><br><span class="hljs-keyword">COMMIT</span>; <span class="hljs-comment">-- 成功提交</span><br><span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 开启自动提交</span><br></code></pre></td></tr></tbody></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><blockquote><p>MSQL 官方对索引的定义为：<strong>索引（index）是帮助 MySQL 高效获取数据的数据结构。</strong>提取句子主干，就可以得到索引的本质：索引是数据结构。</p></blockquote><h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><ul><li>主键索引（primary key）<ul><li>唯一的标识，逐渐不可重复</li></ul></li><li>唯一索引（unique key）<ul><li>避免重复的列出现，唯一索引可以重复，多个列都可以标识为 唯一索引</li></ul></li><li>常规索引（key /index）<ul><li>默认的，index /key 关键字设置</li></ul></li><li>全文索引（FullText）<ul><li>在特定的数据库引擎下才有 myisam</li><li> 快速定位数据</li></ul></li></ul><p>索引的使用</p><ol><li><p>在创建表的时候给字段增加索引</p></li><li><p>创建完毕后，增加索引</p><p>alter table 表。字段 add [fulltext] index 索引名（列名）</p></li><li><p>create index 索引名 on 表（字段）</p></li></ol><p>索引命名： i<code>_</code>表名<code>_</code>字段</p><p>索引在数据量小的时候不明显，但在数据量大时十分明显</p><h2 id="索引原则"><a href="#索引原则" class="headerlink" title="索引原则"></a>索引原则</h2><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表不要加索引</li><li>索引一般加在常用来查询的字段上</li></ul><p>参考：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><blockquote><p>索引的数据结构</p></blockquote><p>hash 类型的索引</p><p>btree：innodb 默认的数据结构</p><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h2 id="用户管理-权限管理"><a href="#用户管理-权限管理" class="headerlink" title="用户管理 权限管理"></a>用户管理 权限管理</h2><blockquote><p>sql 命令</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建用户   CREATE USER 用户名 IDENTIFIED BY 密码;</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> zhang IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">'123456'</span>;<br><span class="hljs-comment">-- 修改密码</span><br><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-keyword">FOR</span> zhang <span class="hljs-operator">=</span> <span class="hljs-string">'111111'</span>;<br><span class="hljs-comment">-- 重命名</span><br>RENAME <span class="hljs-keyword">USER</span> zhang <span class="hljs-keyword">TO</span> liu;<br><span class="hljs-comment">-- 用户授权 *.*（库.表）代表全部权限 除了给其他用户授权</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> liu;<br><span class="hljs-comment">-- 查询权限</span><br><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> liu;<br><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> root<span class="hljs-variable">@localhost</span>;<br><span class="hljs-comment">-- 撤销权限</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> liu;<br><span class="hljs-comment">-- 删除用户</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> liu;<br></code></pre></td></tr></tbody></table></figure><h2 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL 备份</h2><p>为什么要备份：</p><ul><li>保证重要的数据不丢失</li><li>数据转移</li></ul><p>MySQL 数据库备份的方式</p><ul><li>可视化工具手动导出</li><li>拷贝物理文件</li><li>命令行导出  mysqldump</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>hlocalhost <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>proot 数据库名 表名 <span class="hljs-operator">&gt;</span>位置<br></code></pre></td></tr></tbody></table></figure><h1 id="数据库的规约"><a href="#数据库的规约" class="headerlink" title="数据库的规约"></a>数据库的规约</h1><h2 id="为什么需要设计"><a href="#为什么需要设计" class="headerlink" title="为什么需要设计"></a>为什么需要设计</h2><p>当数据库比较复杂时，需要设计</p><p><strong>糟糕的数据库设计：</strong></p><ul><li>数据冗余，浪费空间</li><li>数据库插入和删除都会麻烦、异常</li><li>程序性能差</li></ul><p><strong>良好的数据库设计：</strong></p><ul><li>节省内存空间</li><li>保证数据库的完整性</li><li>方便我们开发系统</li></ul><p><strong>软件开发中，关于数据库的设计：</strong></p><ul><li>分析需求：分析业务和需要处理的数据库的需求</li><li>概要设计：设计关系图 E-R 图</li></ul><p><strong>设计数据库的步骤：</strong>（个人博客）</p><ul><li><p>收集信息，分析需求</p><ul><li>用户表（用户登录注销，用户个人信息，写博客，创建分类）</li><li>分类表（文章分类，谁创建的）</li><li>文章表（文章的信息）</li><li>评论表</li><li>友链表（友链信息）</li><li>自定义表（系统信息，某个关键的字，或者一些主字段） key：value</li><li> 说说表（id、content、create_time）</li></ul></li><li><p>标识实体（具体需求到字段）</p></li><li><p>标识实体间的关系</p><ul><li>写博客：user&gt;blog</li><li> 创建分类：user&gt;categroy</li><li> 关注：user&gt;user</li><li> 友链：links</li><li> 评论：user&gt;user-blog</li></ul></li></ul><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><p><strong>为什么需要数据规范化？</strong></p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效信息</li></ul></li></ul><p><strong>第一范式（1NF） 要求数据库表的每一列都是不可分割的原子数据项。</strong></p><p>原子性：保证每一列不可再分</p><p><strong>第二范式（2NF）  在 1NF 的基础上，非码属性必须完全依赖于候选码（在 1NF 基础上消除非主属性对主码的部分函数依赖）第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</strong></p><p>前提：满足第一范式</p><p>每张表只做一件事</p><p><strong>第三范式（3NF）  属性不依赖于其它非主属性   属性直接依赖于主键</strong></p><p><strong>规范性和性能问题</strong></p><p>关联查询的表不得超过三张</p><ul><li>考虑商业化的需求和目标（成本，用户体验）</li><li>在规范性能的问题的时候，需要适当的考虑一下规范性</li><li>故意给某些表增加一些冗余的字段。（从多表查询中变为单表查询）</li><li>故意增加一些计算列（从大数据量降低为小数据量的査询：索引）</li></ul><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h2><p>驱动：连接应用程序与数据库</p><h2 id="JDBC-1"><a href="#JDBC-1" class="headerlink" title="JDBC"></a>JDBC</h2><p>SUN 公司为了简化开发人员的操作，提供了一个（Java 操作数据库的）规范 JDBC</p><p>对于开发人员来说只需要掌握 JDBC 接口的操作即可</p><p>需要了解两个包：java.sql    javax.sql</p><p>一个驱动包</p><h2 id="第一个JDBC程序"><a href="#第一个JDBC程序" class="headerlink" title="第一个JDBC程序"></a>第一个 JDBC 程序</h2><blockquote><p>创建测试数据库</p></blockquote><ol><li><p>创建一个普通项目</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE `jdbcStudy` CHARACTER SET utf8 COLLATE utf8_general_ci;<br><br>USE `jdbcStudy`;<br><br>CREATE TABLE `users`<br>(<br>    `id`       INT PRIMARY KEY,<br>    `NAME`     VARCHAR(40),<br>    `PASSWORD` VARCHAR(40),<br>    `email`    VARCHAR(60),<br>    birthday   DATE<br>);<br><br>INSERT INTO `users`(`id`, `NAME`, `PASSWORD`, `email`, `birthday`)<br>VALUES ('1', 'zhangsan', '123456', 'zs@sina.com', '1980-12-04'),<br>       ('2', 'lisi', '123456', 'lisi@sina.com', '1981-12-04'),<br>       ('3', 'wangwu', '123456', 'wangwu@sina.com', '1979-12-04')<br></code></pre></td></tr></tbody></table></figure></li><li><p>导入数据库驱动<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185606.png" alt="image-20210510145833850"></p></li><li><p>编写测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo01;<br><br><span class="hljs-keyword">import</span> com.mysql.jdbc.Driver;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/10</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//我的第一个JDBC程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCFirstDemo</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException {<br><span class="hljs-comment">//1.加载驱动</span><br>Class.forName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);<span class="hljs-comment">//利用反射加载驱动</span><br><br><span class="hljs-comment">//2.用户信息和url</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">"jdbc:mysql://localhost:3306/jdbcStudy?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true"</span>;<br><span class="hljs-comment">//serverTimezone=Asia/Shanghai    mysql8需要加时区</span><br><span class="hljs-comment">//useUnicode=true   使用Unicode编码</span><br><span class="hljs-comment">//characterEncoding=utf8    设置utf8编码</span><br><span class="hljs-comment">//useSSL=true   使用安全的连接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">"root"</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">"root"</span>;<br><br><span class="hljs-comment">//3.连接成功,数据库对象 connection 代表数据库</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br><span class="hljs-comment">//4.执行sql对象 statement 执行sql</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><br><span class="hljs-comment">//5.执行sql对象去执行sql</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT * FROM Users"</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<span class="hljs-comment">//返回的结果集，结果集中封装了我们全部查询出来的结果</span><br><span class="hljs-keyword">while</span> (resultSet.next()) {<br>System.out.println(<span class="hljs-string">"id="</span> + resultSet.getObject(<span class="hljs-string">"id"</span>));<br>System.out.println(<span class="hljs-string">"name="</span> + resultSet.getObject(<span class="hljs-string">"NAME"</span>));<br>System.out.println(<span class="hljs-string">"password="</span> + resultSet.getObject(<span class="hljs-string">"PASSWORD"</span>));<br>System.out.println(<span class="hljs-string">"email="</span> + resultSet.getObject(<span class="hljs-string">"email"</span>));<br>System.out.println(<span class="hljs-string">"birthday="</span> + resultSet.getObject(<span class="hljs-string">"birthday"</span>));<br>System.out.println(<span class="hljs-string">"=========================================================="</span>);<br>}<br><br><span class="hljs-comment">//6.关闭数据库连接</span><br>resultSet.close();<br>statement.close();<br>connection.close();<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185552.png" alt="image-20210510152521230"></p></li></ol><p>步骤总结：</p><ol><li><p>加载驱动</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);<span class="hljs-comment">//利用反射加载驱动</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>连接数据库 DriverManage</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span><span class="hljs-string">"jdbc:mysql://localhost:3306/jdbcStudy?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true"</span>;<br><span class="hljs-comment">//serverTimezone=Asia/Shanghai    mysql8需要加时区</span><br><span class="hljs-comment">//useUnicode=true   使用Unicode编码</span><br><span class="hljs-comment">//characterEncoding=utf8    设置utf8编码</span><br><span class="hljs-comment">//useSSL=true   使用安全的连接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">"root"</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">"root"</span>;<br><br><span class="hljs-comment">//3.连接成功,数据库对象 connection 代表数据库</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br></code></pre></td></tr></tbody></table></figure></li><li><p>获得执行 sql 的对象  Statement/prepareStatement</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br></code></pre></td></tr></tbody></table></figure></li><li><p>获得返回的结果集</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT * FROM Users"</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<span class="hljs-comment">//返回的结果集，结果集中封装了我们全部查询出来的结果</span><br><span class="hljs-keyword">while</span> (resultSet.next()) {<br>System.out.println(<span class="hljs-string">"id="</span> + resultSet.getObject(<span class="hljs-string">"id"</span>));<br>System.out.println(<span class="hljs-string">"name="</span> + resultSet.getObject(<span class="hljs-string">"NAME"</span>));<br>System.out.println(<span class="hljs-string">"password="</span> + resultSet.getObject(<span class="hljs-string">"PASSWORD"</span>));<br>System.out.println(<span class="hljs-string">"email="</span> + resultSet.getObject(<span class="hljs-string">"email"</span>));<br>System.out.println(<span class="hljs-string">"birthday="</span> + resultSet.getObject(<span class="hljs-string">"birthday"</span>));<br>System.out.println(<span class="hljs-string">"=========================================================="</span>);<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>关闭连接</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">resultSet.close();<br>statement.close();<br>connection.close();<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="statement对象"><a href="#statement对象" class="headerlink" title="statement对象"></a>statement 对象</h2><p>JDBC 中的 Statement 对象用于向数据库发送 sql 语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可</p><p>Statement 对象的 executeUpdate 方法，用于向数据库发送增、删、改的 sql 语句，executeUpdate 执行完之后，将会返回一个整数（即增删改语句导致了数据库几行数据发生了变化）</p><p>Statement.executeQuery 方法用于向数据库发送查询语句，executeQuery 方法返回查询结果的 ResultSet 对象</p><blockquote><p>代码实现</p></blockquote><ol><li><p>提取工具类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo02.utils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">static</span> {<br><span class="hljs-keyword">try</span> {<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">"db.properties"</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.load(in);<br>driver = properties.getProperty(<span class="hljs-string">"driver"</span>);<br>url = properties.getProperty(<span class="hljs-string">"url"</span>);<br>username = properties.getProperty(<span class="hljs-string">"username"</span>);<br>password = properties.getProperty(<span class="hljs-string">"password"</span>);<br><br><span class="hljs-comment">//加载驱动</span><br>Class.forName(driver);<br>} <span class="hljs-keyword">catch</span> (Exception e) {<br>e.printStackTrace();<br>}<br>}<br><br><span class="hljs-comment">//获取连接</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException {<br><span class="hljs-keyword">return</span> DriverManager.getConnection(url, username, password);<br>}<br><br><span class="hljs-comment">//释放资源</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span> <span class="hljs-params">(Connection conn, Statement st, ResultSet rs)</span> {<br><span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>rs.close();<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>}<br>}<br><span class="hljs-keyword">if</span> (st != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>st.close();<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>}<br>}<br><span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) {<br><span class="hljs-keyword">try</span> {<br>conn.close();<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>}<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>编写增删改查的方法：executeUpdate       executeQuery<br>增：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo02.utils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInsert</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection(); <span class="hljs-comment">// 获取数据库连接</span><br>st = conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"INSERT INTO Users(Id, Name, Password, Email, Birthday) VALUES (4, '张三', '123456', '123123123@qq.com', '2020-12-1')"</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) {<br>System.out.println(<span class="hljs-string">"插入成功!"</span>);<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>删：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo02.utils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDelete</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection(); <span class="hljs-comment">// 获取数据库连接</span><br>st = conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"DELETE FROM Users WHERE Id=4"</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) {<br>System.out.println(<span class="hljs-string">"删除成功!"</span>);<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>改：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo02.utils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUpdate</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection(); <span class="hljs-comment">// 获取数据库连接</span><br>st = conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"UPDATE Users SET Name = '李四',Email = 'ssadsad@qq.com' WHERE Id =1;"</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> st.executeUpdate(sql);<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) {<br>System.out.println(<span class="hljs-string">"更新成功!"</span>);<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>查：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo02.utils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSelect</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection();<br>st = conn.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT * FROM Users WHERE Id = 1"</span>;<br>rs = st.executeQuery(sql);<br><span class="hljs-keyword">while</span> (rs.next()) {<br>System.out.println(rs.getString(<span class="hljs-string">"NAME"</span>));<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL 注入问题</h2><p>sql 存在漏洞，会被攻击导致数据泄露（SQL 存在拼接情况）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo02.utils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SQLinjection</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br>login(<span class="hljs-string">"'or'1=1"</span>, <span class="hljs-string">"126'or'1=1"</span>);<br>}<br><br><span class="hljs-comment">//登陆业务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span> <span class="hljs-params">(String username, String password)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection();<br>st = conn.createStatement();<br><span class="hljs-comment">//SELECT * FROM users WHERE name = '' AND password = ''</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT * FROM Users WHERE name = '"</span> + username + <span class="hljs-string">"' AND password = '"</span> + password + <span class="hljs-string">"'"</span>;<br>rs = st.executeQuery(sql);<br><span class="hljs-keyword">while</span> (rs.next()) {<br>System.out.println(rs.getString(<span class="hljs-string">"NAME"</span>));<br>System.out.println(rs.getString(<span class="hljs-string">"password"</span>));<br>System.out.println(<span class="hljs-string">"===================================="</span>);<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p>PreparedStatement 可以防止 SQL 注入 效率更高</p><ol><li><p>增</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo03;<br><br><span class="hljs-keyword">import</span> com.demo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInsert</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection();<br><br><span class="hljs-comment">//区别</span><br><span class="hljs-comment">//使用？代替参数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"INSERT INTO Users(Id, Name, Password, Email, Birthday) VALUES (?,?,?,?,?)"</span>;<br>st = conn.prepareStatement(sql);<span class="hljs-comment">//预编译SQL，先写SQL，不执行</span><br><br><span class="hljs-comment">//手动给参数赋值</span><br>st.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>st.setString(<span class="hljs-number">2</span>, <span class="hljs-string">"zlw"</span>);<br>st.setString(<span class="hljs-number">3</span>, <span class="hljs-string">"123212"</span>);<br>st.setString(<span class="hljs-number">4</span>, <span class="hljs-string">"123123123@qq.com"</span>);<br><span class="hljs-comment">//注意点：sql.Date    数据库       java.sql.Date()</span><br><span class="hljs-comment">//       util.Date   Java       new Date().getTime()    获得时间戳</span><br>st.setDate(<span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime()));<br><br><span class="hljs-comment">//执行</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> st.executeUpdate();<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) {<br>System.out.println(<span class="hljs-string">"插入成功"</span>);<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>删</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo03;<br><br><span class="hljs-keyword">import</span> com.demo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDelete</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection();<br><br><span class="hljs-comment">//区别</span><br><span class="hljs-comment">//使用？代替参数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"DELETE FROM Users WHERE Id=?"</span>;<br>st = conn.prepareStatement(sql);<span class="hljs-comment">//预编译SQL，先写SQL，不执行</span><br><br><span class="hljs-comment">//手动给参数赋值</span><br>st.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br><br><span class="hljs-comment">//执行</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> st.executeUpdate();<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) {<br>System.out.println(<span class="hljs-string">"删除成功"</span>);<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>改</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo03;<br><br><span class="hljs-keyword">import</span> com.demo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUpdate</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection();<br><br><span class="hljs-comment">//区别</span><br><span class="hljs-comment">//使用？代替参数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"UPDATE Users SET Name = ? WHERE Id =?"</span>;<br>st = conn.prepareStatement(sql);<span class="hljs-comment">//预编译SQL，先写SQL，不执行</span><br><br><span class="hljs-comment">//手动给参数赋值</span><br>st.setString(<span class="hljs-number">1</span>, <span class="hljs-string">"测试"</span>);<br>st.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//执行</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> st.executeUpdate();<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) {<br>System.out.println(<span class="hljs-string">"更新成功"</span>);<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>查</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo03;<br><br><span class="hljs-keyword">import</span> com.demo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSelect</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT * FROM Users WHERE Id = ?"</span>; <span class="hljs-comment">//编写SQL</span><br>st = conn.prepareStatement(sql); <span class="hljs-comment">//预编译</span><br>st.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//传递参数</span><br><span class="hljs-comment">//执行</span><br>rs = st.executeQuery();<br><span class="hljs-keyword">while</span> (rs.next()) {<br>System.out.println(rs.getString(<span class="hljs-string">"NAME"</span>));<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>}<span class="hljs-keyword">finally</span> {<br>    JdbcUtils.release(conn,st,rs);<br>}<br><br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li><li><p>防止 sql 注入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo03;<br><br><span class="hljs-keyword">import</span> com.demo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SQLinjection</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-comment">//login("''or1=1", "''or1=1");</span><br>login(<span class="hljs-string">"测试"</span>, <span class="hljs-string">"123456"</span>);<br>}<br><br><span class="hljs-comment">//登陆业务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span> <span class="hljs-params">(String username, String password)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection();<br><br><span class="hljs-comment">//PreparedStatement 防止SQL注入的本质，把传递进来的参数当作字符</span><br><span class="hljs-comment">//假设其中存在转义字符，比如说 ‘ 会被直接转义</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT * FROM Users WHERE Name = ? AND Password = ?"</span>;<br>st = conn.prepareStatement(sql);<br>st.setString(<span class="hljs-number">1</span>, username);<br>st.setString(<span class="hljs-number">2</span>, password);<br>rs = st.executeQuery();<br><span class="hljs-keyword">while</span> (rs.next()) {<br>System.out.println(rs.getString(<span class="hljs-string">"NAME"</span>));<br>System.out.println(rs.getString(<span class="hljs-string">"password"</span>));<br>System.out.println(<span class="hljs-string">"===================================="</span>);<br>}<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>正常业务：</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185556.png" alt="image-20210512012307042"></p><p>sql 注入结果:<img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185601.png" alt="image-20210512012234969"></p></li></ol><h2 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h2><blockquote><p>ACID 原则</p></blockquote><p>原则性：要么全部完成，要么都不完成。</p><p>一致性：总数不变</p><p><strong>隔离性：多个进程互不干扰</strong></p><p>持久性：一旦提交不可逆，持久化到数据库了</p><p><strong>隔离性的问题</strong>：</p><p>脏读：一个事务读取了另一个没有提交的事务</p><p>不可重复读：在同一个事务内，重复读取表中的数据，表数据发生了改变</p><p>虚读（幻读）：在一个事务内，读取到了别人插入的数据，导致前后结果不一致</p><blockquote><p>代码实现</p></blockquote><ol><li><p>开启事务</p></li><li><p>一组业务执行完毕，提交事务</p></li><li><p>可以在 try catch 语句中显示的定义回滚语句，但默认自动回滚</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.demo04;<br><br><span class="hljs-keyword">import</span> com.demo02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> AWEI</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 2021/5/15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTransaction1</span> {<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> {<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> {<br>conn = JdbcUtils.getConnection();<br><span class="hljs-comment">//关闭数据库的自动提交，自动开启事务</span><br>conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">"UPDATE Account SET Money = Money-100 WHERE Name = 'A'"</span>;<br>st = conn.prepareStatement(sql1);<br>st.executeUpdate();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">"UPDATE Account SET Money = Money+100 WHERE Name = 'B'"</span>;<br>st = conn.prepareStatement(sql2);<br>st.executeUpdate();<br><span class="hljs-comment">//业务完成，提交事务</span><br>conn.commit();<br>System.out.println(<span class="hljs-string">"成功!"</span>);<br>} <span class="hljs-keyword">catch</span> (SQLException throwables) {<br><span class="hljs-keyword">try</span> {<br>conn.rollback();<span class="hljs-comment">//失败回滚   （可省略 自动执行回滚）</span><br>} <span class="hljs-keyword">catch</span> (SQLException e) {<br>e.printStackTrace();<br>}<br>throwables.printStackTrace();<br>} <span class="hljs-keyword">finally</span> {<br>JdbcUtils.release(conn, st, rs);<br>}<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>数据库连接 —— 执行 —— 释放 的方式十分浪费系统资源，所以运用池化技<strong>术</strong></p><p><strong>池化技术：准备一些预先的资源，过来就连接预先准备好的</strong></p><p>编写连接池只需要实现一个接口：DataSource</p><blockquote><p>开源数据源实现</p></blockquote><p>DBCP</p><p>C3P0</p><p>Druid</p><p>使用了这些数据库连接池，就不需要在项目开发中编写数据库代码了</p><blockquote><p>DBCP</p></blockquote><p>需要用到的 jar 包<br><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185531.png" alt="image-20210515151307496"></p><blockquote><p>c3p0</p></blockquote><p>需要用到的 jar 包</p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185534.png" alt="image-20210515152208066"></p><p><img src="https://inencoding.oss-cn-shenzhen.aliyuncs.com/img/20220430185537.png" alt="image-20210515152245452"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
